---
title: "Self Practice 2: R for Data Science"
author: "Rydia"
date: "May 10, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **3  Data transformation**

```{r}
library(nycflights13)
library(tidyverse)
```

```{r}
flights
```

The most important difference between tibbles and data frames is the way tibbles print; they are designed for large datasets, so they only show the first few rows and only the columns that fit on one screen. There are a few options to see everything. If you’re using RStudio, the most convenient is probably `View(flights)`, which will open an interactive scrollable and filterable view. Otherwise you can use `print(flights, width = Inf)` to show all columns, or use [`glimpse()`](https://pillar.r-lib.org/reference/glimpse.html):

```{r}
glimpse(flights)
```

In both views, the variables names are followed by abbreviations that tell you the type of each variable: `<int>` is short for integer, `<dbl>` is short for double (aka real numbers), `<chr>` for character (aka strings), and `<dttm>` for date-time. These are important because the operations you can perform on a column depend so much on its “type”.

### **3.1.3 dplyr basics**

You’re about to learn the primary dplyr verbs (functions) which will allow you to solve the vast majority of your data manipulation challenges. But before we discuss their individual differences, it’s worth stating what they have in common:

1.  The first argument is always a data frame.

2.  The subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).

3.  The output is always a new data frame.

```{r}
flights |>
  filter(dest == "IAH") |> 
  group_by(year, month, day) |> 
  summarize(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )
```

## **3.2 Rows**

The most important verbs that operate on rows of a dataset are [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), which changes which rows are present without changing their order, and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) which finds rows with unique values but unlike [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) and [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) it can also optionally modify the columns.

### **3.2.1 `filter()`**

[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) allows you to keep rows based on the values of the columns^[1](https://r4ds.hadley.nz/data-transform#fn1)^. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row. For example, we could find all flights that departed more than 120 minutes (two hours) late:

```{r}
flights |>
  filter(dep_delay > 120)
```

```{r}
# Flights that departed on January 1
flights |> 
  filter(month == 1 & day == 1)
```

```{r}
# Flights that departed in January or February
flights |> 
  filter(month == 1 | month == 2)
```

```{r}
# A shorter way to select flights that departed in January or February
flights |> 
  filter(month %in% c(1, 2))
```

### **3.2.3 `arrange()`**

[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns. For example, the following code sorts by the departure time, which is spread over four columns. We get the earliest years first, then within a year the earliest months, etc.

```{r}
flights |> 
  arrange(year, month, day, dep_time)
```

You can use [`desc()`](https://dplyr.tidyverse.org/reference/desc.html) on a column inside of [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) to re-order the data frame based on that column in descending (big-to-small) order. For example, this code orders flights from most to least delayed:

```{r}
flights |>
  arrange(desc(dep_delay))
```

### **3.2.4 `distinct()`**

[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) finds all the unique rows in a dataset, so in a technical sense, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names:

```{r}
# Remove duplicate rows, if any
flights |> 
  distinct()
```

```{r}
# Find all unique origin and destination pairs
flights |> 
  distinct(origin, dest)
```

Alternatively, if you want to the keep other columns when filtering for unique rows, you can use the `.keep_all = TRUE` option.

```{r}
flights |> 
  distinct(origin, dest, .keep_all = TRUE)
```

It’s not a coincidence that all of these distinct flights are on January 1: `distinct()` will find the first occurrence of a unique row in the dataset and discard the rest.

If you want to find the number of occurrences instead, you’re better off swapping [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) for [`count()`](https://dplyr.tidyverse.org/reference/count.html), and with the `sort = TRUE` argument you can arrange them in descending order of number of occurrences. 

```{r}
flights |>
  count(origin, dest, sort = TRUE)
```

### **3.2.5 Exercises**

1.  In a single pipeline for each condition, find all flights that meet the condition:

    -   Had an arrival delay of two or more hours

```{r}
flights |> 
  filter(arr_delay >= 2)
```

```         
-   Flew to Houston (`IAH` or `HOU`)
```

```{r}
flights |> 
  filter(dest %in% c("IAH","HOU"))
```

```         
-   Were operated by United, American, or Delta
```

```{r}
flights |> 
  filter(carrier %in% c("UA","DL"))
```

```         
-   Departed in summer (July, August, and September)
```

```{r}
flights |> 
  filter(month %in% c("7","8", "9"))
```

```         
-   Arrived more than two hours late, but didn’t leave late
```

```{r}
flights |> 
  filter(arr_delay > 2 & dep_delay == 0)
```

```         
-   Were delayed by at least an hour, but made up over 30 minutes in flight.
```

```{r}
flights |> 
  filter(dep_delay > 1 & (dep_delay - arr_delay) > 30 )
```

2.  Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

```{r}
flights |> 
  arrange(desc(dep_delay))
```

3.  Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)

```{r}
flights |> 
  arrange(desc(speed = distance/(hour+ minute/60)))
```

4.  Was there a flight on every day of 2013? Yes.

```{r}
flights |> 
  distinct(year, month,day)
```

5.  Which flights traveled the farthest distance? Which traveled the least distance?

    -   JFK-HNL = furthest
    -   EWR-LGA - nearest

```{r}
flights |> 
  arrange(distance)
```

6.  Does it matter what order you used [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.

    -   `filter()` should be used first as it will narrow down the number of rows that `arrange()` need to sort.

## **3.3 Columns**

There are four important verbs that affect the columns without changing the rows: [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) creates new columns that are derived from the existing columns, [`select()`](https://dplyr.tidyverse.org/reference/select.html) changes which columns are present, [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) changes the names of the columns, and [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) changes the positions of the columns.

### **3.3.1 `mutate()`**

The job of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables. For now, we’ll stick with basic algebra, which allows us to compute the `gain`, how much time a delayed flight made up in the air, and the `speed` in miles per hour:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1
  )
```

The `.` is a sign that `.before` is an argument to the function, not the name of a third new variable we are creating. You can also use `.after` to add after a variable, and in both `.before` and `.after` you can use the variable name instead of a position. For example, we could add the new variables after `day`:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )
```

Note that since we haven’t assigned the result of the above computation back to `flights`, the new variables `gain,` `hours`, and `gain_per_hour` will only be printed but will not be stored in a data frame. And if we want them to be available in a data frame for future use, we should think carefully about whether we want the result to be assigned back to `flights`, overwriting the original data frame with many more variables, or to a new object. Often, the right answer is a new object that is named informatively to indicate its contents, e.g., `delay_gain`, but you might also have good reasons for overwriting `flights`.

### **3.3.2 `select()`**

It’s not uncommon to get datasets with hundreds or even thousands of variables. In this situation, the first challenge is often just focusing on the variables you’re interested in. [`select()`](https://dplyr.tidyverse.org/reference/select.html) allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:

-   Select columns by name:

    ```{r}
    flights |>
      select(year, month, day)
    ```

-   Select all columns between year and day (inclusive):

    ```{r}
    flights |>
      select(year:day)
    ```

-   Select all columns except those from year to day (inclusive):

    ```{r}
    flights |>
      select(!year:day)
    ```

    Historically this operation was done with `-` instead of `!`, so you’re likely to see that in the wild. These two operators serve the same purpose but with subtle differences in behavior. We recommend using `!` because it reads as “not” and combines well with `&` and `|`.

-   Select all columns that are characters:

    ```{r}
    flights |>
      select(where(is.character))
    ```

There are a number of helper functions you can use within [`select()`](https://dplyr.tidyverse.org/reference/select.html):

-   `starts_with("abc")`: matches names that begin with “abc”.

-   `ends_with("xyz")`: matches names that end with “xyz”.

-   `contains("ijk")`: matches names that contain “ijk”.

-   `num_range("x", 1:3)`: matches `x1`, `x2` and `x3`.

See [`?select`](https://dplyr.tidyverse.org/reference/select.html) for more details. Once you know regular expressions (the topic of [Chapter 15](https://r4ds.hadley.nz/regexps)) you’ll also be able to use [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.html) to select variables that match a pattern.

You can rename variables as you [`select()`](https://dplyr.tidyverse.org/reference/select.html) them by using `=`. The new name appears on the left hand side of the `=`, and the old variable appears on the right hand side:

```{r}
flights |> 
  select(tail_num = tailnum)
```

### **3.3.3 `rename()`**

If you want to keep all the existing variables and just want to rename a few, you can use [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) instead of [`select()`](https://dplyr.tidyverse.org/reference/select.html):

```{r}
flights |> 
  rename(tail_num = tailnum)
```

If you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out [`janitor::clean_names()`](https://sfirke.github.io/janitor/reference/clean_names.html) which provides some useful automated cleaning.

### **3.3.4 `relocate()`**

Use [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) to move variables around. You might want to collect related variables together or move important variables to the front. By default [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) moves variables to the front:

```{r}
flights |> 
  relocate(time_hour, air_time)
```

You can also specify where to put them using the `.before` and `.after` arguments, just like in [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html):

```{r}
flights |> 
  relocate(year:dep_time, .after = time_hour)
```

```{r}
flights |> 
  relocate(starts_with("arr"), .before = dep_time)
```

### **3.3.5 Exercises**

1.  Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?

    -   dep_delay = dep_time - sched_dep_time

2.  Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights`.

```{r}
flights |>
  select(contains(c("dep", "time", "arr", "delay")))
```

3.  What happens if you specify the name of the same variable multiple times in a [`select()`](https://dplyr.tidyverse.org/reference/select.html) call?

```{r}
flights |>
  select(arr_time,arr_time)
```

4.  What does the [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html) function do? Why might it be helpful in conjunction with this vector?

```{r}
variables <- c("year", "month", "day", "dep_delay", "arr_delay")
```

```{r}
flights |>
  select(any_of(variables))
```

```{r}
flights |> 
  select(contains("TIME"))
```

```{r}
flights |> 
  mutate(air_time_min = air_time,
         .before = 1)
```

7.  Why doesn’t the following work, and what does the error mean?

    -   after selecting the column tailnum, there is no more column called arr_delay.

```{r}
#| eval: FALSE
flights |> 
  select(tailnum) |> 
  arrange(arr_delay)
#> Error in `arrange()`:
#> ℹ In argument: `..1 = arr_delay`.
#> Caused by error:
#> ! object 'arr_delay' not found
```

## **3.4 The pipe**

We’ve shown you simple examples of the pipe above, but its real power arises when you start to combine multiple verbs. For example, imagine that you wanted to find the fastest flights to Houston’s IAH airport: you need to combine [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html), [`select()`](https://dplyr.tidyverse.org/reference/select.html), and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html):

```{r}
flights |> 
  filter(dest == "IAH", ) |> 
  mutate(speed = distance / air_time*60) |> 
  select(year:day, dep_time, carrier, flight, speed) |> 
  arrange(desc(speed))
```

### **3.5.1 `group_by()`**

Use [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) to divide your dataset into groups meaningful for your analysis:

```{r}
flights |> 
  group_by(month)
```

[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) doesn’t change the data but, if you look closely at the output, you’ll notice that the output indicates that it is “grouped by” month (`Groups: month [12]`). This means subsequent operations will now work “by month”. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) adds this grouped feature (referred to as class) to the data frame, which changes the behavior of the subsequent verbs applied to the data.

### **3.5.2 `summarize()`**

The most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html)^[3](https://r4ds.hadley.nz/data-transform#fn3)^, as shown by the following example, which computes the average departure delay by month:

```{r}
flights |> 
  group_by(month) |> 
  summarise(
    avg_delay = mean(dep_delay)
  )
```

Uhoh! Something has gone wrong and all of our results are `NA`s (pronounced “N-A”), R’s symbol for missing value. This happened because some of the observed flights had missing data in the delay column, and so when we calculated the mean including those values, we got an `NA` result. We’ll come back to discuss missing values in detail in [Chapter 18](https://r4ds.hadley.nz/missing-values), but for now we’ll tell the [`mean()`](https://rdrr.io/r/base/mean.html) function to ignore all missing values by setting the argument `na.rm` to `TRUE.`

```{r}
flights |> 
  group_by(month) |> 
  summarise(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  )
```

You can create any number of summaries in a single call to [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html). You’ll learn various useful summaries in the upcoming chapters, but one very useful summary is [`n()`](https://dplyr.tidyverse.org/reference/context.html), which returns the number of rows in each group:

```{r}
flights |> 
  group_by(month) |> 
  summarise(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    n = n()
  )
```

Means and counts can get you a surprisingly long way in data science!

### **3.5.3 The `slice_` functions**

There are five handy functions that allow you extract specific rows within each group:

-   `df |> slice_head(n = 1)` takes the first row from each group.

-   `df |> slice_tail(n = 1)` takes the last row in each group.

-   `df |> slice_min(x, n = 1)` takes the row with the smallest value of column `x`.

-   `df |> slice_max(x, n = 1)` takes the row with the largest value of column `x`.

-   `df |> slice_sample(n = 1)` takes one random row.

You can vary `n` to select more than one row, or instead of `n =`, you can use `prop = 0.1` to select (e.g.) 10% of the rows in each group. For example, the following code finds the flights that are most delayed upon arrival at each destination:

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1,with_ties = FALSE) |>
  relocate(dest) |> 
  arrange(desc(arr_delay))
```

Note that there are 105 destinations but we get 108 rows here. What’s up? [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and [`slice_max()`](https://dplyr.tidyverse.org/reference/slice.html) keep tied values so `n = 1` means give us all rows with the highest value. If you want exactly one row per group you can set `with_ties = FALSE`.

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1) |>
  relocate(dest) |> 
  arrange(desc(arr_delay))
```

This is similar to computing the max delay with [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html), but you get the whole corresponding row (or rows if there’s a tie) instead of the single summary statistic.

### **3.5.4 Grouping by multiple variables**

You can create groups using more than one variable. For example, we could make a group for each date.

```{r}
daily <- flights |>  
  group_by(year, month, day)
daily
```

If you’re happy with this behavior, you can explicitly request it in order to suppress the message:

```{r}
daily_flights <- daily |> 
  summarize(
    n = n(), 
    .groups = "drop_last"
  )
daily_flights
```

Alternatively, change the default behavior by setting a different value, e.g., "drop" to drop all grouping or "keep" to preserve the same groups.

```{r}
daily_flights <- daily |> 
  summarize(
    n = n(), 
    .groups = "drop"
  )
daily_flights
```

### **3.5.5 Ungrouping**

You might also want to remove grouping from a data frame without using [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html). You can do this with [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html).

```{r}
daily |> 
  ungroup()
```

Now let’s see what happens when you summarize an ungrouped data frame.

```{r}
daily |> 
  ungroup() |>
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    flights = n()
  )
```

You get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group.

### **3.5.6 `.by`**

dplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the `.by` argument. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) and [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html) aren’t going away, but you can now also use the `.by` argument to group within a single operation:

```{r}
flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n(),
    .by = month
  ) |> 
  arrange(month)
```

Or if you want to group by multiple variables:

```{r}
flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n(),
    .by = c(origin, dest)
  )
```

### **3.5.7 Exercises**

1.  Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)

```{r}
flights |> 
  group_by(carrier, dest) |> 
  summarise(n())
```

2.  Find the flights that are most delayed upon departure from each destination.

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(dep_delay) |> 
  arrange(desc(dep_delay))
```

3.  How do delays vary over the course of the day. Illustrate your answer with a plot.

4.  What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?

5.  Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

```{r}
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
```

```{r}
df |>
  group_by(y)
```

```{r}
df |>
  arrange(y)
```

```{r}
df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
```

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
```

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
```

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))

df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
```

## **3.6 Case study: aggregates and sample size**

Whenever you do any aggregation, it’s always a good idea to include a count ([`n()`](https://dplyr.tidyverse.org/reference/context.html)). That way, you can ensure that you’re not drawing conclusions based on very small amounts of data. We’ll demonstrate this with some baseball data from the **Lahman** package. Specifically, we will compare what proportion of times a player gets a hit (`H`) vs. the number of times they try to put the ball in play (`AB`):

```{r}
batters <- Lahman::Batting |> 
  group_by(playerID) |> 
  summarize(
    performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    n = sum(AB, na.rm = TRUE)
  )
batters
```

```{r}
batters |> 
  filter(n > 100) |> 
  ggplot(aes(x = n, y = performance)) +
  geom_point(alpha = 1 / 10) + 
  geom_smooth(se = FALSE)
```
