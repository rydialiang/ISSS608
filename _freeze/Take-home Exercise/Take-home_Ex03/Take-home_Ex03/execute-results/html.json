{
  "hash": "9b279ace2dcb64a9d8d607cc7bddd46c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Rydia\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# VAST 2024 Mini Challenge 2\n\n## Mini-Challenge 2: Creating Signatures for Geo-Temporal Patterns\n\nMini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\n\nThe details of the mini challenge can be found [here](https://vast-challenge.github.io/2024/MC2.html).\n\n## Tasks and Questions\n\nFishEye analysts need your help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. Your task is to develop new visual analytics tools and workflows that can be used to discover and understand signatures of different types of behavior. Can you use your tool to visualize a signature of SouthSeafood Express Corp’s illegal behavior? FishEye needs your help to develop a workflow to find other instances of illegal behavior.\n\n1.  FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\n\n2.  Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n3.  To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n4.  How did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n## 1.0 Data Preparation\n\n## 1.1 Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf)\n```\n:::\n\n\n## 1.2 Loading the Data\n\nLoading the .json data using `jsonlite` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_map <- read_sf(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\")\n```\n:::\n\n\nLoading the oceanus map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(oceanus_map) +\n  geom_sf(color = \"black\",\n          ) +\n  theme_void() +\n  geom_sf_text(aes(label = Name), size = 2,\n               vjust = 1.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## 1.3 **Wrangling and tidying edges**\n\n### 1.3.1 Extracting edges\n\nFirst, we extract only distinct edges from the tibble *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_data$links %>% \n  distinct()\n```\n:::\n\n\nNext, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <chr> \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nFrom the table above, we can identify some issues with the data:\n\n1.  The columns with date data type are all in character format.\n\n2.  Some columns have names that starts with \"\\_\". These need to be rename to avoid coding issues.\n\n### 1.3.2 Correcting the date data type with `lubridate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` <- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` <- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date <- as_datetime(mc2_edges$date)\n```\n:::\n\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### 1.3.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.3.4 Splitting words in `type` column\n\nThe code chunk below combined the following steps:\n\n1.  Splitting the words by \".\" - after observing that the format for type is as such: \"Event.TransportEvent.TransponderPing\"\n\n2.  The `max(lengths(word_list))` will be used to find the maximum number of elements in any split.\n\n3.  Apply function(x) to pad shorter splits with NA values to make them all the same length.\n\n4.  Create word_df and changing column names to event1 etc.\n\n5.  Convert word_df from matrix into tibble data.frame, and checks its class.\n\n6.  Append word_df to mc2_edges tibble data.frame.\n\n7.  Saving mc2_edges into R **rds** format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\n## 1.4 **Wrangling and tidying nodes**\n\n### 1.4.1 Extracting nodes\n\nThe code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n```\n:::\n\n\nNext, take a `glimpse()` to understand the data structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <chr> \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  <chr> \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for `type` column issues we discussed earlier, two additional data issues can be observed. They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n\n-   Some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.\n\n### 1.4.2 Correcting the date data type with `lubridate()`\n\nCorrect the date data type and take a `glimpse()` to confirm changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes$`_last_edited_date` <- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` <- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date <- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <dttm> 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  <dttm> 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\n### 1.4.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.4.4 Splitting words in `type` column\n\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R **rds** format yet, as there are more works to be done to clean up the dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"entity\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(entity2, entity3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  cbind(word_df)\n```\n:::\n\n\n### 1.4.5 Tidying text field\n\nUsing `mutate()` of dplyr and `gsub()` of Base R to tidy up the values in the cell. Essentially, the unwanted characters like `c`, `(`, `)`, and `\\` are removed by substituting with empty value `\"\"` for both Activities and fish_species_present columns. What is left in the columns will be characters separated by `,`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n:::\n\n\nLastly, we will save the tidied mc2_nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\n```\n:::\n\n\n## 1.5 Extracting the required columns for each graph\n\nIn this section, we will extract the required column for the following graphs:\n\n1.  Vessel Movements\n\n2.  Harbor Reports\n\n3.  Harbor Import Records\n\n### 1.5.1 Vessel Movements\n\n**Vessel Movements:** Oceanus is outfitted with a transponder/ping system named the Oceanus Vessel Locator System (OVLS).  Vessels are outfitted with a transponder and periodic 'pings' from base-stations results in a report of vessel locations at any time.  The raw ping granularity is at the minute-level but post-processing has converted it into visit/dwell times. OVLS is generally reliable, though vessel records may be missing for a variety of reasons.\n\nNode/Edge types and properties present\n\n1.  Entity.Vessel: Description of the vessel\n2.  Entity.Location: Description of a geographic location\n3.  Event.TransponderPing: Links a vessel to a location\n\nFirst, we will extract the relevant nodes, namely the vessels and locations from `mc2_nodes`. As we are only concerned about the fishing vessels, we will only extract values matching \"Vessel\" in entity2 column and values matching \"FishingVessel\" in entity3 column. For locations, we will match values of \"Location\" in entity2 column, and match values of \"City\", \"Point\" and \"Region\" in entity3 column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_mvmt_nodes <- mc2_nodes %>% \n  filter(entity2 %in% c(\"Vessel\",\"Location\")) %>% \n  filter(entity3 %in% c(\"FishingVessel\",\"City\",\"Point\",\"Region\"))\n```\n:::\n\n\nNext, we will extract the vessel movement edges from mc2_edges, by filtering the \"TransponderPing\" from event3 column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_mvmt_edges <- mc2_edges %>% \n  filter(event3 %in% c(\"TransponderPing\"))\n```\n:::\n\n\n### 1.5.2 Harbor Reports\n\n**Harbor Reports:** Harbor masters regularly report the vessels found in their purview anytime during the day.  This data is derived from a different system than OVLS (see \"Vessel Movements\"), though the data overlaps.  Harbor Reports are provided on a different schedule from different harbors. Since no harbor reports every day, this data has lower temporal granularity than vessel movement data. Additionally, the Harbor Master is also responsible for proximate navigational beacon(s), so this data has lower spatial granularity as well.  However, the list of vessels observed is considered canonical.\n\nNode/edge types present:\n\n1.  Entity.Vessel\n\n2.  Entity.location\n\n3.  Event.HarborReport\n\nSince the node type are the same as the vessel movements, we will make a copy of the node from vessel movement nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_report_nodes <- vessel_mvmt_nodes\n```\n:::\n\n\nNext, we will extract the harbor report edges from mc2_edges, by filtering the \"HarborReport\" from event3 column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_report_edges <- mc2_edges %>% \n  filter(event2 %in% c(\"HarborReport\"))\n```\n:::\n\n\n### 1.5.3 Harbor Import Records\n\n**Harbor Import Records**: Vessels deliver cargo to the ports, and that cargo is brought into Oceanus.  These records reflect the goods that \\*leave\\* the harbor to go to businesses in Oceanus or to be exported.  It was filtered pre-ingest to focus on the delivery of raw fish.  Because it is raw, fish leave the port quickly (generally one day after delivery).  Due to clerical error, the records purchased by FishEye do not include the vessel that delivered the cargo.\n\nNode/Edge types present:\n\n1.  Entity.location\n\n2.  Entity.Commodity.Fish\n\n3.  Entity.Document.DeliveryReport\n\n4.  Event.Transaction\n\nFirst, we will extract the relevant nodes, namely the location, commodity.fish and document.delivery report from `mc2_nodes`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_import_records_nodes <- mc2_nodes %>% \n  filter(entity2 %in% c(\"Location\",\"Commodity\",\"Document\"))\n```\n:::\n\n\nNext, we will extract harbor import records edges, by filtering the event2 with value of \"Transaction\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_import_records_edges <- mc2_edges %>% \n  filter(event2 == \"Transaction\")\n```\n:::\n\n\nBefore we move on to exploring the data, we will save the 3 sources edges and nodes tibble data frame as R **rds** format in the data/rds folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vessel_mvmt_nodes, \"data/rds/vessel_mvmt_nodes.rds\")\nwrite_rds(vessel_mvmt_edges, \"data/rds/vessel_mvmt_edges.rds\")\nwrite_rds(harbor_report_nodes, \"data/rds/harbor_report_nodes.rds\")\nwrite_rds(harbor_report_edges, \"data/rds/harbor_report_edges.rds\")\nwrite_rds(harbor_import_records_nodes, \"data/rds/harbor_import_records_nodes.rds\")\nwrite_rds(harbor_import_records_edges, \"data/rds/harbor_import_records_edges.rds\")\n```\n:::\n\n\n## 2.0 Task 1: Flow of Commercially Caught Fish\n\nIn this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:\n\n1.  Associating the vessels with their probable cargoes\n2.  Which vessels deliver which products and when?\n3.  Examine the seasonal trends and anomalies in the port exit records\n\n## 2.1 Associating the vessels with their probable cargoes\n\nTo find out which commodity goes to which ports, we first create a cargo list that links the cargo to the cities and commodities. At the same time, we also clean up the name of the fish, leaving only its common name in the \"name\" column, by removing all the characters after the \"/\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_port_list <- harbor_import_records_edges %>% \n  select(source,target) %>% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\ncargo_commodity_list <- harbor_import_records_edges %>% \n  select(source,target) %>% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %>% \n  rename(commodity = target)\n\ncargo_list <- cargo_port_list %>% \n  left_join(cargo_commodity_list) %>%\n  left_join(harbor_import_records_edges) %>% \n  select(source, target, commodity, date) %>% \n  rename(cargo = source, city = target) \n\ncargo_list<- harbor_import_records_nodes %>% \n  rename(commodity = id) %>% \n  select(name, commodity) %>% \n  left_join(cargo_list) %>% \n  mutate(name = str_replace(name, \"/.*\", \"\"))\n\ncargo_list<- harbor_import_records_nodes %>% \n  select(id,qty_tons) %>% \n  rename(cargo = id) %>% \n  left_join(cargo_list,\n            unmatched = \"drop\") %>%\n  filter(if_all(c(qty_tons), ~ !is.na(.)))\n```\n:::\n\n\n## 2.3 Examine the seasonal trends and anomalies in the port exit records\n\nWe examine the cargo_list and realised that there are some records that shows negative tonnage for their cargoes. This is abnormal as all cargoes should have positive qty_tons value. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnegative_ton_cargo_by_city <- cargo_list %>% \n  filter(qty_tons <= 0) %>% \n  arrange(qty_tons) %>% \n  group_by(city) %>% \n  summarise(total_qty_ton_neg = sum(qty_tons)) %>% \n  arrange(total_qty_ton_neg)\n\npositive_ton_cargo_by_city <- cargo_list %>% \n  filter(qty_tons > 0) %>% \n  arrange(qty_tons) %>% \n  group_by(city) %>% \n  summarise(total_qty_ton_pos = sum(qty_tons)) %>% \n  arrange(desc(total_qty_ton_pos))\n\nnegative_ton_cargo_by_city \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  <chr>                               <dbl>\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n```\n\n\n:::\n\n```{.r .cell-code}\npositive_ton_cargo_by_city\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  city                    total_qty_ton_pos\n  <chr>                               <dbl>\n1 City of Paackland                  34653.\n2 City of Himark                     32839.\n3 City of Lomark                     23721.\n4 City of South Paackland            20790.\n5 City of Haacklee                   14988.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npositive_ton_cargo_by_city$city <- factor(positive_ton_cargo_by_city$city, \n                                           levels = rev(positive_ton_cargo_by_city$city[order(positive_ton_cargo_by_city$total_qty_ton_pos)]))\n\nggplot(positive_ton_cargo_by_city, aes(x = city)) +\n  geom_bar(aes(y = total_qty_ton_pos), \n           stat = \"identity\", \n           position = \"dodge\", fill = \"blue\", alpha = 0.6) +  # Positive quantities\n  labs(title = \"Quantities by City\",\n       x = \"City\",\n       y = \"Total Quantity (tons)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\nThere seems to be suspicious activities going on at each cities when we look at the negative values in qty_ton.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnegative_ton_cargo_by_city\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  <chr>                               <dbl>\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n```\n\n\n:::\n:::\n\nNext, we will remove the negative quantity and then find the aggregated value by the type of fish, the city, and the date of transaction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_by_port_agg <- cargo_list %>%\n  distinct() %>%\n  filter(qty_tons > 0) %>% \n  group_by(name, city, date) %>%\n  summarise(total_qty_ton = sum(qty_tons)) %>%\n  ungroup() %>% \n  mutate(month = month(date, \n                       label = TRUE, \n                       abbr = TRUE))\n```\n:::\n\nSecondly, when we observe the heatmap, we also realised that the data only covers the month from Feb to Nov in year 2035. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- fish_by_port_agg  %>%\n  distinct() %>%\n  group_by(name,month) %>%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create a calendar heat map\ncreate_heatmap <- function(data, city, f) {\n  ggplot(data, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store heatmaps\nheatmaps <- list()\n\n# Iterate over each city\ncities <- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data <- fish_by_port_agg %>% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap <- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] <- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-33-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-33-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-33-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-33-5.png){width=672}\n:::\n:::\n\n\n## 2.3.1 **Understanding the types of fish that should not be in the market**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_fish_species <- mc2_nodes %>% \n  filter(entity3 == \"Region\") %>% \n  select(Name, fish_species_present, Activities, kind)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"species\", 1:max_elements) \n\nword_df <- as_tibble(word_df) %>% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %>% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %>% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %>% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %>% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %>%\n  mutate_at(vars(species1:species5), trimws)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nregion_fish_species <- region_fish_species %>%\n  cbind(word_df) \n  \nregion_fish_species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Name\n1           Cod Table\n2      Ghoti Preserve\n3         Wrasse Beds\n4           Nemo Reef\n5 Don Limpet Preserve\n6          Tuna Shelf\n                                                                                                  fish_species_present\n1                                             Cod/Gadus n.specificatae, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n2                       Wrasse/Labridae n.refert, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Offidiaa/Piscis osseus\n3                                             Wrasse/Labridae n.refert, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n4 Wrasse/Labridae n.refert, Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis\n5  Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Sockfish/Pisces foetida\n6                         Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Harland/Piscis sapidum\n                         Activities                kind species1 species2\n1                Commercial fishing      Fishing Ground      Cod Birdseye\n2     Research, Tourism, Recreation Ecological Preserve   Wrasse Beauvoir\n3                Commercial fishing      Fishing Ground   Wrasse Birdseye\n4               Recreation, Tourism Ecological Preserve   Wrasse     Tuna\n5               Recreation, Tourism Ecological Preserve     Tuna Birdseye\n6 Commercial fishing, Sport fishing      Fishing Ground     Tuna Birdseye\n  species3 species4 species5\n1 Beauvoir     <NA>     <NA>\n2  Helenaa Offidiaa     <NA>\n3 Beauvoir     <NA>     <NA>\n4 Birdseye Beauvoir  Helenaa\n5 Beauvoir  Helenaa Sockfish\n6 Beauvoir  Harland     <NA>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert data to long format\nregion_fish_species_long <- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long <- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %>% \n  na.omit() %>%\n  mutate_at(vars(Presence), trimws)\n```\n:::\n\n\n**Visualising the Species presence in each Region**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order <- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nFrom the above visualisation, we can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species would have fished illegal. Below shows the visualisation of the species and qty_ton that flows through each city by months. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store heatmaps\nheatmaps <- list()\n\n# Iterate over each city\ncities <- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data <- fish_by_port_agg %>% \n    filter(city == c) %>% \n    filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\"))\n  \n  # Create the heatmap for the current city\n  heatmap <- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] <- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-5.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- fish_by_port_agg  %>% \n  filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\")) %>% \n  distinct() %>%\n  group_by(name,month) %>%\n  summarise(total_qty_ton = sum(total_qty_ton))\n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nFrom this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively. \n\nProbable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish. \n\n\n\n\n\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}