{
  "hash": "abdecdeba43fcbaa1b30148892cb054e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Self Practice 2: R for Data Science\"\nauthor: \"Rydia\"\ndate: \"May 10, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# **3  Data transformation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nThe most important difference between tibbles and data frames is the way tibbles print; they are designed for large datasets, so they only show the first few rows and only the columns that fit on one screen. There are a few options to see everything. If you’re using RStudio, the most convenient is probably `View(flights)`, which will open an interactive scrollable and filterable view. Otherwise you can use `print(flights, width = Inf)` to show all columns, or use [`glimpse()`](https://pillar.r-lib.org/reference/glimpse.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\nIn both views, the variables names are followed by abbreviations that tell you the type of each variable: `<int>` is short for integer, `<dbl>` is short for double (aka real numbers), `<chr>` for character (aka strings), and `<dttm>` for date-time. These are important because the operations you can perform on a column depend so much on its “type”.\n\n### **3.1.3 dplyr basics**\n\nYou’re about to learn the primary dplyr verbs (functions) which will allow you to solve the vast majority of your data manipulation challenges. But before we discuss their individual differences, it’s worth stating what they have in common:\n\n1.  The first argument is always a data frame.\n\n2.  The subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).\n\n3.  The output is always a new data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"IAH\") |> \n  group_by(year, month, day) |> \n  summarize(\n    arr_delay = mean(arr_delay, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day arr_delay\n   <int> <int> <int>     <dbl>\n 1  2013     1     1     17.8 \n 2  2013     1     2      7   \n 3  2013     1     3     18.3 \n 4  2013     1     4     -3.2 \n 5  2013     1     5     20.2 \n 6  2013     1     6      9.28\n 7  2013     1     7     -7.74\n 8  2013     1     8      7.79\n 9  2013     1     9     18.1 \n10  2013     1    10      6.68\n# ℹ 355 more rows\n```\n\n\n:::\n:::\n\n\n## **3.2 Rows**\n\nThe most important verbs that operate on rows of a dataset are [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), which changes which rows are present without changing their order, and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) which finds rows with unique values but unlike [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) and [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) it can also optionally modify the columns.\n\n### **3.2.1 `filter()`**\n\n[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) allows you to keep rows based on the values of the columns^[1](https://r4ds.hadley.nz/data-transform#fn1)^. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row. For example, we could find all flights that departed more than 120 minutes (two hours) late:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dep_delay > 120)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Flights that departed on January 1\nflights |> \n  filter(month == 1 & day == 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Flights that departed in January or February\nflights |> \n  filter(month == 1 | month == 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# A shorter way to select flights that departed in January or February\nflights |> \n  filter(month %in% c(1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n### **3.2.3 `arrange()`**\n\n[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns. For example, the following code sorts by the departure time, which is spread over four columns. We get the earliest years first, then within a year the earliest months, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(year, month, day, dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nYou can use [`desc()`](https://dplyr.tidyverse.org/reference/desc.html) on a column inside of [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) to re-order the data frame based on that column in descending (big-to-small) order. For example, this code orders flights from most to least delayed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n### **3.2.4 `distinct()`**\n\n[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) finds all the unique rows in a dataset, so in a technical sense, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicate rows, if any\nflights |> \n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all unique origin and destination pairs\nflights |> \n  distinct(origin, dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 2\n   origin dest \n   <chr>  <chr>\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n```\n\n\n:::\n:::\n\n\nAlternatively, if you want to the keep other columns when filtering for unique rows, you can use the `.keep_all = TRUE` option.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  distinct(origin, dest, .keep_all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nIt’s not a coincidence that all of these distinct flights are on January 1: `distinct()` will find the first occurrence of a unique row in the dataset and discard the rest.\n\nIf you want to find the number of occurrences instead, you’re better off swapping [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) for [`count()`](https://dplyr.tidyverse.org/reference/count.html), and with the `sort = TRUE` argument you can arrange them in descending order of number of occurrences. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(origin, dest, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 3\n   origin dest      n\n   <chr>  <chr> <int>\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n```\n\n\n:::\n:::\n\n\n### **3.2.5 Exercises**\n\n1.  In a single pipeline for each condition, find all flights that meet the condition:\n\n    -   Had an arrival delay of two or more hours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(arr_delay >= 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 127,929 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      555            600        -5      913            854\n 6  2013     1     1      558            600        -2      753            745\n 7  2013     1     1      558            600        -2      924            917\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      600            600         0      837            825\n10  2013     1     1      602            605        -3      821            805\n# ℹ 127,919 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n```         \n-   Flew to Houston (`IAH` or `HOU`)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dest %in% c(\"IAH\",\"HOU\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n```         \n-   Were operated by United, American, or Delta\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(carrier %in% c(\"UA\",\"DL\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 106,775 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      554            600        -6      812            837\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      924            917\n 6  2013     1     1      558            600        -2      923            937\n 7  2013     1     1      559            600        -1      854            902\n 8  2013     1     1      602            610        -8      812            820\n 9  2013     1     1      606            610        -4      837            845\n10  2013     1     1      607            607         0      858            915\n# ℹ 106,765 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n```         \n-   Departed in summer (July, August, and September)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(month %in% c(\"7\",\"8\", \"9\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n```         \n-   Arrived more than two hours late, but didn’t leave late\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(arr_delay > 2 & dep_delay == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,368 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      600            600         0      837            825\n 2  2013     1     1      635            635         0     1028            940\n 3  2013     1     1      739            739         0     1104           1038\n 4  2013     1     1      745            745         0     1135           1125\n 5  2013     1     1      800            800         0     1022           1014\n 6  2013     1     1      805            805         0     1015           1005\n 7  2013     1     1      810            810         0     1048           1037\n 8  2013     1     1      823            823         0     1151           1135\n 9  2013     1     1      830            830         0     1018           1015\n10  2013     1     1      835            835         0     1210           1150\n# ℹ 4,358 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n```         \n-   Were delayed by at least an hour, but made up over 30 minutes in flight.\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dep_delay > 1 & (dep_delay - arr_delay) > 30 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,474 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      857            851         6     1157           1222\n 2  2013     1     1      909            810        59     1331           1315\n 3  2013     1     1     1025            951        34     1258           1302\n 4  2013     1     1     1625           1550        35     2054           2050\n 5  2013     1     1     1957           1945        12     2307           2329\n 6  2013     1     1     2035           2030         5     2337              5\n 7  2013     1     1     2046           2035        11     2144           2213\n 8  2013     1     1     2107           2040        27     2354           2359\n 9  2013     1     1     2205           1720       285       46           2040\n10  2013     1     1     2326           2130       116      131             18\n# ℹ 7,464 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n2.  Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n3.  Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(desc(speed = distance/(hour+ minute/60)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      857            900        -3     1516           1530\n 2  2013     1     2      909            900         9     1525           1530\n 3  2013     1     3      914            900        14     1504           1530\n 4  2013     1     4      900            900         0     1516           1530\n 5  2013     1     5      858            900        -2     1519           1530\n 6  2013     1     6     1019            900        79     1558           1530\n 7  2013     1     7     1042            900       102     1620           1530\n 8  2013     1     8      901            900         1     1504           1530\n 9  2013     1     9      641            900      1301     1242           1530\n10  2013     1    10      859            900        -1     1449           1530\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n4.  Was there a flight on every day of 2013? Yes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  distinct(year, month,day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 365 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     2\n 3  2013     1     3\n 4  2013     1     4\n 5  2013     1     5\n 6  2013     1     6\n 7  2013     1     7\n 8  2013     1     8\n 9  2013     1     9\n10  2013     1    10\n# ℹ 355 more rows\n```\n\n\n:::\n:::\n\n\n5.  Which flights traveled the farthest distance? Which traveled the least distance?\n\n    -   JFK-HNL = furthest\n    -   EWR-LGA - nearest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     7    27       NA            106        NA       NA            245\n 2  2013     1     3     2127           2129        -2     2222           2224\n 3  2013     1     4     1240           1200        40     1333           1306\n 4  2013     1     4     1829           1615       134     1937           1721\n 5  2013     1     4     2128           2129        -1     2218           2224\n 6  2013     1     5     1155           1200        -5     1241           1306\n 7  2013     1     6     2125           2129        -4     2224           2224\n 8  2013     1     7     2124           2129        -5     2212           2224\n 9  2013     1     8     2127           2130        -3     2304           2225\n10  2013     1     9     2126           2129        -3     2217           2224\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n6.  Does it matter what order you used [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.\n\n    -   `filter()` should be used first as it will narrow down the number of rows that `arrange()` need to sort.\n\n## **3.3 Columns**\n\nThere are four important verbs that affect the columns without changing the rows: [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) creates new columns that are derived from the existing columns, [`select()`](https://dplyr.tidyverse.org/reference/select.html) changes which columns are present, [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) changes the names of the columns, and [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) changes the positions of the columns.\n\n### **3.3.1 `mutate()`**\n\nThe job of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables. For now, we’ll stick with basic algebra, which allows us to compute the `gain`, how much time a delayed flight made up in the air, and the `speed` in miles per hour:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   <dbl> <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nThe `.` is a sign that `.before` is an argument to the function, not the name of a third new variable we are creating. You can also use `.after` to add after a variable, and in both `.before` and `.after` you can use the variable name instead of a position. For example, we could add the new variables after `day`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 21\n    year month   day  gain speed dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int> <dbl> <dbl>    <int>          <int>     <dbl>    <int>\n 1  2013     1     1    -9  370.      517            515         2      830\n 2  2013     1     1   -16  374.      533            529         4      850\n 3  2013     1     1   -31  408.      542            540         2      923\n 4  2013     1     1    17  517.      544            545        -1     1004\n 5  2013     1     1    19  394.      554            600        -6      812\n 6  2013     1     1   -16  288.      554            558        -4      740\n 7  2013     1     1   -24  404.      555            600        -5      913\n 8  2013     1     1    11  259.      557            600        -3      709\n 9  2013     1     1     5  405.      557            600        -3      838\n10  2013     1     1   -10  319.      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nNote that since we haven’t assigned the result of the above computation back to `flights`, the new variables `gain,` `hours`, and `gain_per_hour` will only be printed but will not be stored in a data frame. And if we want them to be available in a data frame for future use, we should think carefully about whether we want the result to be assigned back to `flights`, overwriting the original data frame with many more variables, or to a new object. Often, the right answer is a new object that is named informatively to indicate its contents, e.g., `delay_gain`, but you might also have good reasons for overwriting `flights`.\n\n### **3.3.2 `select()`**\n\nIt’s not uncommon to get datasets with hundreds or even thousands of variables. In this situation, the first challenge is often just focusing on the variables you’re interested in. [`select()`](https://dplyr.tidyverse.org/reference/select.html) allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:\n\n-   Select columns by name:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      select(year, month, day)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 336,776 × 3\n        year month   day\n       <int> <int> <int>\n     1  2013     1     1\n     2  2013     1     1\n     3  2013     1     1\n     4  2013     1     1\n     5  2013     1     1\n     6  2013     1     1\n     7  2013     1     1\n     8  2013     1     1\n     9  2013     1     1\n    10  2013     1     1\n    # ℹ 336,766 more rows\n    ```\n    \n    \n    :::\n    :::\n\n\n-   Select all columns between year and day (inclusive):\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      select(year:day)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 336,776 × 3\n        year month   day\n       <int> <int> <int>\n     1  2013     1     1\n     2  2013     1     1\n     3  2013     1     1\n     4  2013     1     1\n     5  2013     1     1\n     6  2013     1     1\n     7  2013     1     1\n     8  2013     1     1\n     9  2013     1     1\n    10  2013     1     1\n    # ℹ 336,766 more rows\n    ```\n    \n    \n    :::\n    :::\n\n\n-   Select all columns except those from year to day (inclusive):\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      select(!year:day)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 336,776 × 16\n       dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n          <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>  \n     1      517            515         2      830            819        11 UA     \n     2      533            529         4      850            830        20 UA     \n     3      542            540         2      923            850        33 AA     \n     4      544            545        -1     1004           1022       -18 B6     \n     5      554            600        -6      812            837       -25 DL     \n     6      554            558        -4      740            728        12 UA     \n     7      555            600        -5      913            854        19 B6     \n     8      557            600        -3      709            723       -14 EV     \n     9      557            600        -3      838            846        -8 B6     \n    10      558            600        -2      753            745         8 AA     \n    # ℹ 336,766 more rows\n    # ℹ 9 more variables: flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n    #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n    ```\n    \n    \n    :::\n    :::\n\n\n    Historically this operation was done with `-` instead of `!`, so you’re likely to see that in the wild. These two operators serve the same purpose but with subtle differences in behavior. We recommend using `!` because it reads as “not” and combines well with `&` and `|`.\n\n-   Select all columns that are characters:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      select(where(is.character))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 336,776 × 4\n       carrier tailnum origin dest \n       <chr>   <chr>   <chr>  <chr>\n     1 UA      N14228  EWR    IAH  \n     2 UA      N24211  LGA    IAH  \n     3 AA      N619AA  JFK    MIA  \n     4 B6      N804JB  JFK    BQN  \n     5 DL      N668DN  LGA    ATL  \n     6 UA      N39463  EWR    ORD  \n     7 B6      N516JB  EWR    FLL  \n     8 EV      N829AS  LGA    IAD  \n     9 B6      N593JB  JFK    MCO  \n    10 AA      N3ALAA  LGA    ORD  \n    # ℹ 336,766 more rows\n    ```\n    \n    \n    :::\n    :::\n\n\nThere are a number of helper functions you can use within [`select()`](https://dplyr.tidyverse.org/reference/select.html):\n\n-   `starts_with(\"abc\")`: matches names that begin with “abc”.\n\n-   `ends_with(\"xyz\")`: matches names that end with “xyz”.\n\n-   `contains(\"ijk\")`: matches names that contain “ijk”.\n\n-   `num_range(\"x\", 1:3)`: matches `x1`, `x2` and `x3`.\n\nSee [`?select`](https://dplyr.tidyverse.org/reference/select.html) for more details. Once you know regular expressions (the topic of [Chapter 15](https://r4ds.hadley.nz/regexps)) you’ll also be able to use [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.html) to select variables that match a pattern.\n\nYou can rename variables as you [`select()`](https://dplyr.tidyverse.org/reference/select.html) them by using `=`. The new name appears on the left hand side of the `=`, and the old variable appears on the right hand side:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(tail_num = tailnum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 1\n   tail_num\n   <chr>   \n 1 N14228  \n 2 N24211  \n 3 N619AA  \n 4 N804JB  \n 5 N668DN  \n 6 N39463  \n 7 N516JB  \n 8 N829AS  \n 9 N593JB  \n10 N3ALAA  \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n### **3.3.3 `rename()`**\n\nIf you want to keep all the existing variables and just want to rename a few, you can use [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) instead of [`select()`](https://dplyr.tidyverse.org/reference/select.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  rename(tail_num = tailnum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tail_num <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nIf you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out [`janitor::clean_names()`](https://sfirke.github.io/janitor/reference/clean_names.html) which provides some useful automated cleaning.\n\n### **3.3.4 `relocate()`**\n\nUse [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) to move variables around. You might want to collect related variables together or move important variables to the front. By default [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) moves variables to the front:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  relocate(time_hour, air_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   <dttm>                 <dbl> <int> <int> <int>    <int>          <int>\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay <dbl>, arr_time <int>, sched_arr_time <int>,\n#   arr_delay <dbl>, carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, distance <dbl>, hour <dbl>, minute <dbl>\n```\n\n\n:::\n:::\n\n\nYou can also specify where to put them using the `.before` and `.after` arguments, just like in [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  relocate(year:dep_time, .after = time_hour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n   sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight\n            <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int>\n 1            515         2      830            819        11 UA        1545\n 2            529         4      850            830        20 UA        1714\n 3            540         2      923            850        33 AA        1141\n 4            545        -1     1004           1022       -18 B6         725\n 5            600        -6      812            837       -25 DL         461\n 6            558        -4      740            728        12 UA        1696\n 7            600        -5      913            854        19 B6         507\n 8            600        -3      709            723       -14 EV        5708\n 9            600        -3      838            846        -8 B6          79\n10            600        -2      753            745         8 AA         301\n# ℹ 336,766 more rows\n# ℹ 12 more variables: tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, year <int>,\n#   month <int>, day <int>, dep_time <int>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  relocate(starts_with(\"arr\"), .before = dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day arr_time arr_delay dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>     <dbl>    <int>          <int>     <dbl>\n 1  2013     1     1      830        11      517            515         2\n 2  2013     1     1      850        20      533            529         4\n 3  2013     1     1      923        33      542            540         2\n 4  2013     1     1     1004       -18      544            545        -1\n 5  2013     1     1      812       -25      554            600        -6\n 6  2013     1     1      740        12      554            558        -4\n 7  2013     1     1      913        19      555            600        -5\n 8  2013     1     1      709       -14      557            600        -3\n 9  2013     1     1      838        -8      557            600        -3\n10  2013     1     1      753         8      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time <int>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n### **3.3.5 Exercises**\n\n1.  Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?\n\n    -   dep_delay = dep_time - sched_dep_time\n\n2.  Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(contains(c(\"dep\", \"time\", \"arr\", \"delay\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 9\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time air_time\n      <int>          <int>     <dbl>    <int>          <int>    <dbl>\n 1      517            515         2      830            819      227\n 2      533            529         4      850            830      227\n 3      542            540         2      923            850      160\n 4      544            545        -1     1004           1022      183\n 5      554            600        -6      812            837      116\n 6      554            558        -4      740            728      150\n 7      555            600        -5      913            854      158\n 8      557            600        -3      709            723       53\n 9      557            600        -3      838            846      140\n10      558            600        -2      753            745      138\n# ℹ 336,766 more rows\n# ℹ 3 more variables: time_hour <dttm>, arr_delay <dbl>, carrier <chr>\n```\n\n\n:::\n:::\n\n\n3.  What happens if you specify the name of the same variable multiple times in a [`select()`](https://dplyr.tidyverse.org/reference/select.html) call?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(arr_time,arr_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 1\n   arr_time\n      <int>\n 1      830\n 2      850\n 3      923\n 4     1004\n 5      812\n 6      740\n 7      913\n 8      709\n 9      838\n10      753\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n4.  What does the [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html) function do? Why might it be helpful in conjunction with this vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables <- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(any_of(variables))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   <int> <int> <int>     <dbl>     <dbl>\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(contains(\"TIME\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      <int>          <int>    <int>          <int>    <dbl> <dttm>             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(air_time_min = air_time,\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 20\n   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n          <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1          227  2013     1     1      517            515         2      830\n 2          227  2013     1     1      533            529         4      850\n 3          160  2013     1     1      542            540         2      923\n 4          183  2013     1     1      544            545        -1     1004\n 5          116  2013     1     1      554            600        -6      812\n 6          150  2013     1     1      554            558        -4      740\n 7          158  2013     1     1      555            600        -5      913\n 8           53  2013     1     1      557            600        -3      709\n 9          140  2013     1     1      557            600        -3      838\n10          138  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n7.  Why doesn’t the following work, and what does the error mean?\n\n    -   after selecting the column tailnum, there is no more column called arr_delay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(tailnum) |> \n  arrange(arr_delay)\n#> Error in `arrange()`:\n#> ℹ In argument: `..1 = arr_delay`.\n#> Caused by error:\n#> ! object 'arr_delay' not found\n```\n:::\n\n\n## **3.4 The pipe**\n\nWe’ve shown you simple examples of the pipe above, but its real power arises when you start to combine multiple verbs. For example, imagine that you wanted to find the fastest flights to Houston’s IAH airport: you need to combine [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html), [`select()`](https://dplyr.tidyverse.org/reference/select.html), and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dest == \"IAH\", ) |> \n  mutate(speed = distance / air_time*60) |> \n  select(year:day, dep_time, carrier, flight, speed) |> \n  arrange(desc(speed))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   <int> <int> <int>    <int> <chr>    <int> <dbl>\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n```\n\n\n:::\n:::\n\n\n### **3.5.1 `group_by()`**\n\nUse [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) to divide your dataset into groups meaningful for your analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) doesn’t change the data but, if you look closely at the output, you’ll notice that the output indicates that it is “grouped by” month (`Groups: month [12]`). This means subsequent operations will now work “by month”. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) adds this grouped feature (referred to as class) to the data frame, which changes the behavior of the subsequent verbs applied to the data.\n\n### **3.5.2 `summarize()`**\n\nThe most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html)^[3](https://r4ds.hadley.nz/data-transform#fn3)^, as shown by the following example, which computes the average departure delay by month:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> \n  summarise(\n    avg_delay = mean(dep_delay)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month avg_delay\n   <int>     <dbl>\n 1     1        NA\n 2     2        NA\n 3     3        NA\n 4     4        NA\n 5     5        NA\n 6     6        NA\n 7     7        NA\n 8     8        NA\n 9     9        NA\n10    10        NA\n11    11        NA\n12    12        NA\n```\n\n\n:::\n:::\n\n\nUhoh! Something has gone wrong and all of our results are `NA`s (pronounced “N-A”), R’s symbol for missing value. This happened because some of the observed flights had missing data in the delay column, and so when we calculated the mean including those values, we got an `NA` result. We’ll come back to discuss missing values in detail in [Chapter 18](https://r4ds.hadley.nz/missing-values), but for now we’ll tell the [`mean()`](https://rdrr.io/r/base/mean.html) function to ignore all missing values by setting the argument `na.rm` to `TRUE.`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> \n  summarise(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month avg_delay\n   <int>     <dbl>\n 1     1     10.0 \n 2     2     10.8 \n 3     3     13.2 \n 4     4     13.9 \n 5     5     13.0 \n 6     6     20.8 \n 7     7     21.7 \n 8     8     12.6 \n 9     9      6.72\n10    10      6.24\n11    11      5.44\n12    12     16.6 \n```\n\n\n:::\n:::\n\n\nYou can create any number of summaries in a single call to [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html). You’ll learn various useful summaries in the upcoming chapters, but one very useful summary is [`n()`](https://dplyr.tidyverse.org/reference/context.html), which returns the number of rows in each group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> \n  summarise(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month avg_delay     n\n   <int>     <dbl> <int>\n 1     1     10.0  27004\n 2     2     10.8  24951\n 3     3     13.2  28834\n 4     4     13.9  28330\n 5     5     13.0  28796\n 6     6     20.8  28243\n 7     7     21.7  29425\n 8     8     12.6  29327\n 9     9      6.72 27574\n10    10      6.24 28889\n11    11      5.44 27268\n12    12     16.6  28135\n```\n\n\n:::\n:::\n\n\nMeans and counts can get you a surprisingly long way in data science!\n\n### **3.5.3 The `slice_` functions**\n\nThere are five handy functions that allow you extract specific rows within each group:\n\n-   `df |> slice_head(n = 1)` takes the first row from each group.\n\n-   `df |> slice_tail(n = 1)` takes the last row in each group.\n\n-   `df |> slice_min(x, n = 1)` takes the row with the smallest value of column `x`.\n\n-   `df |> slice_max(x, n = 1)` takes the row with the largest value of column `x`.\n\n-   `df |> slice_sample(n = 1)` takes one random row.\n\nYou can vary `n` to select more than one row, or instead of `n =`, you can use `prop = 0.1` to select (e.g.) 10% of the rows in each group. For example, the following code finds the flights that are most delayed upon arrival at each destination:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(dest) |> \n  slice_max(arr_delay, n = 1,with_ties = FALSE) |>\n  relocate(dest) |> \n  arrange(desc(arr_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 105 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   <chr> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 95 more rows\n# ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nNote that there are 105 destinations but we get 108 rows here. What’s up? [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and [`slice_max()`](https://dplyr.tidyverse.org/reference/slice.html) keep tied values so `n = 1` means give us all rows with the highest value. If you want exactly one row per group you can set `with_ties = FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(dest) |> \n  slice_max(arr_delay, n = 1) |>\n  relocate(dest) |> \n  arrange(desc(arr_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   <chr> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 98 more rows\n# ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nThis is similar to computing the max delay with [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html), but you get the whole corresponding row (or rows if there’s a tie) instead of the single summary statistic.\n\n### **3.5.4 Grouping by multiple variables**\n\nYou can create groups using more than one variable. For example, we could make a group for each date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily <- flights |>  \n  group_by(year, month, day)\ndaily\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   year, month, day [365]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nIf you’re happy with this behavior, you can explicitly request it in order to suppress the message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_flights <- daily |> \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\ndaily_flights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day     n\n   <int> <int> <int> <int>\n 1  2013     1     1   842\n 2  2013     1     2   943\n 3  2013     1     3   914\n 4  2013     1     4   915\n 5  2013     1     5   720\n 6  2013     1     6   832\n 7  2013     1     7   933\n 8  2013     1     8   899\n 9  2013     1     9   902\n10  2013     1    10   932\n# ℹ 355 more rows\n```\n\n\n:::\n:::\n\n\nAlternatively, change the default behavior by setting a different value, e.g., \"drop\" to drop all grouping or \"keep\" to preserve the same groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_flights <- daily |> \n  summarize(\n    n = n(), \n    .groups = \"drop\"\n  )\ndaily_flights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 365 × 4\n    year month   day     n\n   <int> <int> <int> <int>\n 1  2013     1     1   842\n 2  2013     1     2   943\n 3  2013     1     3   914\n 4  2013     1     4   915\n 5  2013     1     5   720\n 6  2013     1     6   832\n 7  2013     1     7   933\n 8  2013     1     8   899\n 9  2013     1     9   902\n10  2013     1    10   932\n# ℹ 355 more rows\n```\n\n\n:::\n:::\n\n\n### **3.5.5 Ungrouping**\n\nYou might also want to remove grouping from a data frame without using [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html). You can do this with [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily |> \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nNow let’s see what happens when you summarize an ungrouped data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily |> \n  ungroup() |>\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_delay flights\n      <dbl>   <int>\n1      12.6  336776\n```\n\n\n:::\n:::\n\n\nYou get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group.\n\n### **3.5.6 `.by`**\n\ndplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the `.by` argument. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) and [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html) aren’t going away, but you can now also use the `.by` argument to group within a single operation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  ) |> \n  arrange(month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month delay     n\n   <int> <dbl> <int>\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135\n```\n\n\n:::\n:::\n\n\nOr if you want to group by multiple variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 4\n   origin dest  delay     n\n   <chr>  <chr> <dbl> <int>\n 1 EWR    IAH   11.8   3973\n 2 LGA    IAH    9.06  2951\n 3 JFK    MIA    9.34  3314\n 4 JFK    BQN    6.67   599\n 5 LGA    ATL   11.4  10263\n 6 EWR    ORD   14.6   6100\n 7 EWR    FLL   13.5   3793\n 8 LGA    IAD   16.7   1803\n 9 JFK    MCO   10.6   5464\n10 LGA    ORD   10.7   8857\n# ℹ 214 more rows\n```\n\n\n:::\n:::\n\n\n### **3.5.7 Exercises**\n\n1.  Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(carrier, dest) |> \n  summarise(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 314 × 3\n# Groups:   carrier [16]\n   carrier dest  `n()`\n   <chr>   <chr> <int>\n 1 9E      ATL      59\n 2 9E      AUS       2\n 3 9E      AVL      10\n 4 9E      BGR       1\n 5 9E      BNA     474\n 6 9E      BOS     914\n 7 9E      BTV       2\n 8 9E      BUF     833\n 9 9E      BWI     856\n10 9E      CAE       3\n# ℹ 304 more rows\n```\n\n\n:::\n:::\n\n\n2.  Find the flights that are most delayed upon departure from each destination.\n\n3.  How do delays vary over the course of the day. Illustrate your answer with a plot.\n\n4.  What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?\n\n5.  Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}