{
  "hash": "b11541e026d5d75fd2afdde07f24a7f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Rydia\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n# VAST 2024 Mini Challenge 2\n\n## Mini-Challenge 2: Creating Signatures for Geo-Temporal Patterns\n\nMini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\n\nThe details of the mini challenge can be found [here](https://vast-challenge.github.io/2024/MC2.html).\n\n## Foreword by the Author\n\nThis visualisation project is created for the fulfillment of [take home exercise 3](https://isss608-ay2023-24apr.netlify.app/take-home_ex/th_ex03) as part of the course assessment for the (Visual Analytics)[https://isss608-ay2023-24apr.netlify.app/] module taught by (Prof. T.S. Kam)[https://faculty.smu.edu.sg/profile/kam-tin-seong-486].\n\nJump straight to final product for this (Take Home Exercise 3 - Mini Challenge 2: Task 4)[https://vaa-ry.netlify.app/take-home%20exercise/take-home_ex03/take-home_ex03#task-4] here. Only Task 4 is considered as a complete set of write up. The rest of the Task 1 and 2 are still work in progress by the author at the point of submission on 9 Jun 2024.\n\n# 1.0 Data Preparation\n\nReference for Data Preparations:\n\n1.  [Kickstarter 2](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2) by Prof T.S. Kam\n\n2.  [Kickstarter 3](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter3) by Prof T.S. Kam\n\n## 1.1 Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf,\n               patchwork, CGPfunctions,\n               ggHoriPlot, plotly,ggridges,\n               ggdist, ggiraph)\n```\n:::\n\n\n## 1.2 Loading the Data\n\nLoading the .json data using `jsonlite` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\n### 1.2.1 Loading the Geographical Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_geography = st_read(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\") %>%\n  st_transform(crs = 4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\rydialiang\\ISSS608\\Take-home Exercise\\Take-home_Ex03\\data\\MC2\\Oceanus Information\\Oceanus Geography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(oceanus_geography)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 29\nColumns: 8\n$ Name                 <chr> \"Suna Island\", \"Thalassa Retreat\", \"Makara Shoal\"…\n$ Description          <chr> \"Large island of Oceanus\", \"Smaller island of Oce…\n$ X.note               <chr> \"Suna is 'sand' or 'gritty' in Japanese\", \"Thalas…\n$ type                 <chr> \"Entity.Location.Region\", \"Entity.Location.Region…\n$ X.Kind               <chr> \"Island\", \"Island\", \"Island\", \"Island\", \"Fishing …\n$ Activities           <list> \"Residential\", \"Residential\", \"Recreation\", <\"To…\n$ fish_species_present <list> <>, <>, <>, <>, <\"Cod/Gadus n.specificatae\", \"Bi…\n$ geometry             <GEOMETRY [°]> MULTIPOLYGON (((-166.0111 3..., MULTIPOL…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(oceanus_geography, \n  \"data/rds/oceanus_geography.rds\")\n```\n:::\n\n\n**Importing Geographical Data in ESRI shapefile format**\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations <- st_read(dsn = \"data/MC2/shp\",\n  layer = \"Oceanus Geography\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\rydialiang\\ISSS608\\Take-home Exercise\\Take-home_Ex03\\data\\MC2\\shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(oceanus_locations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 27\nColumns: 8\n$ Name       <chr> \"Haacklee\", \"Port Grove\", \"Lomark\", \"Himark\", \"Paackland\", …\n$ Descriptio <chr> NA, NA, NA, NA, NA, \"Adimistrative seat of Oceanus\", NA, NA…\n$ X.note     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Activities <chr> \"Tourism,Local shipping\", \"Tourism,Research\", \"Deep sea fis…\n$ type       <chr> \"Entity.Location.City\", \"Entity.Location.City\", \"Entity.Loc…\n$ X.Kind     <chr> \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"bu…\n$ fish_speci <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   <POINT [°]> POINT (-165.6908 39.03215), POINT (-165.8855 39.10005…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = oceanus_locations) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(oceanus_locations, \n  \"data/rds/oceanus_locations.rds\")\n```\n:::\n\n\n### 1.2.2 Wrangling of Geographical Data\n\nIn the code chunk below, st_coordinate() of sf package is used to extract coordinates from oceanus_locations sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(oceanus_locations)\n```\n:::\n\n\nNext, code chunk below is used to drop the geometry column of oceanus_locations of sf data.frame by using st_drop_geometry() of sf package and save the output into a new data.frame called oceanus_locations_df.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations_df <- oceanus_locations %>%\n  st_drop_geometry()\n```\n:::\n\n\nThen, the code chunk below is to append the x- and y-coodinate values from coords list into the XCOORD and YCOORD columns of oceanus_locations_df respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations_df$XCOORD <- coords[, \"X\"]\noceanus_locations_df$YCOORD <- coords[, \"Y\"]\n```\n:::\n\n\nLastly, the code chunk below is used to tidy OceanusLocations_df by selecting the necessary columns only and at the same time, rename X.Kind to Loc_Type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations_df <- oceanus_locations_df %>%\n  select(Name, X.Kind, XCOORD, YCOORD) %>%\n  rename(loc_type = X.Kind, loc_short = Name)\n```\n:::\n\n\n## 1.3 **Wrangling and tidying edges**\n\n### 1.3.1 Extracting edges\n\nFirst, we extract only distinct edges from the tibble *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_data$links %>% \n  distinct()\n```\n:::\n\n\nNext, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <chr> \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nFrom the table above, we can identify some issues with the data:\n\n1.  The columns with date data type are all in character format.\n\n2.  Some columns have names that starts with \"\\_\". These need to be rename to avoid coding issues.\n\n### 1.3.2 Correcting the date data type with `lubridate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` <- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` <- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date <- as_datetime(mc2_edges$date)\n```\n:::\n\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### 1.3.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.3.4 Splitting words in `type` column\n\nThe code chunk below combined the following steps:\n\n1.  Splitting the words by \".\" - after observing that the format for type is as such: \"Event.TransportEvent.TransponderPing\"\n\n2.  The `max(lengths(word_list))` will be used to find the maximum number of elements in any split.\n\n3.  Apply function(x) to pad shorter splits with NA values to make them all the same length.\n\n4.  Create word_df and changing column names to event1 etc.\n\n5.  Convert word_df from matrix into tibble data.frame, and checks its class.\n\n6.  Append word_df to mc2_edges tibble data.frame.\n\n7.  Saving mc2_edges into R **rds** format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\n## 1.4 **Wrangling and tidying nodes**\n\n### 1.4.1 Extracting nodes\n\nThe code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n```\n:::\n\n\nNext, take a `glimpse()` to understand the data structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <chr> \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  <chr> \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for `type` column issues we discussed earlier, two additional data issues can be observed. They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n\n-   Some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.\n\n### 1.4.2 Correcting the date data type with `lubridate()`\n\nCorrect the date data type and take a `glimpse()` to confirm changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes$`_last_edited_date` <- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` <- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date <- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <dttm> 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  <dttm> 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\n### 1.4.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.4.4 Splitting words in `type` column\n\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R **rds** format yet, as there are more works to be done to clean up the dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"entity\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(entity2, entity3,entity4)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  cbind(word_df)\n```\n:::\n\n\n### 1.4.5 Tidying text field\n\nUsing `mutate()` of dplyr and `gsub()` of Base R to tidy up the values in the cell. Essentially, the unwanted characters like `c`, `(`, `)`, and `\\` are removed by substituting with empty value `\"\"` for both Activities and fish_species_present columns. What is left in the columns will be characters separated by `,`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\nmc2_nodes$entity3[5342] = \"Ferry_Cargo\"\nmc2_nodes$entity3[5461] = \"Ferry_Cargo\"\nmc2_nodes$entity3[5332] = \"Ferry_Passenger\"\nmc2_nodes$entity3[5452] = \"Ferry_Passenger\"\nmc2_nodes$entity3[5484] = \"Ferry_Passenger\"\n```\n:::\n\n\nLastly, we will save the tidied mc2_nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\n```\n:::\n\n\n## 1.5 Processing nodes and edges data\n\n### 1.5.1 Understanding the nodes and edges data\n\nIn this section, we will gain more insights from the existing data. The table below summarises the type of data we can glean from the nodes and edges:\n\n+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+\n| mc2_nodes Type | Entity              | Details                                         | Relevant Fields                                    |\n+================+=====================+=================================================+====================================================+\n| Commodity      | Fish                | **10 x Fish Species**                           | 1.  name (fish species common name/scientific name |\n|                |                     |                                                 | 2.  id (species)                                   |\n|                |                     | ![](images/clipboard-629994936.png)             |                                                    |\n+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+\n| Location       | 1.  City            | **24 x Locations:**                             | 1.  id ( City Name)                                |\n|                | 2.  Point           |                                                 | 2.  Name (City short name)                         |\n|                | 3.  Region          | **6 x City**                                    | 3.  description                                    |\n|                |                     |                                                 | 4.  activities                                     |\n|                |                     | ![](images/clipboard-3282014997.png)            | 5.  kind                                           |\n|                |                     |                                                 | 6.  entity3 (type of location)                     |\n|                |                     | **12 x Point**                                  |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | ![](images/clipboard-802842425.png){width=\"94\"} |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | **6 x Region**                                  |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | -   3 x Ecological Preserves                    |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | -   3 x Fishing Ground                          |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | ![](images/clipboard-3654858944.png)            |                                                    |\n+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+\n| Document       | Delivery Report     | **5,307 x Cargoes**                             | 1.  id                                             |\n|                |                     |                                                 | 2.  qty_tons                                       |\n|                |                     |                                                 | 3.  date                                           |\n+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+\n| Vessels        | 1.  Fishing Vessels | **296 x Vessels**                               | 1.  id                                             |\n|                | 2.  Cargo Vessels   |                                                 | 2.  Name                                           |\n|                | 3.  Ferry Cargo     | -   178 x Fishing Vessels                       | 3.  flag_country                                   |\n|                | 4.  Ferry Passenger |                                                 | 4.  company                                        |\n|                | 5.  Research        | -   100 x Cargo Vessels                         | 5.  tonnage                                        |\n|                | 6.  Tour            |                                                 | 6.  length_overall                                 |\n|                | 7.  Others          | -   2 x Cargo Ferry                             | 7.  entity3 (type of vessels)                      |\n|                |                     |                                                 |                                                    |\n|                |                     | -   3 x Passenger Ferry                         |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | -   2 x Research Vessels                        |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | -   6 x Tour Vessels                            |                                                    |\n|                |                     |                                                 |                                                    |\n|                |                     | -   5 x Other Vessels                           |                                                    |\n+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+\n\n+------------------+---------------------------------------------------------------------------+----------------------------------+\n| mc2_edges type   | Count (n)                                                                 | Relevant Fields                  |\n+==================+===========================================================================+==================================+\n| Transponder Ping | 258,542 x Pings                                                           | 1.  time                         |\n|                  |                                                                           | 2.  dwell                        |\n|                  |                                                                           | 3.  source (locations)           |\n|                  |                                                                           | 4.  target (vessels)             |\n+------------------+---------------------------------------------------------------------------+----------------------------------+\n| Harbor Report    |  2,487 x Sightings                                                        | 1.  source (vessels)             |\n|                  |                                                                           | 2.  target (city)                |\n|                  |                                                                           | 3.  date                         |\n+------------------+---------------------------------------------------------------------------+----------------------------------+\n| Import Record    | 10,614 x Records (matching 5,307 unique cargoes to fish species and city) | 1.  source (cargo)               |\n|                  |                                                                           | 2.  target (fish species & city) |\n|                  |                                                                           | 3.  date                         |\n+------------------+---------------------------------------------------------------------------+----------------------------------+\n\n### 1.5.2 Extracting Relevant Information for each nodes data\n\nIn this section, we will extract the relevant columns with intuitive names. From the analysis above, we will have 4 nodes data and 3 edges data as below:\n\n::: callout-note\n### Nodes and Edges Data\n\n**Nodes:**\n\n1.  fish_nodes: all types of fish species in the data set\n2.  location_nodes: all locations in the data set\n3.  cargo_nodes: all cargoes in the data set\n4.  vessel_nodes: all vessels in the data set\n\n**Edges:**\n\n1.  vessel_movement: vessel movement, location, time and dwell\n2.  harbor_report: date and vessel that dock in the harbor (city)\n3.  import_record: date and location of transaction of cargoes\n:::\n\n**fish_nodes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_nodes <- mc2_nodes %>% \n  filter(entity2 == \"Commodity\") %>% \n  select(name, id) %>% \n  mutate(name = str_replace(name, \"/.*\", \"\")) %>% \n  rename(fish = name, species = id)\n```\n:::\n\n\n**location_nodes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocation_nodes <- mc2_nodes %>% \n  filter(entity2 == \"Location\" ) %>% \n  select(id, Name, Description, Activities, kind, entity3) %>% \n  rename(loc = id, loc_short = Name, type = entity3)\n```\n:::\n\n\n**cargo_nodes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_nodes <- mc2_nodes %>% \n  filter(entity3 == \"DeliveryReport\") %>% \n  select(id,qty_tons,date) %>% \n  rename(cargo = id, cargo_delivery_date = date)\n```\n:::\n\n\n**vessel_nodes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_nodes <- mc2_nodes %>% \n  filter(entity2 == \"Vessel\") %>% \n  select(id, Name, flag_country, \n         company, tonnage, \n         length_overall, entity3) %>% \n  rename(vessel = id, vessel_name = Name, type = entity3)\n```\n:::\n\n\n### 1.5.3 Consolidating relevant information in the edges data\n\n**vessel_movement**\n\nWe will add in oceanus_location and vessel_nodes data together with the Transponder Ping data, by using left_join .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement <- mc2_edges %>% \n  filter(event3 == \"TransponderPing\") %>% \n  select(time, dwell, source, target) %>% \n  rename(loc= source, vessel = target )\n\nvessel_movement$loc_short <- vessel_movement$loc\n\nvessel_movement <- vessel_movement %>%   \n  mutate(loc_short = gsub(\"^City of\", \"\",loc_short)) %>%\n  mutate(loc_short = gsub(\"^\\\\s+\", \"\",loc_short)) %>% \n  left_join(oceanus_locations_df) %>% \n  left_join(vessel_nodes)\n```\n:::\n\n\n**harbor_report**\n\nSimilarly, we will add in vessel_nodes data into the harbor_report using left_join.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_report <- mc2_edges %>% \n  filter(event2 ==\"HarborReport\") %>% \n  select(source, target, date) %>% \n  rename(vessel = source, city = target)\n\nharbor_report <- harbor_report %>% \n  left_join(vessel_nodes, by = \"vessel\")\n```\n:::\n\n\n**import_record**\n\nCombining fish_nodes and cargo_nodes data into import_record using left_join.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_record <- mc2_edges %>% \n  filter(event2 == \"Transaction\") %>% \n  select(source, target, date)\n\n\nimport_city <- import_record %>% \n  select(source,target) %>% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %>% \n  rename(city = target)\n\nimport_cargo <- import_record %>% \n  select(source,target) %>% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %>% \n  rename(species = target)\n\nimport_record <- import_city %>% \n  left_join(import_cargo) %>% \n  rename(cargo = source) %>% \n  left_join(fish_nodes) %>% \n  left_join(cargo_nodes) %>% \n  select(fish, species, city, cargo, qty_tons, cargo_delivery_date)\n```\n:::\n\n\nBefore we move on to exploring the data, we will save the 4 nodes and 3 edges as R **rds** format in the data/rds folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(fish_nodes, \"data/rds/fish_nodes.rds\")\nwrite_rds(location_nodes, \"data/rds/location_nodes.rds\")\nwrite_rds(cargo_nodes, \"data/rds/cargo_nodes.rds\")\nwrite_rds(vessel_nodes, \"data/rds/vessel_nodes.rds\")\nwrite_rds(vessel_movement, \"data/rds/vessel_movement.rds\")\nwrite_rds(harbor_report, \"data/rds/harbor_report.rds\")\nwrite_rds(import_record, \"data/rds/import_record.rds\")\n```\n:::\n\n\n## 1.6 Exploratory Data Analysis\n\n### 1.6.1 Understanding the Fish Species in each Region\n\nBefore we can detect anomalies in the for fishing activities, we first need to understand where are the fish species found in each Region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_fish_species <- mc2_nodes %>% \n  filter(entity3 == \"Region\") %>% \n  select(Name, fish_species_present, Activities, kind) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"species\", 1:max_elements) \n\nword_df <- as_tibble(word_df) %>% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %>% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %>% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %>% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %>% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %>%\n  mutate_at(vars(species1:species5), trimws)\n\nregion_fish_species <- region_fish_species %>%\n  cbind(word_df)\n\n# Convert data to long format\nregion_fish_species_long <- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long <- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %>% \n  na.omit() %>%\n  mutate_at(vars(Presence), trimws)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order <- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence in each Region\",\n       x = \"Region\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-38-1.png){width=960}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n[**Ecological Preserves**]{.underline}\n\nWe can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species (Sockfish, Offidiaa, and Helenaa) would have fished illegally. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\n-   Sockfish: Only found in Don Limpet Preserve\n\n-   Offidiaa: Only found in Ghoti Preserve\n\n-   Helenaa: Only found in Ecological Preserves (all three)\n\n[**Fishing Grounds**]{.underline}\n\n-   Cod: Only found in Cod Table\n\n-   Harland: Only found in Tuna Shelf\n\n**Other notable point**\n\n-   Salmon: Not found in any of the 6 locations mentioned above. This might be imports from other countries or from international shipping.\n:::\n\n### 1.6.2 Understanding the qty_tons of each Fish Species by City\n\nAfter identifying the three fish species (Sockfish, Offidiaa, and Helenaa) that are only found in the Ecological Preserves, we will have an overview of how each of the fish species are spread across the city.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate the qty_tons by fish and city\nqty_tons_agg <- import_record %>%\n  group_by(fish, city) %>%\n  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %>%\n  ungroup()\n\n# Add distinct colors to flag out Sockfish, Offidiaa, and Helenaa\ncolor <- c(\"Wrasse\" = \"#000099\",\n           \"Tuna\" = \"#0000CC\",\n           \"Harland\" = \"#0000FF\",\n           \"Cod\" = \"#3333FF\",\n           \"Birdseye\" = \"#6666FF\",\n           \"Beauvoir\" = \"#9999FF\",\n           \"Salmon\" = \"#CCCCFF\",\n           \"Helenaa\" = \"#FF99FF\",\n           \"Offidiaa\" = \"#FF00FF\",\n           \"Sockfish\" = \"#990099\")\n\n# Reorder to match the above \nqty_tons_agg$fish <- factor(qty_tons_agg$fish,\n                            levels = c(\"Wrasse\",\"Tuna\",\n                                       \"Harland\",\"Cod\",\n                                       \"Birdseye\", \"Beauvoir\",\n                                       \"Salmon\",\"Helenaa\",\n                                       \"Offidiaa\",\"Sockfish\"))\n\n# Reorder city in descending order based on total_qty_tons\nqty_tons_agg$city <- factor(qty_tons_agg$city,\n                            levels = c(\"City of Paackland\",\n                                       \"City of Himark\",\n                                       \"City of Lomark\",\n                                       \"City of South Paackland\",\n                                       \"City of Haacklee\"))\n\n# Bar plot\nggplot(qty_tons_agg, aes(x = city, \n                         y = total_qty_tons, \n                         fill = fish)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = color) +\n  labs(title = \"Quantity Tons of Fish by City and Fish Species\",\n       x = \"City\",\n       y = \"Total Quantity (tons)\",\n       fill = \"Fish Species\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### 1.6.3 Understanding the number of cargoes of each Fish Species by City\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate the qty_tons by fish and city\ncargo_n_agg <- import_record %>%\n  group_by(fish, city) %>%\n  summarize(total_cargo = n()) %>%\n  ungroup()\n\n# Add distinct colors to flag out Sockfish, Offidiaa, and Helenaa\ncolor <- c(\"Wrasse\" = \"#000099\",\n           \"Tuna\" = \"#0000CC\",\n           \"Harland\" = \"#0000FF\",\n           \"Cod\" = \"#3333FF\",\n           \"Birdseye\" = \"#6666FF\",\n           \"Beauvoir\" = \"#9999FF\",\n           \"Salmon\" = \"#CCCCFF\",\n           \"Helenaa\" = \"#FF99FF\",\n           \"Offidiaa\" = \"#FF00FF\",\n           \"Sockfish\" = \"#990099\")\n\n# Reorder to match the above \ncargo_n_agg$fish <- factor(cargo_n_agg$fish,\n                            levels = c(\"Wrasse\",\"Tuna\",\n                                       \"Harland\",\"Cod\",\n                                       \"Birdseye\", \"Beauvoir\",\n                                       \"Salmon\",\"Helenaa\",\n                                       \"Offidiaa\",\"Sockfish\"))\n\n# Reorder city in descending order based on total_qty_tons\ncargo_n_agg$city <- factor(cargo_n_agg$city,\n                            levels = c(\"City of Paackland\",\n                                       \"City of Himark\",\n                                       \"City of Lomark\",\n                                       \"City of South Paackland\",\n                                       \"City of Haacklee\"))\n\n# Bar plot\nggplot(cargo_n_agg, aes(x = city, \n                         y = total_cargo, \n                         fill = fish)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = color) +\n  labs(title = \"Number of Cargoes by City and Fish Species\",\n       x = \"City\",\n       y = \"No. of Cargoes\",\n       fill = \"Fish Species\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   Both qty_tons and number of cargoes bar plots shows similar distribution of fish species within each city.\n\n-   The City of Paackland processed the highest qty_tons and number of cargoes, follow by City of Himark, City of Lomark, City of South Paackalnd, and City of Hacklee.\n:::\n\n### 1.6.4 Understanding the Activities by Locations\n\nUnderstanding the activities in each of the locations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(location_nodes$Activities, \"\\\\,\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"activity\", 1:max_elements) \n\nword_df <- as_tibble(word_df) \n\nlocation_nodes1 <- location_nodes %>%\n  cbind(word_df)\n\n# Convert data to long format\nlocation_nodes_long <- pivot_longer(location_nodes1, cols = starts_with(\"activity\"), names_to = \"activity\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nlocation_nodes_long <- location_nodes_long[location_nodes_long$Presence != \"\", ] %>% \n  mutate_at(vars(Presence), trimws) %>% \n  filter(if_all(c(loc), ~ !is.na(.)))\n\nlocation_nodes_long$Presence[8] = \"Tourism\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order the locations\ndesired_order <- c(\"City of Himark\",\n                   \"City of Lomark\",\n                   \"City of Haacklee\",\n                   \"City of Paackland\",\n                   \"City of South Paackland\",\n                   \"City of Port Grove\",\n                   \"Ghoti Preserve\", \n                   \"Nemo Reef\", \n                   \"Don Limpet Preserve\",\n                   \"Cod Table\", \n                   \"Wrasse Beds\",\n                   \"Tuna Shelf\",\n                   \"Exit North\",\n                   \"Exit South\",\n                   \"Exit East\",\n                   \"Exit West\",\n                   \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                   \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\")  \n\nlocation_nodes_long$loc <- factor(location_nodes_long$loc, levels = desired_order)\n\nggplot(location_nodes_long, aes(x = loc, \n                                y = Presence,\n                                colour = Presence)) +\n  geom_point() +\n  labs(title = \"Activities in each Location\",\n       x = \"Location\",\n       y = \"Activity\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-42-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate the transponder ping by location\nlocation_ping_agg <- vessel_movement %>%\n  group_by(loc, type) %>%\n  summarize(total_ping = n()) %>%\n  ungroup()\n\n\n# Reorder to match the above \nlocation_ping_agg$loc <- factor(location_ping_agg$loc,\n                           levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))  \n\n# Bar plot\nggplot(location_ping_agg, aes(x = loc, \n                              y = total_ping, \n                              fill = type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Number of Transponder Ping by Locations\",\n       x = \"Locations\",\n       y = \"No. of Transponder Ping\",\n       fill = \"Locations\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   There is abnormally high number of pings for fishing vessels at Nemo Reef. Since Nemo Reef is a Ecological Preserve, the correct safe navigation around it is through Nav D.\n\n-   Given that the fish species (Wrasse, Tuna, Birdseye, Beauvoir) in Nemo Reef, can also be found in other fishing grounds, there is likelihood of IUU here. The presence of Helenaa is the only tell-tale sign if a fishing vessel indeed fish in Nemo Reef.\n\n-   There is abornormally high number of pings for fishing vessels at Exit East. Since the activities in Exit E are international shipping and Deep Sea Fishing, it is not a designated Fishing Ground within Oceanus. Thus, we should be only expecting cargo vessels through Exit E, as observed in other exits.\n:::\n\n### 1.6.5 Understanding the Harbor Report by Locations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate the harbor report by location\nharbor_report_agg <- harbor_report %>%\n  group_by(city, type) %>%\n  summarize(total_report = n()) %>%\n  ungroup()\n\n\n# Reorder to match the above \nharbor_report_agg$city<- factor(harbor_report_agg$city,\n                           levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\"))\n                                        \n\n# Bar plot\nggplot(harbor_report_agg, aes(x = city, \n                              y = total_report, \n                              fill = type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Number of Report by City\",\n       x = \"City\",\n       y = \"No. of Reports\",\n       fill = \"City\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   There is only Research and Tour vessels visiting City of Port Grove.\n\n-   The other five cities have mostly fishing or cargo vessels visits.\n:::\n\n### 1.6.6 Understanding the Cargoes\n\n**Cargoes by Quantity in Ton**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate Vlines\nmean_qty_tons <- mean(cargo_nodes$qty_tons, na.rm = TRUE)\nmedian_qty_tons <- median(cargo_nodes$qty_tons, na.rm = TRUE)\n\n# Create a new column to indicate if the value is negative\ncargo_nodes <- cargo_nodes %>%\n  mutate(is_negative = ifelse(qty_tons > 0, \"Positive\", \"Negative\"))\n\n# Plot Histogram\np1 <- ggplot(cargo_nodes, aes(x = qty_tons, fill = is_negative)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  geom_vline(aes(xintercept = mean_qty_tons), \n             color = \"purple\", \n             linetype = \"dashed\", \n             size = 1) +\n  geom_vline(aes(xintercept = median_qty_tons), \n             color = \"blue\", \n             linetype = \"dashed\", size = 1) +\n  scale_fill_manual(values = c(\"Negative\" = \"red\", \n                               \"Positive\" = \"skyblue\"), \n                    name = \"Value Type\") +\n  labs(title = \"Cargo Quantity in Tons with Mean and Median\",\n       x = \"Quantity of Tons\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  annotate(\"text\", \n           x = mean_qty_tons, \n           y = Inf, \n           label = paste(\"Mean =\", round(mean_qty_tons, 2)), \n           vjust = 1, hjust = -0.2, \n           color = \"purple\") +\n  annotate(\"text\", \n           x = median_qty_tons, \n           y = Inf, \n           label = paste(\"Median =\", round(median_qty_tons, 2)), \n           vjust = 1, hjust = 1.3, color = \"blue\") \n\np2 <- ggplot(cargo_nodes, aes(y = qty_tons)) +\n  geom_boxplot(fill = \"skyblue\", \n               color = \"black\", \n               alpha = 0.7,\n               width = 0.2,\n               outlier.colour = \"darkgreen\") +\n  stat_dots(data = subset(cargo_nodes, \n                          qty_tons > 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"blue\") +\n  stat_dots(data = subset(cargo_nodes, \n                          qty_tons <= 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"red\") +\n  geom_hline(yintercept = 0,\n             color = 'red', \n             linetype = 'dashed') +\n  geom_text(aes(x = 0.3,\n                y = -5,\n                label = \"Suspicious \\nCargoes\"),\n            color = \"red\",\n            size = 3,\n            vjust = 1.7,\n            hjust = 0.7) +\n  geom_hline(yintercept = 60,\n             color = 'darkgreen', \n             linetype = 'dashed') +\n  geom_text(aes(x = 0.3,\n                y = 60,\n                label = \"Outliers to be \\n  Investigated\"),\n            color = \"darkgreen\",\n            size = 3,\n            vjust = 1.7,\n            hjust = -0.3) +\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank()) +\n  coord_flip() +\n  ggtitle(label = \"Cargo qty_tons Distribution\")\n\np3 <- ggplot(import_record, \n       aes(x = city, \n           y = qty_tons)) + \n  geom_boxplot(fill = \"skyblue\",\n               width = 0.2,\n               outlier.color = \"darkgreen\") +\n  stat_dots(data = subset(import_record, \n                          qty_tons > 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"blue\") +\n  stat_dots(data = subset(import_record, \n                          qty_tons <= 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"red\") +\n  geom_hline(yintercept = 0,\n             color = 'red', \n             linetype = 'dashed') +\n  geom_text(aes(x = \"City of Haacklee\",\n                y = -5,\n                label = \"Suspicious \\nCargoes\"),\n            color = \"red\",\n            size = 3,\n            vjust = 1.7,\n            hjust = 0.7) +\n  geom_hline(yintercept = 60,\n             color = 'darkgreen', \n             linetype = 'dashed') +\n  geom_text(aes(x = \"City of Haacklee\",\n                y = 60,\n                label = \"Outliers to be \\n  Investigated\"),\n            color = \"darkgreen\",\n            size = 3,\n            vjust = 1.7,\n            hjust = -0.3) +\n  coord_flip() +\n  ggtitle(label = \"Cargo qty_tons by City\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1/p2/p3\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-46-1.png){width=1152}\n:::\n:::\n\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   There are cargoes which has negative values. This is abnormal as all cargoes qty_tons values should be at least zero.\n\n-   There are a number of outliers cargoes with qty_tons above \\~70 tons.\n:::\n\n**Cargoes Quantity Ton by Date and City**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate import record data\nimport_record_agg <- import_record %>%\n  mutate(year = year(cargo_delivery_date),\n         month = factor(month(cargo_delivery_date, label = TRUE), levels = month.abb), # Ensure month is a factor\n         day = day(cargo_delivery_date),\n         week = week(cargo_delivery_date),\n         weekday = wday(cargo_delivery_date, label = TRUE, week_start = 1)) %>% \n  group_by(city, year, month) %>%  # Group by city, year, and month\n  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %>% \n  arrange(city, year, month)\n\n# Create heatmap\nggplot(import_record_agg, \n       aes(x = month, \n           y = city, \n           fill = total_qty_tons)) + \n  geom_tile(color = \"white\", \n            size = 0.1) +  \n  coord_equal() +\n  scale_fill_gradient(name = \"Cargo Quantity Ton by Month\",\n                      low = \"sky blue\", \n                      high = \"dark blue\") +\n  labs(x = NULL, \n       y = NULL, \n       title = \"Cargo Quantity Ton by Month\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   Higher qty_tons of cargoes enters the various cities from Aug to Nov period.\n\n-   Qty_tons peak in Oct and Nov period, expecially for City of Paackland.\n:::\n\n\n\n\n### 1.6.7 Understanding the Vessels\n\n**Types of vessels**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vessel count and reorder bar plot\nvessel_count <- vessel_nodes %>%\n  group_by(type) %>%\n  summarize(n = n()) %>% \n  mutate(type = reorder(type, -n))\n\n# Bar plot\nggplot(vessel_count,\n       aes(x = type,\n           y = n)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = n), vjust = -0.5, size = 3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n**Length by Tonnage**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot\nggplot(vessel_nodes) +\n  geom_point(aes(x = length_overall,\n                 y = tonnage,\n                 color = type)) +\n  ggtitle(label = \"Length by Tonnage\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   Cargo vessels have wide range of length and tonnage. Only a few data points ( \\<20), falls within similar range of the fishing vessels.\n\n-   The fishing vessels tonnage mostly are \\<12,000 ton and length_overall of \\<150m. Only three fishing vessels are above these range.\n:::\n\n**Tonnage Distribution**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Raincloud Plot for Tonnage Distribution of Fishing and Cargo Vessels\np1 <- vessel_nodes %>% \n  filter(type %in% c(\"FishingVessel\")) %>%\n  ggplot(aes(x = tonnage, \n             y = type)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 100,\n            dotsize = 1) +\n  ggtitle(\"Tonnage Distribution by of Fishing Vessels\") +\n  theme(plot.title = element_text(size=12)) +\n  theme_minimal()\n\np2 <- vessel_nodes %>% \n  filter(type %in% c(\"CargoVessel\")) %>%\n  ggplot(aes(x = tonnage, \n             y = type)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 500,\n            dotsize = 0.1) +\n  ggtitle(\"Tonnage Distribution by of Cargo Vessels\") +\n  theme(plot.title = element_text(size=12)) +\n  theme_minimal()\n\np1/p2\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-50-1.png){width=960}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   Fishing vessels tonnage distribution is right skewed. There is high concentration of fishing vessels of \\< 1,000 ton.\n\n-   Cargo vessels tonnage falls largely into two distinct groups: (1) \\~2000 ton, and (2) \\~75,000 ton.\n:::\n\n**Vessel Type and Flag Country**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bar plot\nggplot(vessel_nodes) +\n  geom_bar(aes(x = flag_country,\n               fill = type)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-51-1.png){width=1440}\n:::\n:::\n\n\n**Vessels from Oceanus** We now take a more detailed look at Oceanus vessel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Oceanus vessel count and reorder bar plot\nvessel_count <- vessel_nodes %>%\n  filter(flag_country == \"Oceanus\") %>% \n  group_by(type) %>%\n  summarize(n = n()) %>% \n  mutate(type = reorder(type, -n))\n\n# Bar plot\nggplot(vessel_count,\n       aes(x = type,\n           y = n,\n           fill = type)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = n), vjust = -0.5, size = 3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n**Vessels from other flag_country**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bar plot for flag countries other than Oceanus\nvessel_nodes %>% \n  filter(flag_country != \"Oceanus\") %>% \n  ggplot() +\n  geom_bar(aes(x = flag_country,\n               fill = type)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-53-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bar plot for flag countries other than Oceanus\nvessel_nodes %>% \n  filter(flag_country != \"Oceanus\") %>% \n  ggplot() +\n  geom_bar(aes(x = flag_country,\n               fill = type)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  facet_grid(~type)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-54-1.png){width=1440}\n:::\n:::\n\n\n::: callout-note\n### Insights from these vessels visualisation\n\n-   Most fishing vessels (158 of 178) are registered under flag country of Oceanus.\n\n-   Other countries vessels are only cargo vessels (99) and fishing vessels (20).\n\n-   Other countries own between 0 to 5 cargo vessels and 0 to 2 fishing vessels.\n:::\n\n**Vessels by Company**\n\nUpon inspecting the vessel_nodes data, we observe that non-Oceanus fishing vessels has registered company information, while non-Oceanus cargo vessels do not have registered company information. To confirm this is true, we remove those company that are \"NA\" in the bar plot.\n\n![](images/clipboard-651628543.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking the hypothesis that non-Oceanus cargo vessels are not registered as company in the data\nvessel_nodes %>% \n  na.omit(company) %>% \n  filter(flag_country != \"Oceanus\") %>% \n  ggplot(aes(x = company, fill = type)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  facet_grid(~type)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   Only one cargo vessel is registered with company. This belongs to the \"Saltwater Sisters Company Marine\". Using the data table created above, we found out that this cargo vessel is registered under the flag_country of Oceantterra. This company also owns a fishing vessel (bassbaiterb9f) with flag_country as Oceanus.\n\n-   All 20 non-Oceanus fishing vessels are all registered with company in the data.\n:::\n\n### 1.6.8 Understanding the vessel movements\n\n**Understand Average Dwell by Location**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement$loc <- factor(vessel_movement$loc,\n                              levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\nggplot(vessel_movement, aes(x = loc, \n                            y = dwell,\n                            fill = loc_type)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  scale_y_continuous(limits = c(0, 300000)) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n- For the cities, the outliers can be explained by the extend stay due to repair and replenishment purposes. \n\n-   For all three ecological preserves, there are many outliers, and this is a tell-tale sign of extended stay in the preserves by fishing vessels for IUU fishing. \n\n-   For the fishing grounds, the extended stay of fishing vessels may be explained by conducting of transshipment between small fishing vessels and bigger reefer/cargo ships, where the small fishing vessels stay at the location for fishing. There are fishing vessels that are out in the sea for months.\n\n-   For the navigation points, Exit E display signs of abnormality due to its high number of outliers compared to other navigation points that are used for international shipping (Exit North, Exit South and Exit West). Nav 1 and Nav A may also be investigated since there are high numbers of outliers, and also, they are at the fringe of the Ghoti and Don Limpet Preserves respectively. \n\n:::\n\n\n## 2.0 Task 1: Flow of Commercially Caught Fish\n\nIn this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:\n\n1.  Associating the vessels with their probable cargoes\n2.  Which vessels deliver which products and when?\n3.  Examine the seasonal trends and anomalies in the port exit records\n\n## 2.1 Associating the vessels with their probable cargoes\n\n**Matching the vessel with the import_record**\n\nWe will use the vessel_nodes that contains information on the movement of fishing vessels and cargoes, and define the vessels location, start time and end time of the vessels in the particular location using transponder ping.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfishing_and_cargo_vessel_list <- vessel_nodes %>% \n  filter(type %in% c(\"FishingVessel\", \"CargoVessel\")) %>% \n  select(vessel)\n\nfishing_and_cargo_vessel_list <- as.list(fishing_and_cargo_vessel_list)\n\nvessel_location <- vessel_movement %>% \n  filter(vessel %in% unlist(fishing_and_cargo_vessel_list)) %>% \n  arrange(vessel,time) %>% \n  mutate(next_time = ifelse(lead(vessel) == vessel, lead(time), NA)) %>% \n  mutate(next_time = as_datetime(next_time))   %>% \n  mutate(end_time = time + dwell)\n\nvessel_location_city <- vessel_location %>% \n  filter(loc_short %in% c(\"Haacklee\",\n                       \"Lomark\",\n                       \"Himark\",\n                       \"Paackland\",\n                       \"South Paackland\",\n                       \"Port Grove\"))\n```\n:::\n\n\n**Vessel Location based on harbor report**\n\nThe next step we do is to extract the date, location and vessel from the harbor report. Since this is describe as canonical, it should be considered for matching first before using the vessel location data from transponder ping. Columns are renamed to match the information in the cargo_list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_mvmt_hr <- harbor_report %>% \n  select(vessel, city, date) %>% \n  rename(vessel_delivery_date = date)\n```\n:::\n\n\n**Merging import_record and vessel_mvmt_hr**\n\nAdding one column on vessel delivery date, which is 1 day before the date stated in the harbor import record.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_list <- import_record %>% \n  mutate(vessel_delivery_date = cargo_delivery_date + days(-1))\n```\n:::\n\n\nSaving cargo_list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(cargo_list, \"data/rds/cargo_list.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_location_match_hr <- cargo_list %>% \n  left_join(vessel_mvmt_hr ) %>%\n  filter(if_all(c(qty_tons,vessel), ~ !is.na(.))) %>% \n  distinct()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vessel_location_match_hr, \"data/rds/vessel_location_match_hr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhr_match <- mc2_nodes %>% \n  select(id,Name,flag_country, company, tonnage,entity3) %>% \n  rename(vessel = id) %>% \n  left_join(vessel_location_match_hr) %>%   \n  filter(if_all(c(qty_tons, tonnage), ~ !is.na(.))) %>% \n  distinct() %>% \n  filter()\n```\n:::\n\n\n**Merging cargo_list and vessel_location_city**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_location_city <- vessel_location_city %>% \n  mutate(date = substr(`time`,1,10)) %>% \n  mutate(vessel_delivery_date = ymd(date))  %>% \n  filter(dwell > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_location_match <- vessel_location_city %>% \n  left_join(cargo_list, \n            unmatched = \"drop\") %>%\n  filter(if_all(c(qty_tons), ~ !is.na(.))) %>% \n  distinct()\n```\n:::\n\n\n**Vessel Match Graph**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid1 <- vessel_location_match_hr  %>% \n  select(vessel) %>% \n  rename(id = vessel) \n\nid2 <- vessel_location_match_hr  %>% \n  select(cargo) %>% \n  rename(id = cargo)\n\ncargo_vessel_nodes <- rbind(id1,id2) %>% \n  distinct() \n\ncargo_vessel_edges <- vessel_location_match_hr %>% \n  select(vessel,cargo, fish, city) %>% \n  distinct() %>%\n  group_by(vessel, cargo) %>%\n  rename(source = vessel, target = cargo)%>%\n  filter(source!=target) %>% \n  ungroup()\n\ncargo_vessel_graph <- tbl_graph(nodes = cargo_vessel_nodes,\n                       edges = cargo_vessel_edges,\n                       directed = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_vessel_graph %>%\n  ggraph(layout = 'fr') +\n  geom_edge_link() +\n  geom_node_point() + \n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\nFinding anomalies in vessel movement by comparing end time (calculated by dwell) with next time (the next time the vessel is detected at the next location).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nab_vessel_mvmt <- vessel_location %>%\n  mutate(time = ymd_hms(time)) %>% \n  mutate(next_time = ymd_hms(next_time)) %>% \n  mutate(end_time = ymd_hms(end_time)) %>% \n  filter(end_time != next_time) \n\nab_vessel_mvmt_agg <- ab_vessel_mvmt %>% \n  distinct() %>% \n  group_by(vessel) %>% \n  summarise(weights = n()) %>%\n  arrange(desc(weights))\nab_vessel_mvmt_agg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 277 × 2\n   vessel                 weights\n   <chr>                    <int>\n 1 brooktroutbuccaneerc0b     151\n 2 bluemarlinbandit292        149\n 3 halibuthero9b9             146\n 4 catchcruisera94            145\n 5 bluefishbandit8ec          138\n 6 tenchtaker595              133\n 7 deepseadrifter9f2          132\n 8 whitefishwrangler7df       132\n 9 yellowfintunataker08b      130\n10 rainbowtroutraider4d0      129\n# ℹ 267 more rows\n```\n\n\n:::\n:::\n\n\n## 2.3 Examine the seasonal trends and anomalies in the port exit records\n\n### 2.3.1 Seasonal trends in port exit records\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_record1 <- import_record %>% \n  mutate(year = year(cargo_delivery_date),\n         month = month(cargo_delivery_date, label = TRUE),\n         day = day(cargo_delivery_date),\n         week = week(cargo_delivery_date),\n         weekday = wday(cargo_delivery_date, label = TRUE, week_start = 1))\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- import_record1  %>%\n  distinct() %>%\n  group_by(fish,month) %>%\n  summarise(total_qty_tons = sum(qty_tons)) %>% \n  ungroup()\n\nggplot(fish_agg, aes(x = month, y = fish, fill = total_qty_tons)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create a calendar heat map\ncreate_heatmap <- function(data, city) {\n  ggplot(data, aes(x = month, \n                   y = fish, \n                   fill = total_qty_tons)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_by_port_agg <- import_record1 %>% \n  group_by(city,fish,month) %>% \n  summarise(total_qty_tons = sum(qty_tons))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store heatmaps\nheatmaps <- list()\n\n# Iterate over each city\ncities <- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data <- fish_by_port_agg %>% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap <- create_heatmap(heatmap_data, c)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] <- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-72-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-72-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-72-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-72-5.png){width=672}\n:::\n:::\n\n\n## 2.3.1 **Understanding the types of fish that should not be in the market**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store heatmaps\nheatmaps <- list()\n\n# Iterate over each city\ncities <- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data <- fish_by_port_agg %>% \n    filter(city == c) %>% \n    filter(fish %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\",\"Salmon\"))\n  \n  # Create the heatmap for the current city\n  heatmap <- create_heatmap(heatmap_data, c)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] <- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-73-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-73-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-73-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-73-5.png){width=672}\n:::\n:::\n\n\n::: callout-note\n### Insights from this visualisation\n\n-   From this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively.\n\n-   Probable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish.\n:::\n\n## 3.0 Task 2\n\nDevelop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n## 3.1 Illegal fishing by SouthSeafood Express Corp\n\nSouthSeafood Express Corp operates two fishing vessels by the id of \"snappersnatcher7be\" and \"roachrobberdb6\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_agg <-\n  vessel_movement %>%\n  distinct() %>%\n  group_by(loc, vessel, type) %>%\n  summarise(weights = n()) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_agg %>% \n  filter(vessel %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %>%\n  group_by(vessel) %>% \n  ggplot(aes(x=vessel, y=loc,\n             size = weights)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n### 3.1.1 When and where did SouthSeafood Express Corp vessels perform their illegal fishing?\n\nSince only Snapper Snatcher appears to be operating in Ghoti Preserve, we will examine this fishing vessel more closely.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnapper_activities <- vessel_movement %>% \n  filter(vessel %in% c(\"snappersnatcher7be\")) %>% \n  filter(loc == \"Ghoti Preserve\") %>% \n  arrange(vessel,time) %>% \n  mutate(end_time = time + dwell) %>% \n  select(time, dwell, end_time)\nsnapper_activities\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 time      dwell            end_time\n1 2035-02-02 05:39:59 282000.853 2035-02-05 12:00:00\n2 2035-02-09 05:49:11 281448.765 2035-02-12 12:00:00\n3 2035-02-16 07:02:09 277070.841 2035-02-19 12:00:00\n4 2035-03-15 05:46:02   6410.348 2035-03-15 07:32:52\n```\n\n\n:::\n:::\n\n\nThere three instances (2,9 and 16 Feb) where Snapper Snatcher stayed at the Ghoti Preserve for over 3 days. These are the instances where SouthSeafood Express Corp's Snapper Snatcher conducted IUU Fishing in Ghoti Preserve.\n\n### 3.1.2 Visualising Vessel Trajectory\n\nIn the code chunk below, st_as_sf() of sf package is used to convert vessel_movement_data data.frame into sf point data.frame by using values in XCOORD and YCOORD columns. The output is an sf data.frame called vessel_movement_sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement %>%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n```\n:::\n\n\nNext arrange() is used to sort the records according to the vessels’ name (i.e. target) and navigation time (i.e. time)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_sf %>%\n  arrange(vessel, time)\n```\n:::\n\n\nLastly, st_cast() of sf package is used to convert vessel_movement_sf from point features into linestring features called vessel_trajectory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory <- vessel_movement_sf %>%\n  group_by(vessel) %>%\n  summarize(do_union = FALSE) %>%\n  st_cast(\"LINESTRING\")\n```\n:::\n\n\n**Selecting SouthSeafood Express vessels**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_selected <- vessel_trajectory %>%\n  filter(vessel %in% c(\"snappersnatcher7be\", \"roachrobberdb6\"))\n```\n:::\n\n\nNext, appropriate functions of ggplot2 is used to plot the selected vessel trajectories by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = oceanus_geography) +\n  geom_sf(data = vessel_trajectory_selected, \n          aes(color = factor(vessel)), \n          size = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of SouthSeafood Express Vessels\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n\n## 4.0 Task 4\n\n**The Questions**:\n\n1.  How did fishing activity change after SouthSeafood Express Corp was caught?\n\n2.  What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\nIn order to understand the change in fishing activities, we first have to determine the date where SouthSeafood Express Corp was caught. The final activities of SouthSeafood's vessels are on 2035-05-14 at City of Lomark for Snapper Snatcher (snappersnatcher7be) and 2035-05-12 at City of Himark for Roach Robber (roachrobberdb6) according to the transponder pings. Hence, we can conclude that the SouthSeafood is caught for illegal fishing, and had ceased operating its fishing vessels since 2035-05-14. We will use this date as the cut off to define before and after SSEC was caught.\n\n## 4.1 Changes in Commercial Fishing\n\nFirstly, we take a look at the species caught across the months (Feb to Nov 2035).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- fish_by_port_agg  %>%\n  distinct() %>%\n  group_by(fish,month) %>%\n  summarise(total_qty_tons = sum(total_qty_tons)) \n\noceanus_heatmap <- ggplot(fish_agg, aes(x = month, y = fish, fill = total_qty_tons)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal() +\n  geom_vline(xintercept = \"May\",color = 'red', linetype = 'dashed') +\n  annotate(\"text\", x = \"May\" , y = \"Offidiaa\", label = \"SouthSeafood caught\", angle = 90, vjust = -0.5, hjust = 0.5, color = \"red\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order <- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)\n\nspecies_plot <-ggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_heatmap / species_plot\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-84-1.png){width=576}\n:::\n:::\n\n\nFor recapitulation, we know that Sockfish, Offidiaa, and Helenaa are fish species that are unique to the three Preserves. From the two plots above, we can derive initial conclusion that there is an usual increase in Sockfish catch after SouthSeafood was caught in mid-May. We also see a minor increase in Helenaa between Jun to Aug, and later in Oct to Nov. The spike in Offidiaa catch begins in Sep and grows gradually to Nov. There is also appearance of Salmon from Jul onwards.\n\nCombining the information above, we can make the following two hypothesis about the changes in fishing activities in Oceanus after SouthSeafood was caught:\n\n1.  The fishing vessels switched to Don Limpet Preserve for IUU fishing. Tell tale sign is the increase in Sockfish catch, which is species unique to Don Limpet Preserve. This also explains the slight increase in Helena catch from Jun.\n\n2.  The fishing vessels moved into Ghoti Preserves from Sep onwards for IUU fishing. Tell tale sign is the increase in Offidia catch from Sep, which is species unique to Ghoti Preserve.\n\n3.  Salmon start to appear in the cargoes in various cities. Salmon is a deep sea fish species that is not found in any of the fishing ground in Oceanus\n\nFor confirmation, we take a look at the changes to OVLS Transponder Ping, comparing the total pings to various locations month by month.\n\n**Frequency of visits to the Cities**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_long <- vessel_movement %>% \n  filter(loc_type == \"city\") %>% \n  filter(type == \"FishingVessel\") %>% \n  mutate(month = month(time)) %>% \n  select(loc, vessel, month) %>% \n  group_by(loc, month) %>% \n  summarize(n = n()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- vessel_movement_long %>% \n  mutate(month = as.factor(month)) %>% \n  newggslopegraph(month,n, loc,\n                Title = \"Changes in Visit Frequency of Fishing Vessels\",\n                SubTitle = \"Cities\",\n                Caption = \"Feb-Nov.Before and After SSEC caught in May\") \n\n\na <- a + \n  geom_vline(xintercept = 4, \n                    linetype = 2, \n                    color = \"red\") +\n  geom_text(aes(x = 4, y = 150, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = 1.1,\n            size = 3)\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"none\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Insights from this visualisation\n\n-   For the City of Himark, there is a hike in visit frequency till the time\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_long <- vessel_movement %>% \n  filter(loc_type == \"buoy\") %>% \n  filter(type == \"FishingVessel\") %>% \n  mutate(month = month(time)) %>% \n  select(loc, vessel, month) %>% \n  group_by(loc, month) %>% \n  summarize(n = n()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- vessel_movement_long %>% \n  mutate(month = as.factor(month)) %>% \n  newggslopegraph(month,n, loc,\n                Title = \"Changes in Visit Frequency of Fishing Vessels\",\n                SubTitle = \"Navigation Points\",\n                Caption = \"Feb-Nov.Before and After SSEC caught in May\") \n\n\nb <- b + \n  geom_vline(xintercept = 4, \n                    linetype = 2, \n                    color = \"red\") +\n  geom_text(aes(x = 4, y = 150, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = 1.1,\n            vjust = -8,\n            size = 3)\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"none\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_long <- vessel_movement %>% \n  filter(loc_type %in% c(\"Fishing Ground\", \"Ecological Preserve\")) %>% \n  filter(type == \"FishingVessel\") %>% \n  mutate(month = month(time)) %>% \n  select(loc, vessel, month) %>% \n  group_by(loc, month) %>% \n  summarize(n = n()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- vessel_movement_long %>% \n  mutate(month = as.factor(month)) %>% \n  newggslopegraph(month,n, loc,\n                Title = \"Changes in Visit Frequency of Fishing Vessels\",\n                SubTitle = \"Fishing Grounds and Ecological Preserves\",\n                Caption = \"Feb-Nov.Before and After SSEC caught in May\") \n\nc <- c + \n  geom_vline(xintercept = 4, \n                    linetype = 2, \n                    color = \"red\") +\n  geom_text(aes(x = 4, y = 150, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = 1.1,\n            vjust = -8,\n            size = 3)\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"none\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nc\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n\n```{}\n```\n\nIn the line graph below, we observe that the overall fishing vessels activities in the fishing ground and preserves dropped.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage <- vessel_movement %>% \n  filter(type == \"FishingVessel\") %>%\n  filter(loc %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %>%\n  mutate(month = month(time)) %>% \n  summarise(average = (n()/10))\n\nvessel_movement %>% \n  filter(loc %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %>%\n  filter(type == \"FishingVessel\") %>% \n  mutate(month = month(time)) %>% \n  group_by(month) %>% \n  summarise(n = as.numeric(n())) %>%\n  ggplot(aes(x = month, y = n)) + \n  geom_line(color = \"blue\") +  \n  geom_point(size = 4, color = \"blue\") +\n  geom_text(aes(label = n), \n            vjust = -1,\n            size = 3) +\n  labs(title = \"Visit Frequency to All Fishing Grounds and Preserves by Month\",\n       x = \"Month\",\n       y = \"Frequency\") +\n  geom_hline(average, \n             yintercept = as.numeric(average), \n             color=\"black\",\n             linetype = 6) +\n  geom_point(x = 5, y = 13366,\n             size = 4, color = \"red\") +\n  geom_text(aes(x = 5, y = 13366, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = -0.2,\n            size = 3) +\n  geom_text(aes(x = 4.5, y = 12000, label = \"Monthly Average = 11854\"),\n            color = \"black\",\n            size = 3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n\nDerive monthly transponder ping:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_vessel_movement <- vessel_movement %>% \n  filter(type == \"FishingVessel\") %>%\n  mutate(month = month(time)) %>% \n  select(loc, vessel, month) %>% \n  group_by(loc, month) %>% \n  summarize(n = n()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_vessel_movement$month <- factor(monthly_vessel_movement$month)\nmonthly_vessel_movement$loc <- factor(monthly_vessel_movement$loc,\n                                             levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\n\nhline.data <- monthly_vessel_movement %>% \n  group_by(loc) %>%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_vessel_movement, \n       aes(x = month, \n           y = n, \n           group = loc, \n           color = loc)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ loc, scales = \"free_y\") +  \n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", \n                y = avgvalue, \n                label = \"SouthSeafood caught\"), \n            vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-93-1.png){width=960}\n:::\n:::\n\n\n### 4.2 What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_vessel_movement$month <- factor(monthly_vessel_movement$month)\nmonthly_vessel_movement$loc <- factor(monthly_vessel_movement$loc,\n                                             levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\n\nhline.data <- monthly_vessel_movement %>% \n  group_by(loc) %>%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_vessel_movement, \n       aes(x = month, \n           y = n, \n           group = loc, \n           color = loc)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ loc, scales = \"free_y\") +  \n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", \n                y = avgvalue, \n                label = \"SouthSeafood caught\"), \n            vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-94-1.png){width=960}\n:::\n:::\n\n\n::: callout-important\n## Conclusion from the visualisation\n\nAfter SSFEC arrest:\n\n-   Abnormally high frequency of visit to Exit East. Upward trend of frequency of visit from Feb to Nov. Exit East offers deep sea fishing.\n\n-   Drastic drop in frequency of visit to the City of Haacklee. Investigate into changes in fish species in the cargoes through the months going to the City of Haacklee.\n\n-   Drop in frequency if visit in both Ghoti Preserve and Nemo Reef. However, the drop in Nemo Reef in actual value is greater. Nemo reef is a good area for violation of IUU as vessels have access to fish species in Nemo Reef that are common to the three fishing grounds, except for Helenaa species. Also, Nemo Reef sits between the two fishing grounds, maske good excuse for vessels to cut across it rather than using Nav D as safe navigation around Nemo Reef.\n:::\n\n**Changes in fish species delivered to the City of Haacklee through the month**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_heatmap(fish_by_port_agg, \"City of Haacklee\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-95-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement$loc <- factor(vessel_movement$loc,\n                              levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\nggplot(vessel_movement, aes(x = loc, \n                            y = dwell,\n                            fill = loc_type)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous( limits = c(0, 500000))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-96-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement %>% \n  filter(type ==\"FishingVessel\") %>% \n  filter(loc %in% c(\"Exit North\",\n                    \"Exit South\",\n                    \"Exit East\",\n                    \"Exit West\",\n                    \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                    \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\")) %>% \n  ggplot(aes(x = loc, \n       y = dwell,\n       fill = loc_type)) +                            \n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, \n                                   hjust = 1)) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-97-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}