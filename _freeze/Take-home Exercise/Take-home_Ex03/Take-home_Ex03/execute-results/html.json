{
  "hash": "b73f4b23b8eae8bf5b4c62a9f833faa1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Rydia\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n# VAST 2024 Mini Challenge 2\n\n## Mini-Challenge 2: Creating Signatures for Geo-Temporal Patterns\n\nMini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\n\nThe details of the mini challenge can be found [here](https://vast-challenge.github.io/2024/MC2.html).\n\n# 1.0 Data Preparation\n\n## 1.1 Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf,\n               patchwork, CGPfunctions,\n               ggHoriPlot)\n```\n:::\n\n\n## 1.2 Loading the Data\n\nLoading the .json data using `jsonlite` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\n### 1.2.1 Loading the Geographical Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_geography = st_read(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\") %>%\n  st_transform(crs = 4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\rydialiang\\ISSS608\\Take-home Exercise\\Take-home_Ex03\\data\\MC2\\Oceanus Information\\Oceanus Geography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(oceanus_geography)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 29\nColumns: 8\n$ Name                 <chr> \"Suna Island\", \"Thalassa Retreat\", \"Makara Shoal\"…\n$ Description          <chr> \"Large island of Oceanus\", \"Smaller island of Oce…\n$ X.note               <chr> \"Suna is 'sand' or 'gritty' in Japanese\", \"Thalas…\n$ type                 <chr> \"Entity.Location.Region\", \"Entity.Location.Region…\n$ X.Kind               <chr> \"Island\", \"Island\", \"Island\", \"Island\", \"Fishing …\n$ Activities           <list> \"Residential\", \"Residential\", \"Recreation\", <\"To…\n$ fish_species_present <list> <>, <>, <>, <>, <\"Cod/Gadus n.specificatae\", \"Bi…\n$ geometry             <GEOMETRY [°]> MULTIPOLYGON (((-166.0111 3..., MULTIPOL…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(oceanus_geography, \n  \"data/rds/oceanus_geography.rds\")\n```\n:::\n\n\n**Importing Geographical Data in ESRI shapefile format**\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations <- st_read(dsn = \"data/MC2/shp\",\n  layer = \"Oceanus Geography\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\rydialiang\\ISSS608\\Take-home Exercise\\Take-home_Ex03\\data\\MC2\\shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(oceanus_locations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 27\nColumns: 8\n$ Name       <chr> \"Haacklee\", \"Port Grove\", \"Lomark\", \"Himark\", \"Paackland\", …\n$ Descriptio <chr> NA, NA, NA, NA, NA, \"Adimistrative seat of Oceanus\", NA, NA…\n$ X.note     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Activities <chr> \"Tourism,Local shipping\", \"Tourism,Research\", \"Deep sea fis…\n$ type       <chr> \"Entity.Location.City\", \"Entity.Location.City\", \"Entity.Loc…\n$ X.Kind     <chr> \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"bu…\n$ fish_speci <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   <POINT [°]> POINT (-165.6908 39.03215), POINT (-165.8855 39.10005…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = oceanus_locations) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(oceanus_locations, \n  \"data/rds/oceanus_locations.rds\")\n```\n:::\n\n\n### 1.2.2 Wrangling of Geographical Data\n\nIn the code chunk below, st_coordinate() of sf package is used to extract coordinates from oceanus_locations sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(oceanus_locations)\n```\n:::\n\n\nNext, code chunk below is used to drop the geometry column of oceanus_locations of sf data.frame by using st_drop_geometry() of sf package and save the output into a new data.frame called oceanus_locations_df.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations_df <- oceanus_locations %>%\n  st_drop_geometry()\n```\n:::\n\n\nThen, the code chunk below is to append the x- and y-coodinate values from coords list into the XCOORD and YCOORD columns of oceanus_locations_df respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations_df$XCOORD <- coords[, \"X\"]\noceanus_locations_df$YCOORD <- coords[, \"Y\"]\n```\n:::\n\n\nLastly, the code chunk below is used to tidy OceanusLocations_df by selecting the necessary columns only and at the same time, rename X.Kind to Loc_Type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_locations_df <- oceanus_locations_df %>%\n  select(Name, X.Kind, XCOORD, YCOORD) %>%\n  rename(Loc_Type = X.Kind)\n```\n:::\n\n\n## 1.3 **Wrangling and tidying edges**\n\n### 1.3.1 Extracting edges\n\nFirst, we extract only distinct edges from the tibble *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_data$links %>% \n  distinct()\n```\n:::\n\n\nNext, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <chr> \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nFrom the table above, we can identify some issues with the data:\n\n1.  The columns with date data type are all in character format.\n\n2.  Some columns have names that starts with \"\\_\". These need to be rename to avoid coding issues.\n\n### 1.3.2 Correcting the date data type with `lubridate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` <- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` <- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date <- as_datetime(mc2_edges$date)\n```\n:::\n\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### 1.3.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.3.4 Splitting words in `type` column\n\nThe code chunk below combined the following steps:\n\n1.  Splitting the words by \".\" - after observing that the format for type is as such: \"Event.TransportEvent.TransponderPing\"\n\n2.  The `max(lengths(word_list))` will be used to find the maximum number of elements in any split.\n\n3.  Apply function(x) to pad shorter splits with NA values to make them all the same length.\n\n4.  Create word_df and changing column names to event1 etc.\n\n5.  Convert word_df from matrix into tibble data.frame, and checks its class.\n\n6.  Append word_df to mc2_edges tibble data.frame.\n\n7.  Saving mc2_edges into R **rds** format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\n## 1.4 **Wrangling and tidying nodes**\n\n### 1.4.1 Extracting nodes\n\nThe code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n```\n:::\n\n\nNext, take a `glimpse()` to understand the data structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <chr> \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  <chr> \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for `type` column issues we discussed earlier, two additional data issues can be observed. They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n\n-   Some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.\n\n### 1.4.2 Correcting the date data type with `lubridate()`\n\nCorrect the date data type and take a `glimpse()` to confirm changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes$`_last_edited_date` <- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` <- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date <- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <dttm> 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  <dttm> 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\n### 1.4.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.4.4 Splitting words in `type` column\n\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R **rds** format yet, as there are more works to be done to clean up the dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"entity\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(entity2, entity3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  cbind(word_df)\n```\n:::\n\n\n### 1.4.5 Tidying text field\n\nUsing `mutate()` of dplyr and `gsub()` of Base R to tidy up the values in the cell. Essentially, the unwanted characters like `c`, `(`, `)`, and `\\` are removed by substituting with empty value `\"\"` for both Activities and fish_species_present columns. What is left in the columns will be characters separated by `,`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n:::\n\n\nLastly, we will save the tidied mc2_nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\n```\n:::\n\n\n## 1.5 Processing nodes and edges data \n\n### 1.5.1 Understanding the nodes and edges data\n\nIn this section, we will gain more insights from the existing data. The table below summarises the type of data we can glean from the nodes and edges:\n\n+----------------+---------------------+-----------------------------------------------------------+----------------------------------------------------+\n| mc2_nodes Type | Entity              | Details                                                   | Relevant Fields                                    |\n+================+=====================+===========================================================+====================================================+\n| Commodity      | Fish                | **10 x Fish Species**                                     | 1.  name (fish species common name/scientific name |\n|                |                     |                                                           | 2.  id                                             |\n|                |                     | ![](images/clipboard-629994936.png)                       |                                                    |\n+----------------+---------------------+-----------------------------------------------------------+----------------------------------------------------+\n| Location       | 1.  City            | **6 x City**                                              | 1.  id ( City Name)                                |\n|                | 2.  Point           |                                                           | 2.  Name (City short name)                         |\n|                | 3.  Region          | ![](images/clipboard-3282014997.png)                      | 3.  description                                    |\n|                |                     |                                                           | 4.  activities                                     |\n|                |                     | **12 x Point**                                            | 5.  kind                                           |\n|                |                     |                                                           | 6.  entity3 (type of location)                     |\n|                |                     | ![](images/clipboard-802842425.png){width=\"94\"}           |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | **6 x Region**                                            |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | -   3 x Ecological Preserves                              |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | -   3 x Fishing Ground                                    |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | ![](images/clipboard-3654858944.png)                      |                                                    |\n+----------------+---------------------+-----------------------------------------------------------+----------------------------------------------------+\n| Document       | Delivery Report     | 5,307 unique cargoes, with qty_ton and date (of delivery) | 1.  id                                             |\n|                |                     |                                                           | 2.  qty_tons                                       |\n|                |                     |                                                           | 3.  date                                           |\n+----------------+---------------------+-----------------------------------------------------------+----------------------------------------------------+\n| Vessels        | 1.  Fishing Vessels | **296 x Vessels**                                         | 1.  id                                             |\n|                | 2.  Cargo Vessels   |                                                           | 2.  Name                                           |\n|                | 3.  Ferry Cargo     | -   178 x Fishing Vessels                                 | 3.  flag_country                                   |\n|                | 4.  Ferry Passenger |                                                           | 4.  company                                        |\n|                | 5.  Research        | -   100 x Cargo Vessels                                   | 5.  tonnage                                        |\n|                | 6.  Tour            |                                                           | 6.  length_overall                                 |\n|                | 7.  Others          | -   2 x Cargo Ferry                                       | 7.  entity3 (type of vessels)                      |\n|                |                     |                                                           |                                                    |\n|                |                     | -   3 x Passenger Ferry                                   |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | -   2 x Research Vessels                                  |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | -   6 x Tour Vessels                                      |                                                    |\n|                |                     |                                                           |                                                    |\n|                |                     | -   5 x Other Vessels                                     |                                                    |\n+----------------+---------------------+-----------------------------------------------------------+----------------------------------------------------+\n\n+------------------+--------------------------------------------------------------------------------+----------------------------------+\n| mc2_edges type   | Count (n)                                                                      | Relevant Fields                  |\n+==================+================================================================================+==================================+\n| Transponder Ping | 258,542 x Pings                                                                | 1.  time                         |\n|                  |                                                                                | 2.  dwell                        |\n|                  |                                                                                | 3.  source (locations)           |\n|                  |                                                                                | 4.  target (vessels)             |\n+------------------+--------------------------------------------------------------------------------+----------------------------------+\n| Transaction      | 10,614 x Transactions (matching 5,307 unique cargoes to fish species and city) | 1.  source (cargo)               |\n|                  |                                                                                | 2.  target (fish species & city) |\n|                  |                                                                                | 3.  date                         |\n+------------------+--------------------------------------------------------------------------------+----------------------------------+\n| Harbor Report    |  2,487 x Sightings                                                             | 1.  source (vessels)             |\n|                  |                                                                                | 2.  target (city)                |\n|                  |                                                                                | 3.  date                         |\n+------------------+--------------------------------------------------------------------------------+----------------------------------+\n\n### 1.5.2 Extracting Relevant Information for each nodes and edges data\n\nIn this section, we will extract the required column and save it into a more intuitive columns with intuitive names. From the analysis above, we will have 4 nodes data and 3 edges data as below:\n\n::: callout-note\n## Nodes and Edges Data\n\n**Nodes:**\n\n1.  fish_nodes: all types of fish species in the data set\n2.  location_nodes: all locations in the data set\n3.  cargo_nodes: all cargoes in the data set\n4.  vessel_nodes: all vessels in the data set\n\n**Edges:**\n\n1.  vessel_movement: vessel movement, location, time and dwell\n2.  transaction: date and location of transaction of cargoes\n3.  harbor_report: date and vessel that dock in the harbor (city)\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_species_all <- mc2_nodes %>% \n  filter(entity2 == \"Commodity\") %>% \n  select(name, id) %>% \n  mutate(name = str_replace(name, \"/.*\", \"\"))\n```\n:::\n\n\n1.  Vessel Movements\n\n2.  Harbor Reports\n\n3.  Harbor Import Records\n\n### 1.5.1 Vessel Movements\n\n**Vessel Movements:** Oceanus is outfitted with a transponder/ping system named the Oceanus Vessel Locator System (OVLS).  Vessels are outfitted with a transponder and periodic 'pings' from base-stations results in a report of vessel locations at any time.  The raw ping granularity is at the minute-level but post-processing has converted it into visit/dwell times. OVLS is generally reliable, though vessel records may be missing for a variety of reasons.\n\nNode/Edge types and properties present\n\n1.  Entity.Vessel: Description of the vessel\n2.  Entity.Location: Description of a geographic location\n3.  Event.TransponderPing: Links a vessel to a location\n\nFirst, we will extract the relevant nodes, namely the vessels and locations from `mc2_nodes`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_mvmt_nodes <- mc2_nodes %>% \n  filter(entity2 %in% c(\"Vessel\",\"Location\")) \n```\n:::\n\n\nNext, we will extract the vessel movement edges from mc2_edges, by filtering the \"TransponderPing\" from event3 column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_mvmt_edges <- mc2_edges %>% \n  filter(event3 %in% c(\"TransponderPing\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- vessel_mvmt_edges %>% \n  filter(event3 %in% c(\"TransponderPing\")) %>%\n  select(time, dwell, source, target) %>% \n  mutate(source = gsub(\"^City of\", \"\", source)) %>%\n  mutate(source = gsub(\"^\\\\s+\", \"\", source)) %>%\n  left_join(oceanus_locations_df,\n            by = c(\"source\" = \"Name\"))\n```\n:::\n\n\n### 1.5.2 Harbor Reports\n\n**Harbor Reports:** Harbor masters regularly report the vessels found in their purview anytime during the day.  This data is derived from a different system than OVLS (see \"Vessel Movements\"), though the data overlaps.  Harbor Reports are provided on a different schedule from different harbors. Since no harbor reports every day, this data has lower temporal granularity than vessel movement data. Additionally, the Harbor Master is also responsible for proximate navigational beacon(s), so this data has lower spatial granularity as well.  However, the list of vessels observed is considered canonical.\n\nNode/edge types present:\n\n1.  Entity.Vessel\n\n2.  Entity.location\n\n3.  Event.HarborReport\n\nSince the node type are the same as the vessel movements, we will make a copy of the node from vessel movement nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_report_nodes <- vessel_mvmt_nodes %>% \n  filter(entity3 %in% c(\"City\", \"FishingVessel\", \"Others\", \"CargoVessel\", \"Tour\", \"Research\", \"Ferry\"))\n```\n:::\n\n\nNext, we will extract the harbor report edges from mc2_edges, by filtering the \"HarborReport\" from event3 column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_report_edges <- mc2_edges %>% \n  filter(event2 %in% c(\"HarborReport\"))\n```\n:::\n\n\n### 1.5.3 Harbor Import Records\n\n**Harbor Import Records**: Vessels deliver cargo to the ports, and that cargo is brought into Oceanus.  These records reflect the goods that \\*leave\\* the harbor to go to businesses in Oceanus or to be exported.  It was filtered pre-ingest to focus on the delivery of raw fish.  Because it is raw, fish leave the port quickly (generally one day after delivery).  Due to clerical error, the records purchased by FishEye do not include the vessel that delivered the cargo.\n\nNode/Edge types present:\n\n1.  Entity.location\n\n2.  Entity.Commodity.Fish\n\n3.  Entity.Document.DeliveryReport\n\n4.  Event.Transaction\n\nFirst, we will extract the relevant nodes, namely the location, commodity.fish and document.delivery report from `mc2_nodes`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_import_records_nodes <- mc2_nodes %>% \n  filter(entity2 %in% c(\"Location\",\"Commodity\",\"Document\"))\n```\n:::\n\n\nNext, we will extract harbor import records edges, by filtering the event2 with value of \"Transaction\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_import_records_edges <- mc2_edges %>% \n  filter(event2 == \"Transaction\")\n```\n:::\n\n\nBefore we move on to exploring the data, we will save the 3 sources edges and nodes tibble data frame as R **rds** format in the data/rds folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vessel_mvmt_nodes, \"data/rds/vessel_mvmt_nodes.rds\")\nwrite_rds(vessel_mvmt_edges, \"data/rds/vessel_mvmt_edges.rds\")\nwrite_rds(vessel_movement_data, \"data/rds/vessel_movement_data.rds\")\nwrite_rds(harbor_report_nodes, \"data/rds/harbor_report_nodes.rds\")\nwrite_rds(harbor_report_edges, \"data/rds/harbor_report_edges.rds\")\nwrite_rds(harbor_import_records_nodes, \"data/rds/harbor_import_records_nodes.rds\")\nwrite_rds(harbor_import_records_edges, \"data/rds/harbor_import_records_edges.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(mc2_edges$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Event.TransportEvent.TransponderPing\"\n[2] \"Event.Transaction\"                   \n[3] \"Event.HarborReport\"                  \n```\n\n\n:::\n:::\n\n\n## 1.6 Exploratory Data Analysis\n\n### 1.6.2 Understanding the Fish Species in each Region\n\nBefore we can detect anomalies in the for fishing activities, we first need to understand where are the fish species found in each Region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_fish_species <- mc2_nodes %>% \n  filter(entity3 == \"Region\") %>% \n  select(Name, fish_species_present, Activities, kind) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"species\", 1:max_elements) \n\nword_df <- as_tibble(word_df) %>% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %>% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %>% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %>% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %>% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %>%\n  mutate_at(vars(species1:species5), trimws)\n\nregion_fish_species <- region_fish_species %>%\n  cbind(word_df)\n\n# Convert data to long format\nregion_fish_species_long <- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long <- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %>% \n  na.omit() %>%\n  mutate_at(vars(Presence), trimws)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order <- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence in each Region\",\n       x = \"Region\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-40-1.png){width=960}\n:::\n:::\n\n\n::: callout-note\n## Insights from this visualisation\n\n[**Ecological Preserves**]{.underline}\n\nWe can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species (Sockfish, Offidiaa, and Helenaa) would have fished illegally. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\n-   Sockfish: Only found in Don Limpet Preserve\n\n-   Offidiaa: Only found in Ghoti Preserve\n\n-   Helenaa: Only found in Ecological Preserves (all three)\n\n[**Fishing Grounds**]{.underline}\n\n-   Cod: Only found in Cod Table\n\n-   Harland: Only found in Tuna Shelf\n\n**Other notable point**\n\n-   Salmon: Not found in any of the 6 locations mentioned above. This might be imports from other countries or from international shipping.\n:::\n\n### 1.6.3 Understanding the qty_tons of each Fish Species by City\n\nAfter identifying the three fish species (Sockfish, Offidiaa, and Helenaa) that are only found in the Ecological Preserves, we will have an overview of how each of the fish species are spread across the city.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_species_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       name                    id\n1       Cod gadusnspecificatae4ba\n2  Birdseye       piscesfrigus900\n3  Sockfish      piscesfoetidaae7\n4    Wrasse    labridaenrefert9be\n5  Beauvoir       habeaspisces4eb\n6   Harland      piscissapidum9b7\n7      Tuna      thunnininveradb7\n8  Offidiaa       piscisosseusb6d\n9    Salmon  oncorhynchusrosea790\n10  Helenaa        piscessatisb87\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 2.0 Task 1: Flow of Commercially Caught Fish\n\nIn this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:\n\n1.  Associating the vessels with their probable cargoes\n2.  Which vessels deliver which products and when?\n3.  Examine the seasonal trends and anomalies in the port exit records\n\n## 2.1 Associating the vessels with their probable cargoes\n\nTo find out which commodity goes to which ports, we first create a cargo list that links the cargo to the cities and commodities. At the same time, we also clean up the name of the fish, leaving only its common name in the \"name\" column, by removing all the characters after the \"/\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_port_list <- harbor_import_records_edges %>% \n  select(source,target) %>% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\ncargo_commodity_list <- harbor_import_records_edges %>% \n  select(source,target) %>% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %>% \n  rename(commodity = target)\n\ncargo_list <- cargo_port_list %>% \n  left_join(cargo_commodity_list) %>%\n  left_join(harbor_import_records_edges) %>% \n  select(source, target, commodity, date) %>% \n  rename(cargo = source, city = target) \n\ncargo_list<- harbor_import_records_nodes %>% \n  filter(entity3 ==\"Fish\") %>% \n  rename(commodity = id) %>% \n  select(name, commodity) %>% \n  left_join(cargo_list) %>% \n  mutate(name = str_replace(name, \"/.*\", \"\"))\n\ncargo_list<- harbor_import_records_nodes %>% \n  select(id,qty_tons) %>% \n  rename(cargo = id) %>% \n  left_join(cargo_list,\n            unmatched = \"drop\") %>%\n  filter(if_all(c(qty_tons), ~ !is.na(.)))\n```\n:::\n\n\n**Matching the vessel with the cargo list**\n\nWe will use the vessel_mvmt_nodes that contains information on the movement of fishing vessels and cargoes, and define the vessels location, start time and end time of the vessels in the particular location using transponder ping.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfishing_vessel_list <- vessel_mvmt_nodes %>% \n  filter(entity3 %in% c(\"FishingVessel\")) %>% \n  select(id)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_list <- vessel_mvmt_nodes %>% \n  filter(entity3 %in% c(\"FishingVessel\", \"CargoVessel\")) %>% \n  select(id) \n\nvessel_list <- as.list(vessel_list)\n\nvessel_location <- mc2_edges %>% \n  filter(event3 == \"TransponderPing\") %>%\n  filter(target %in% unlist(vessel_list)) %>% \n  select(source, target, time, dwell) %>% \n  arrange(target,time) %>% \n  mutate(next_time = ifelse(lead(target) == target, lead(time), NA)) %>% \n  mutate(next_time = as_datetime(next_time))   %>% \n  mutate(end_time = time + dwell)\n\nvessel_location_city <- vessel_location %>% \n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n```\n:::\n\n\n**Vessel Location based on harbor report**\n\nThe next step we do is to extract the date, location and vessel from the harbor report. Since this is describe as canonical, it should be considered for matching first before using the vessel location data from transponder ping. Columns are renamed to match the information in the cargo_list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_mvmt_hr <- harbor_report_edges %>% \n  select(source, target, date) %>% \n  rename(vessel = source, city = target, vessel_delivery_date = date)\n```\n:::\n\n\n**Merging cargo_list and vessel_mvmt_hr**\n\nAdding one column on vessel delivery date, which is 1 day before the date stated in the harbor import record.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_list <- cargo_list %>% \n  mutate(vessel_delivery_date = date + days(-1))\n```\n:::\n\n\nSaving cargo_list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(cargo_list, \"data/rds/cargo_list.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_location_match_hr <- cargo_list%>% \n  left_join(vessel_mvmt_hr ) %>%\n  filter(if_all(c(qty_tons,vessel), ~ !is.na(.))) %>% \n  distinct()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vessel_location_match_hr, \"data/rds/vessel_location_match_hr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhr_match <- mc2_nodes %>% \n  select(id,Name,flag_country, company, tonnage,entity3) %>% \n  rename(vessel = id) %>% \n  left_join(vessel_location_match_hr) %>%   \n  filter(if_all(c(qty_tons, tonnage), ~ !is.na(.))) %>% \n  distinct() %>% \n  filter()\n```\n:::\n\n\n**Merging cargo_list and vessel_location_city**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_location_city <- vessel_location_city %>% \n  mutate(date = substr(`time`,1,10)) %>% \n  mutate(vessel_delivery_date = ymd(date))  %>% \n  filter(dwell > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_location_match <- vessel_location_city %>% \n  select(source,target,vessel_delivery_date) %>% \n  rename(city = source, vessel_hr = target) %>% \n  left_join(cargo_list,\n            unmatched = \"drop\") %>%\n  filter(if_all(c(qty_tons), ~ !is.na(.))) %>% \n  distinct()\n```\n:::\n\n\n**Vessel Match Graph**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid1 <- vessel_location_match_hr  %>% \n  select(vessel) %>% \n  rename(id = vessel) \n\nid2 <- vessel_location_match_hr  %>% \n  select(cargo) %>% \n  rename(id = cargo)\n\ncargo_vessel_nodes <- rbind(id1,id2) %>% \n  distinct() \n\ncargo_vessel_edges <- vessel_location_match_hr %>% \n  select(vessel,cargo, name, city) %>% \n  distinct() %>%\n  group_by(vessel, cargo) %>%\n  rename(source = vessel, target = cargo)%>%\n  filter(source!=target) %>% \n  ungroup()\n\ncargo_vessel_graph <- tbl_graph(nodes = cargo_vessel_nodes,\n                       edges = cargo_vessel_edges,\n                       directed = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncargo_vessel_graph %>%\n  ggraph(layout = 'fr') +\n  geom_edge_link() +\n  geom_node_point() + \n  theme_graph()\n```\n:::\n\n\nFinding anomalies in vessel movement by comparing end time (calculated by dwell) with next time (the next time the vessel is detected at the next location).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nab_vessel_mvmt <- vessel_location %>%\n  mutate(time = ymd_hms(time)) %>% \n  mutate(next_time = ymd_hms(next_time)) %>% \n  mutate(end_time = ymd_hms(end_time)) %>% \n  filter(end_time != next_time) \n\nab_vessel_mvmt_agg <- ab_vessel_mvmt %>% \n  distinct() %>% \n  group_by(source) %>% \n  summarise(weights = n()) %>%\n  arrange(desc(weights))\nab_vessel_mvmt_agg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 × 2\n   source                  weights\n   <chr>                     <int>\n 1 City of Paackland          2893\n 2 City of South Paackland    2553\n 3 City of Lomark             2482\n 4 City of Himark             1721\n 5 City of Haacklee           1509\n 6 Cod Table                  1018\n 7 Nav C                       710\n 8 Exit East                   646\n 9 Wrasse Beds                 592\n10 Tuna Shelf                  517\n# ℹ 12 more rows\n```\n\n\n:::\n:::\n\n\n**Overview of Harbor Report**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistinct_harbor_report <- harbor_report_edges %>% \n  select(source,target,date) %>% \n  filter(source %in% unlist(fishing_vessel_list)) %>%\n  distinct() %>% \n  arrange(source, date) %>%\n  mutate(target = fct_infreq(target))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(distinct_harbor_report) +\n  geom_bar(aes(x = target))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n**Overview of Vessels Location by Transponder Ping**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder_location <- mc2_edges %>% \n  filter(event3 == \"TransponderPing\") %>%\n  filter(target %in% unlist(fishing_vessel_list)) %>%\n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %>% \n  select(source, target, time) %>%\n  mutate(source = fct_infreq(source))\n\nggplot(transponder_location) +\n  geom_bar(aes(x = source))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\nA quick comparison between the two bar chart, we can conclude that port activities for fishing vessels are highest at City of Paackland and least at City of Himark. Also, there is no fishing vessels that visits City of Port Grove.\n\n## 2.3 Examine the seasonal trends and anomalies in the port exit records\n\nWe examine the cargo_list and realised that there are some records that shows negative tonnage for their cargoes. This is abnormal as all cargoes should have positive qty_tons value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnegative_ton_cargo_by_city <- cargo_list %>% \n  filter(qty_tons <= 0) %>% \n  arrange(qty_tons) %>% \n  group_by(city) %>% \n  summarise(total_qty_ton_neg = sum(qty_tons)) %>% \n  arrange(total_qty_ton_neg)\n\npositive_ton_cargo_by_city <- cargo_list %>% \n  filter(qty_tons > 0) %>% \n  arrange(qty_tons) %>% \n  group_by(city) %>% \n  summarise(total_qty_ton_pos = sum(qty_tons)) %>% \n  arrange(desc(total_qty_ton_pos))\n\nnegative_ton_cargo_by_city \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  <chr>                               <dbl>\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n```\n\n\n:::\n\n```{.r .cell-code}\npositive_ton_cargo_by_city\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  city                    total_qty_ton_pos\n  <chr>                               <dbl>\n1 City of Paackland                  34653.\n2 City of Himark                     32839.\n3 City of Lomark                     23721.\n4 City of South Paackland            20790.\n5 City of Haacklee                   14988.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npositive_ton_cargo_by_city$city <- factor(positive_ton_cargo_by_city$city, \n                                           levels = rev(positive_ton_cargo_by_city$city[order(positive_ton_cargo_by_city$total_qty_ton_pos)]))\n\nggplot(positive_ton_cargo_by_city, aes(x = city)) +\n  geom_bar(aes(y = total_qty_ton_pos), \n           stat = \"identity\", \n           position = \"dodge\", fill = \"blue\", alpha = 0.6) +  # Positive quantities\n  labs(title = \"Quantities by City\",\n       x = \"\",\n       y = \"Total Quantity (tons)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\nThere seems to be suspicious activities going on at each cities when we look at the negative values in qty_ton.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnegative_ton_cargo_by_city\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  <chr>                               <dbl>\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n```\n\n\n:::\n:::\n\n\nNext, we will remove the negative quantity and then find the aggregated value by the type of fish, the city, and the date of transaction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_by_port_agg <- cargo_list %>%\n  distinct() %>%\n  filter(qty_tons > 0) %>% \n  group_by(name, city, date) %>%\n  summarise(total_qty_ton = sum(qty_tons)) %>%\n  ungroup() %>% \n  mutate(month = month(date, \n                       label = TRUE, \n                       abbr = TRUE))\n```\n:::\n\n\nSecondly, when we observe the heatmap, we also realised that the data only covers the month from Feb to Nov in year 2035.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- fish_by_port_agg  %>%\n  distinct() %>%\n  group_by(name,month) %>%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create a calendar heat map\ncreate_heatmap <- function(data, city, f) {\n  ggplot(data, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store heatmaps\nheatmaps <- list()\n\n# Iterate over each city\ncities <- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data <- fish_by_port_agg %>% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap <- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] <- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-66-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-66-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-66-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-66-5.png){width=672}\n:::\n:::\n\n\n## 2.3.1 **Understanding the types of fish that should not be in the market**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_fish_species <- mc2_nodes %>% \n  filter(entity3 == \"Region\") %>% \n  select(Name, fish_species_present, Activities, kind)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"species\", 1:max_elements) \n\nword_df <- as_tibble(word_df) %>% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %>% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %>% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %>% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %>% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %>%\n  mutate_at(vars(species1:species5), trimws)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nregion_fish_species <- region_fish_species %>%\n  cbind(word_df) \n  \nregion_fish_species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Name\n1           Cod Table\n2      Ghoti Preserve\n3         Wrasse Beds\n4           Nemo Reef\n5 Don Limpet Preserve\n6          Tuna Shelf\n                                                                                                  fish_species_present\n1                                             Cod/Gadus n.specificatae, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n2                       Wrasse/Labridae n.refert, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Offidiaa/Piscis osseus\n3                                             Wrasse/Labridae n.refert, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n4 Wrasse/Labridae n.refert, Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis\n5  Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Sockfish/Pisces foetida\n6                         Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Harland/Piscis sapidum\n                         Activities                kind species1 species2\n1                Commercial fishing      Fishing Ground      Cod Birdseye\n2     Research, Tourism, Recreation Ecological Preserve   Wrasse Beauvoir\n3                Commercial fishing      Fishing Ground   Wrasse Birdseye\n4               Recreation, Tourism Ecological Preserve   Wrasse     Tuna\n5               Recreation, Tourism Ecological Preserve     Tuna Birdseye\n6 Commercial fishing, Sport fishing      Fishing Ground     Tuna Birdseye\n  species3 species4 species5\n1 Beauvoir     <NA>     <NA>\n2  Helenaa Offidiaa     <NA>\n3 Beauvoir     <NA>     <NA>\n4 Birdseye Beauvoir  Helenaa\n5 Beauvoir  Helenaa Sockfish\n6 Beauvoir  Harland     <NA>\n```\n\n\n:::\n:::\n\n\n```         \n```\n\n**Visualising the Species presence in each Region**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order <- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\nFrom the above visualisation, we can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species would have fished illegal. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store heatmaps\nheatmaps <- list()\n\n# Iterate over each city\ncities <- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data <- fish_by_port_agg %>% \n    filter(city == c) %>% \n    filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\"))\n  \n  # Create the heatmap for the current city\n  heatmap <- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] <- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-70-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-70-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-70-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-70-5.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- fish_by_port_agg  %>% \n  filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\")) %>% \n  distinct() %>%\n  group_by(name,month) %>%\n  summarise(total_qty_ton = sum(total_qty_ton))\n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\nFrom this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively.\n\nProbable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish.\n\n## 3.0 Task 2\n\nDevelop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n## 3.1 Illegal fishing by SouthSeafood Express Corp\n\nSouthSeafood Express Corp operates two fishing vessels by the id of \"snappersnatcher7be\" and \"roachrobberdb6\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder_ping_edge <- mc2_edges %>% \n  filter(event3 == \"TransponderPing\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder_ping_edge_agg <-\n  transponder_ping_edge %>%\n  distinct() %>%\n  group_by(source, target, type) %>%\n  summarise(weights = n()) %>%\n  filter(source!=target) %>% \n  ungroup\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder_ping_edge_agg %>% \n  filter(target %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %>%\n  group_by(target) %>% \n  ggplot(aes(x=target, y=source,\n             size = weights)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsouthseafood_edge <- mc2_edges %>% \n  filter(event3 == \"TransponderPing\") %>% \n  filter(target %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %>% \n  arrange(target,time)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nssf_edges_agg <-\n  southseafood_edge %>%\n  distinct() %>%\n  group_by(source, target, type) %>%\n  summarise(weights = n()) %>%\n  filter(source!=target) %>% \n  ungroup\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nid1 <- ssf_edges_agg %>% \n  select(source) %>% \n  rename(id = source) \n\nid2 <- ssf_edges_agg %>% \n  select(target) %>% \n  rename(id = target)\n\nmc2_nodes1 <- rbind(id1,id2) %>% \n  distinct() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nssf_graph <- tbl_graph(nodes = mc2_nodes1,\n                       edges = ssf_edges_agg,\n                       directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a color column to nodes\nssf_graph <- ssf_graph %>%\n  activate(nodes) %>%\n  mutate(color = case_when(\n    id %in% c(\"snappersnatcher7be\", \"roachrobberdb6\") ~ \"Vessel\",\n    TRUE ~ \"Location\"\n  ))\n\n# Create the plot\nssf_graph %>% \n  activate(edges) %>%\n  arrange(desc(weights)) %>% \n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(color = \"\", \n                     linewidth = weights)) +\n  geom_node_point(aes(color = color, size = 10)) + \n  theme_graph() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    text = element_text(color = \"black\"))+\n  geom_node_text(aes(label = id), \n                 repel = TRUE, \n                 vjust = 1, \n                 hjust = 1,\n                 size = 3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n\n### 3.1.1 When and where did SouthSeafood Express Corp vessels perform their illegal fishing?\n\nSince only Snapper Snatcher appears to be operating in Ghoti Preserve, we will examine this fishing vessel more closely.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnapper_activities <- mc2_edges %>% \n  filter(event3 == \"TransponderPing\") %>% \n  filter(target %in% c(\"snappersnatcher7be\")) %>% \n  filter(source == \"Ghoti Preserve\") %>% \n  arrange(target,time) %>% \n  mutate(end_time = time + dwell) %>% \n  select(time, dwell, end_time)\nsnapper_activities\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 time      dwell            end_time\n1 2035-02-02 05:39:59 282000.853 2035-02-05 12:00:00\n2 2035-02-09 05:49:11 281448.765 2035-02-12 12:00:00\n3 2035-02-16 07:02:09 277070.841 2035-02-19 12:00:00\n4 2035-03-15 05:46:02   6410.348 2035-03-15 07:32:52\n```\n\n\n:::\n:::\n\n\nThere three instances (2,9 and 16 Feb) where Snapper Snatcher stayed at the Ghoti Preserve for over 3 days. These are the instances where SouthSeafood Express Corp's Snapper Snatcher conducted IUU Fishing in Ghoti Preserve.\n\n### 3.1.2 Visualising Vessel Trajectory\n\nIn the code chunk below, st_as_sf() of sf package is used to convert vessel_movement_data data.frame into sf point data.frame by using values in XCOORD and YCOORD columns. The output is an sf data.frame called vessel_movement_sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_data %>%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n```\n:::\n\n\nNext arrange() is used to sort the records according to the vessels’ name (i.e. target) and navigation time (i.e. time)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_sf %>%\n  arrange(target, time)\n```\n:::\n\n\nLastly, st_cast() of sf package is used to convert vessel_movement_sf from point features into linestring features called vessel_trajectory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory <- vessel_movement_sf %>%\n  group_by(target) %>%\n  summarize(do_union = FALSE) %>%\n  st_cast(\"LINESTRING\")\n```\n:::\n\n\n**Selecting SouthSeafood Express vessels**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_selected <- vessel_trajectory %>%\n  filter(target %in% c(\"snappersnatcher7be\", \"roachrobberdb6\"))\n```\n:::\n\n\nNext, appropriate functions of ggplot2 is used to plot the selected vessel trajectories by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = oceanus_geography) +\n  geom_sf(data = vessel_trajectory_selected, \n          aes(color = factor(target)), \n          size = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of SouthSeafood Express Vessels\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n\n## 4.0 Task 4\n\n**The Questions**:\n\n1.  How did fishing activity change after SouthSeafood Express Corp was caught?\n\n2.  What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\nIn order to understand the change in fishing activities, we first have to determine the date where SouthSeafood Express Corp was caught. We will use this timeline as the\n\nThe final activities of SouthSeafood's vessels are on 2035-05-16 (snappersnatcher7be) and 2035-05-16 (roachrobberdb6) according to the transponder pings. Hence, we can conclude that the SouthSeafood is caught for illegal fishing, and had ceased operating its fishing vessels since 2035-05-16.\n\n## 4.1 Changes in Commercial Fishing\n\nFirstly, we take a look at the species caught across the months (Feb to Nov 2035).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an overall Oceanus heat map for all types of fish\nfish_agg <- fish_by_port_agg  %>%\n  distinct() %>%\n  group_by(name,month) %>%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\noceanus_heatmap <- ggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal() +\n  geom_vline(xintercept = \"May\",color = 'red', linetype = 'dashed') +\n  annotate(\"text\", x = \"May\" , y = \"Offidiaa\", label = \"SouthSeafood caught\", angle = 90, vjust = -0.5, hjust = 0.5, color = \"red\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order <- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)\n\nspecies_plot <-ggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_heatmap / species_plot\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-88-1.png){width=576}\n:::\n:::\n\n\nFor recapitulation, we know that Sockfish, Offidiaa, and Helenaa are fish species that are unique to the three Preserves. From the two plots above, we can derive initial conclusion that there is an usual increase in Sockfish catch after SouthSeafood was caught in mid-May. We also see a minor increase in Helenaa between Jun to Aug, and later in Oct to Nov. The spike in Offidiaa catch begins in Sep and grows gradually to Nov.\n\nCombining the information above, we can make the following two hypothesis about the changes in fishing activities in Oceanus after SouthSeafood was caught:\n\n1.  The fishing vessels switched to Don Limpet Preserve for IUU fishing. Tell tale sign is the increase in Sockfish catch, which is species unique to Don Limpet Preserve. This also explains the slight increase in Helena catch from Jun.\n\n2.  The fishing vessels moved into Ghoti Preserves from Sep onwards for IUU fishing. Tell tale sign is the increase in Offidia catch from Sep, which is species unique to Ghoti Preserve.\n\nFor confirmation, we take a look at the changes to OVLS Transponder Ping, comparing the total pings to various Fishing Grounds and Preserves month by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder_ping_edge_long <- transponder_ping_edge %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %>% \n  mutate(month = month(time)) %>% \n  select(source, target, month) %>% \n  group_by(source, month) %>% \n  summarize(n = n()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder_ping_edge_long %>% \n  mutate(month = as.factor(month)) %>% \n  newggslopegraph(month,n, source,\n                Title = \"Changes in Visit Frequency\",\n                SubTitle = \"across Feb to Nov 2035\",\n                Caption = \"Prepared by: Liang Xiuhao\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n\nIn the line graph below, we observe that the overall fishing vessels activities in the fishing ground and preserves dropped.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage <- transponder_ping_edge %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %>%\n  mutate(month = month(time)) %>% \n  summarise(average = (n()/10))\n\ntransponder_ping_edge %>% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %>%\n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  mutate(month = month(time)) %>% \n  group_by(month) %>% \n  summarise(n = as.numeric(n())) %>%\n  ggplot(aes(x = month, y = n)) + \n  geom_line(color = \"blue\") +  \n  geom_point(size = 4, color = \"blue\") +\n  geom_text(aes(label = n), \n            vjust = -1,\n            size = 3) +\n  labs(title = \"Visit Frequency to All Fishing Grounds and Preserves by Month\",\n       x = \"Month\",\n       y = \"Frequency\") +\n  geom_hline(average, \n             yintercept = as.numeric(average), \n             color=\"black\",\n             linetype = 6) +\n  geom_point(x = 5, y = 13366,\n             size = 4, color = \"red\") +\n  geom_text(aes(x = 5, y = 13366, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = -0.2,\n            size = 3) +\n  geom_text(aes(x = 4.5, y = 12000, label = \"Monthly Average = 11854\"),\n            color = \"black\",\n            size = 3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n\nDerive monthly transponder ping:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_transponder_ping <- transponder_ping_edge %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %>% \n  mutate(month = month(time)) %>% \n  select(source, target, month) %>% \n  group_by(source, month) %>% \n  summarize(n = n()) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_transponder_ping$month <- factor(monthly_transponder_ping$month)\nmonthly_transponder_ping$source <- factor(monthly_transponder_ping$source,\n                                             levels = c(\"Ghoti Preserve\", \n                                                        \"Nemo Reef\",\n                                                        \"Don Limpet Preserve\",\n                                                        \"Cod Table\",\n                                                        \"Wrasse Beds\",\n                                                        \"Tuna Shelf\"))\n\nhline.data <- monthly_transponder_ping %>% \n  group_by(source) %>%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_transponder_ping , aes(x = month, \n                                      y = n, \n                                      group = source, \n                                      color = source)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ source, scales = \"free_y\") +  # Facet by 'source'\n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"SouthSeafood caught\"), \n            hjust = 1.5, vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-93-1.png){width=960}\n:::\n:::\n\n\nFrom the plot above, we can see that after SouthSeafood was caught in mid-May, there is a drop in activities for all the fishing grounds and preserves immediately after mid-May, except for the increase in Don Limpet Preserve, from 1 in Mar and Jun to 2 observations in Aug.\n\nLet's observe for month to month if the dwell time increase for Don Limpet Preserve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndon_monthly_transponder_ping <- transponder_ping_edge %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  select(source, dwell, time) %>% \n  mutate(month = month(time)) %>% \n  filter(source == \"Don Limpet Preserve\") %>%\n  group_by(month) %>% \n  summarise(dwell_total = sum(dwell)) %>%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Don Limpet by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 6, y = 7500, \n            angle = 15,\n            hjust = -0.3, vjust = -1.5, \n            color = \"black\", size = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnemo_monthly_transponder_ping <- transponder_ping_edge %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  select(source, dwell, time) %>% \n  mutate(month = month(time)) %>% \n  filter(source == \"Nemo Reef\") %>%\n  group_by(month) %>% \n  summarise(dwell_total = sum(dwell)) %>%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Nemo Reef by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 5, y = 12500000, \n            angle = -15,\n            hjust = 0.3, \n            color = \"black\", size = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nghoti_monthly_transponder_ping <- transponder_ping_edge %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  select(source, dwell, time) %>% \n  mutate(month = month(time)) %>% \n  filter(source == \"Ghoti Preserve\") %>%\n  group_by(month) %>% \n  summarise(dwell_total = sum(dwell)) %>%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Ghoti by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 8, y = 5000000, \n            angle = -5, \n            color = \"black\", size = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnemo_monthly_transponder_ping/ghoti_monthly_transponder_ping\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-97-1.png){width=576}\n:::\n:::\n\n\nFrom the above plots, we observe that for Nemo Reef and Ghoti Preserve, the trend is downwards for the amount of time spent by the fishing vessels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndon_monthly_transponder_ping\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-98-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfishing_vessels_in_don <- transponder_ping_edge %>% \n  filter(source == \"Don Limpet Preserve\") %>% \n  filter(target %in% unlist(fishing_vessel_list)) %>% \n  select(target, dwell, date_added, time) %>% \n  mutate(end_time = dwell + time) %>% \n  arrange(time)\nfishing_vessels_in_don\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   target    dwell          date_added                time\n1    yellowperchpiratec59 7413.772 2035-03-04 16:50:54 2035-03-03 16:50:54\n2 arcticgraylingangler094 5037.287 2035-06-20 06:00:00 2035-06-18 06:00:00\n3    whitefishwrangler7df 6149.014 2035-06-20 06:00:00 2035-08-18 06:00:00\n4       bluegillbandita5f 4571.235 2035-08-29 06:00:00 2035-08-27 06:00:00\n             end_time\n1 2035-03-03 18:54:28\n2 2035-06-18 07:23:57\n3 2035-08-18 07:42:29\n4 2035-08-27 07:16:11\n```\n\n\n:::\n:::\n\n\nThere are only 4 records of visits through the OVLS to Don Limpet, once in Mar and Jun, for about 1.5 to 2hrs each, and another 2 in Aug, for about 1.25 to 1.75 hrs each. These record is high incongruent to the growing number of Sockfish that are found in the delivery report from May onwards.\n\n### 4.2 What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}