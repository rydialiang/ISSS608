[
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html",
    "title": "Hands On Exercise 9",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\n\n\n\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\n\nShow the code\npacman::p_load(plotly, ggtern, tidyverse)\n\n\n\n\n\n\n\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n\nShow the code\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n\n\n\n\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n\nShow the code\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)\n\n\n\n\n\n\n\n\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n\nShow the code\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n\nShow the code\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview",
    "title": "Hands On Exercise 9",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages",
    "title": "Hands On Exercise 9",
    "section": "",
    "text": "For this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\n\nShow the code\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#data-preparation",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#data-preparation",
    "title": "Hands On Exercise 9",
    "section": "",
    "text": "For the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n\nShow the code\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n\n\n\n\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n\nShow the code\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#plotting-ternary-diagram-with-r",
    "title": "Hands On Exercise 9",
    "section": "",
    "text": "Use ggtern() function of ggtern package to create a simple ternary plot.\n\n\nShow the code\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n\nShow the code\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-1",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-1",
    "title": "Hands On Exercise 9",
    "section": "6.1 Overview",
    "text": "6.1 Overview\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-1",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-1",
    "title": "Hands On Exercise 9",
    "section": "6.2 Installing and Launching R Packages",
    "text": "6.2 Installing and Launching R Packages\nBefore you get started, you are required to open a new Quarto document. Keep the default html authoring format.\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\n\nShow the code\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#importing-and-preparing-the-data-set",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#importing-and-preparing-the-data-set",
    "title": "Hands On Exercise 9",
    "section": "6.3 Importing and Preparing The Data Set",
    "text": "6.3 Importing and Preparing The Data Set\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n6.3.1 Importing Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\n\nShow the code\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#building-correlation-matrix-pairs-method",
    "title": "Hands On Exercise 9",
    "section": "6.4 Building Correlation Matrix: pairs() method",
    "text": "6.4 Building Correlation Matrix: pairs() method\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\n6.4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\nShow the code\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nShow the code\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\n\n6.4.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\nShow the code\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chunk below.\n\n\nShow the code\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\n6.4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\n\nShow the code\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands On Exercise 9",
    "section": "6.5 Visualising Correlation Matrix: ggcormat()",
    "text": "6.5 Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n6.5.1 The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\n\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\nShow the code\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#building-multiple-plots",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#building-multiple-plots",
    "title": "Hands On Exercise 9",
    "section": "6.6 Building multiple plots",
    "text": "6.6 Building multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\n\nShow the code\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands On Exercise 9",
    "section": "6.7 Visualising Correlation Matrix using corrplot Package",
    "text": "6.7 Visualising Correlation Matrix using corrplot Package\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\n6.7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\n\nShow the code\nwine.cor &lt;- cor(wine[, 1:11])\n\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\nShow the code\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n6.7.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"circle\") \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"square\") \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"number\") \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"shade\") \n\n\n\n\n\n\n\n\n\n\n\n6.7.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"shade\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"shade\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.pos = \"lt\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.cex = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         cl.pos = \"r\")\n\n\n\n\n\n\n\n\n\n\n\n6.7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\nShow the code\ncorrplot.mixed(wine.cor, \n               lower = \"shade\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\n\nShow the code\ncorrplot.mixed(wine.cor, \n               lower = \"shade\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n6.7.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\n\nShow the code\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nShow the code\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\n6.7.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\nShow the code\ncorrplot.mixed(wine.cor, \n               lower = \"shade\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n6.7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"shade\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n\n\n\n\n\n\n\n\n\nIntroduction to “scatterPlotMatrix”"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#r-packages",
    "title": "Hands On Exercise 9",
    "section": "7.1 R packages",
    "text": "7.1 R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-2",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-2",
    "title": "Hands On Exercise 9",
    "section": "14.1 Overview",
    "text": "14.1 Overview\nHeatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-2",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-2",
    "title": "Hands On Exercise 9",
    "section": "14.2 Installing and Launching R Packages",
    "text": "14.2 Installing and Launching R Packages\nBefore you get started, you are required to open a new Quarto document. Keep the default html as the authoring format.\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\n\nShow the code\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#importing-and-preparing-the-data-set-1",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#importing-and-preparing-the-data-set-1",
    "title": "Hands On Exercise 9",
    "section": "14.3 Importing and Preparing The Data Set",
    "text": "14.3 Importing and Preparing The Data Set\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\n14.3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\n\nShow the code\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\nThe output tibbled data frame is called wh.\n\n\n14.3.2 Preparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below.\n\n\nShow the code\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#static-heatmap",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#static-heatmap",
    "title": "Hands On Exercise 9",
    "section": "14.4 Static Heatmap",
    "text": "14.4 Static Heatmap\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\n14.4.1 heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\n\nShow the code\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\n\nShow the code\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\n\nShow the code\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#creating-interactive-heatmap",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#creating-interactive-heatmap",
    "title": "Hands On Exercise 9",
    "section": "14.5 Creating Interactive Heatmap",
    "text": "14.5 Creating Interactive Heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n14.5.1 Working with heatmaply\n\n\nShow the code\nheatmaply(mtcars)\n\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n14.5.2 Data trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n14.5.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n14.5.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n14.5.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nShow the code\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n14.5.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\n14.5.4 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\n14.5.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nShow the code\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nShow the code\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\n14.5.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\n14.5.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\n14.5.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-3",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-3",
    "title": "Hands On Exercise 9",
    "section": "15.1 Overview",
    "text": "15.1 Overview\nParallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-3",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-3",
    "title": "Hands On Exercise 9",
    "section": "15.2 Installing and Launching R Packages",
    "text": "15.2 Installing and Launching R Packages\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\n\nShow the code\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#data-preparation-1",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#data-preparation-1",
    "title": "Hands On Exercise 9",
    "section": "15.3 Data Preparation",
    "text": "15.3 Data Preparation\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\n\nShow the code\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands On Exercise 9",
    "section": "15.4 Plotting Static Parallel Coordinates Plot",
    "text": "15.4 Plotting Static Parallel Coordinates Plot\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\n15.4.1 Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n15.4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n15.4.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\n15.4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\n15.4.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands On Exercise 9",
    "section": "15.5 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "15.5 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n15.5.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\n\nShow the code\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(1:7)) \nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\n15.5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\n\nShow the code\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\n15.5.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.\n\n\nShow the code\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n15.5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\n\nShow the code\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#references",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#references",
    "title": "Hands On Exercise 9",
    "section": "15.6 References",
    "text": "15.6 References\n\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-4",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#overview-4",
    "title": "Hands On Exercise 9",
    "section": "16.1 Overview",
    "text": "16.1 Overview\nIn this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-4",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#installing-and-launching-r-packages-4",
    "title": "Hands On Exercise 9",
    "section": "16.2 Installing and Launching R Packages",
    "text": "16.2 Installing and Launching R Packages\nBefore we get started, you are required to check if treemap and tidyverse pacakges have been installed in you R.\n\n\nShow the code\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#data-wrangling",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#data-wrangling",
    "title": "Hands On Exercise 9",
    "section": "16.3 Data Wrangling",
    "text": "16.3 Data Wrangling\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n16.3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\n\nShow the code\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\nThe output tibble data.frame is called realis2018.\n\n\n16.3.2 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n16.3.3 Grouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\n\nShow the code\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\n16.3.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\n\nShow the code\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#the-output-tibble-data.frame-is-called-realis2018.",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#the-output-tibble-data.frame-is-called-realis2018.",
    "title": "Hands On Exercise 9",
    "section": "The output tibble data.frame is called realis2018.",
    "text": "The output tibble data.frame is called realis2018.\n\n16.3.2 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n16.3.3 Grouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\n\nShow the code\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\n16.3.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\n\nShow the code\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#designing-treemap-with-treemap-package",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#designing-treemap-with-treemap-package",
    "title": "Hands On Exercise 9",
    "section": "16.4 Designing Treemap with treemap Package",
    "text": "16.4 Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n16.4.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\n\nShow the code\nrealis2018_selected &lt;- realis2018_summarised %&gt;%   filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\n16.4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n16.4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\n16.4.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n16.4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\n16.4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n16.4.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n16.4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n16.4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#designing-treemap-using-treemapify-package",
    "title": "Hands On Exercise 9",
    "section": "16.5 Designing Treemap using treemapify Package",
    "text": "16.5 Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n16.5.1 Designing a basic treemap\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\n16.5.2 Defining hierarchy\nGroup by Planning Region\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\nAdding boundary line\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on Exercise/Hands-on_Ex09/Hands-on_Ex09.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands On Exercise 9",
    "section": "16.6 Designing Interactive Treemap using d3treeR",
    "text": "16.6 Designing Interactive Treemap using d3treeR\n\n16.6.1 Installing d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\n\nShow the code\ninstall.packages(\"devtools\")\n\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below\n\n\n\nShow the code\nlibrary(devtools)\n# binstall_github(\"timelyportfolio/d3treeR\")\n\n\n\nNow you are ready to launch d3treeR package\n\n\n\nShow the code\nlibrary(d3treeR)\n\n\n\n\n16.6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\n\nShow the code\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\n\nShow the code\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny.\n\n\n\n\nFor the purpose of this hands-on exercise, the following R packages will be used.\n\n\nShow the code\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse, svglite)\n\n\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.\n\n\n\n\n\n\nFor the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n\n\nIn the code chunk below, odbcConnectAccess() of RODBC package is used used to import a database query table into R.\n\n\nShow the code\n# library(RODBC)\n# con &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\n# coffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\n# write_rds(coffeechain, \"data/CoffeeChain.rds\")\n# odbcClose(con)\n\n\nNote: Before running the code chunk, you need to change the R system to 32bit version. This is because the odbcConnectAccess() is based on 32bit and not 64bit\n\n\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\n\nShow the code\ncoffeechain &lt;- read_rds(\"data/rds/CoffeeChain.rds\")\n\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\n\nShow the code\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below is used to plot the bullet charts using ggplot2 functions.\n\n\nShow the code\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot sparklines by using ggplot2.\n\n\n\n\nShow the code\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\n\nThe code chunk below is used to compute the minimum, maximum and end othe the month sales.\n\n\nShow the code\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\n\nShow the code\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\n\nThe code chunk used.\n\n\nShow the code\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to create static information dashboard by using gt and gtExtras packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\n\n\nIn this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\n\nShow the code\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.\n\n\nShow the code\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n\nIt is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.\n\n\nShow the code\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\n\n\nShow the code\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, calculate summary statistics by using the code chunk below.\n\n\nShow the code\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\n\n\nNext, use the code chunk below to add the statistics on the table.\n\n\nShow the code\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n\n\nShow the code\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\n\n\nShow the code\nsales_data = left_join(sales, spark)\n\n\n\n\n\n\n\nShow the code\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\n\nShow the code\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\n\n\nShow the code\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\n\n\nShow the code\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\nIn order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.\n\n\nShow the code\n# remotes::install_github(\"timelyportfolio/dataui\")\n\n\n\n\nShow the code\nlibrary(dataui)\n\n\n\n\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.\n\n\nShow the code\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\n\nShow the code\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below statline argument is used to show the mean line.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead adding reference line, bandline can be added by using the bandline argument.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "For the purpose of this hands-on exercise, the following R packages will be used.\n\n\nShow the code\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse, svglite)\n\n\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#importing-microsoft-access-database",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#importing-microsoft-access-database",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "For the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n\n\nIn the code chunk below, odbcConnectAccess() of RODBC package is used used to import a database query table into R.\n\n\nShow the code\n# library(RODBC)\n# con &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\n# coffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\n# write_rds(coffeechain, \"data/CoffeeChain.rds\")\n# odbcClose(con)\n\n\nNote: Before running the code chunk, you need to change the R system to 32bit version. This is because the odbcConnectAccess() is based on 32bit and not 64bit\n\n\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\n\nShow the code\ncoffeechain &lt;- read_rds(\"data/rds/CoffeeChain.rds\")\n\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\n\nShow the code\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below is used to plot the bullet charts using ggplot2 functions.\n\n\nShow the code\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "In this section, you will learn how to plot sparklines by using ggplot2.\n\n\n\n\nShow the code\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\n\nThe code chunk below is used to compute the minimum, maximum and end othe the month sales.\n\n\nShow the code\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\n\nShow the code\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\n\nThe code chunk used.\n\n\nShow the code\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "In this section, you will learn how to create static information dashboard by using gt and gtExtras packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\n\n\nIn this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\n\nShow the code\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "Before we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.\n\n\nShow the code\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n\nIt is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.\n\n\nShow the code\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\n\n\nShow the code\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, calculate summary statistics by using the code chunk below.\n\n\nShow the code\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\n\n\nNext, use the code chunk below to add the statistics on the table.\n\n\nShow the code\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n\n\nShow the code\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\n\n\nShow the code\nsales_data = left_join(sales, spark)\n\n\n\n\n\n\n\nShow the code\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\n\nShow the code\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\n\n\nShow the code\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\n\n\nShow the code\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "href": "Hands-on Exercise/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "title": "Hands On Exercise 10",
    "section": "",
    "text": "In this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\nIn order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.\n\n\nShow the code\n# remotes::install_github(\"timelyportfolio/dataui\")\n\n\n\n\nShow the code\nlibrary(dataui)\n\n\n\n\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.\n\n\nShow the code\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\n\nShow the code\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below statline argument is used to show the mean line.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead adding reference line, bandline can be added by using the bandline argument.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.\n\n\nShow the code\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Mini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\nThe details of the mini challenge can be found here.\n\n\n\nThis visualisation project is created for the fulfillment of take home exercise 3 as part of the course assessment for the Visual Analytics module taught by Prof. T.S. Kam.\nJump straight to final product for this Take Home Exercise 3 - Mini Challenge 2: Task 4 here. Only Task 4 is considered as a complete set of write up. The rest of the Task 1 and 2 are still work in progress by the author at the point of submission on 9 Jun 2024."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#mini-challenge-2-creating-signatures-for-geo-temporal-patterns",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#mini-challenge-2-creating-signatures-for-geo-temporal-patterns",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Mini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\nThe details of the mini challenge can be found here."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#foreword-by-the-author",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#foreword-by-the-author",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "This visualisation project is created for the fulfillment of take home exercise 3 as part of the course assessment for the Visual Analytics module taught by Prof. T.S. Kam.\nJump straight to final product for this Take Home Exercise 3 - Mini Challenge 2: Task 4 here. Only Task 4 is considered as a complete set of write up. The rest of the Task 1 and 2 are still work in progress by the author at the point of submission on 9 Jun 2024."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3",
    "section": "1.1 Loading R Packages",
    "text": "1.1 Loading R Packages\n\n\nShow the code\npacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf,\n               patchwork, CGPfunctions,\n               ggHoriPlot, plotly,ggridges,\n               ggdist, ggiraph)\n\n\npackage 'ggraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\user\\AppData\\Local\\Temp\\RtmpuwCsqh\\downloaded_packages"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-the-data",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-the-data",
    "title": "Take Home Exercise 3",
    "section": "1.2 Loading the Data",
    "text": "1.2 Loading the Data\nLoading the .json data using jsonlite package.\n\n\nShow the code\nmc2_data &lt;- fromJSON(\"data/MC2/mc2.json\")\n\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\n1.2.1 Loading the Geographical Data\n\n\nShow the code\noceanus_geography = st_read(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\") %&gt;%\n  st_transform(crs = 4326)\n\n\nReading layer `Oceanus Geography' from data source \n  `C:\\rydialiang\\ISSS608\\Take-home Exercise\\Take-home_Ex03\\data\\MC2\\Oceanus Information\\Oceanus Geography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n\n\n\n\nShow the code\nglimpse(oceanus_geography)\n\n\nRows: 29\nColumns: 8\n$ Name                 &lt;chr&gt; \"Suna Island\", \"Thalassa Retreat\", \"Makara Shoal\"…\n$ Description          &lt;chr&gt; \"Large island of Oceanus\", \"Smaller island of Oce…\n$ X.note               &lt;chr&gt; \"Suna is 'sand' or 'gritty' in Japanese\", \"Thalas…\n$ type                 &lt;chr&gt; \"Entity.Location.Region\", \"Entity.Location.Region…\n$ X.Kind               &lt;chr&gt; \"Island\", \"Island\", \"Island\", \"Island\", \"Fishing …\n$ Activities           &lt;list&gt; \"Residential\", \"Residential\", \"Recreation\", &lt;\"To…\n$ fish_species_present &lt;list&gt; &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;\"Cod/Gadus n.specificatae\", \"Bi…\n$ geometry             &lt;GEOMETRY [°]&gt; MULTIPOLYGON (((-166.0111 3..., MULTIPOL…\n\n\n\n\nShow the code\nwrite_rds(oceanus_geography, \n  \"data/rds/oceanus_geography.rds\")\n\n\nImporting Geographical Data in ESRI shapefile format\n\n\nShow the code\noceanus_locations &lt;- st_read(dsn = \"data/MC2/shp\",\n  layer = \"Oceanus Geography\")\n\n\nReading layer `Oceanus Geography' from data source \n  `C:\\rydialiang\\ISSS608\\Take-home Exercise\\Take-home_Ex03\\data\\MC2\\shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n\n\n\n\nShow the code\nglimpse(oceanus_locations)\n\n\nRows: 27\nColumns: 8\n$ Name       &lt;chr&gt; \"Haacklee\", \"Port Grove\", \"Lomark\", \"Himark\", \"Paackland\", …\n$ Descriptio &lt;chr&gt; NA, NA, NA, NA, NA, \"Adimistrative seat of Oceanus\", NA, NA…\n$ X.note     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Activities &lt;chr&gt; \"Tourism,Local shipping\", \"Tourism,Research\", \"Deep sea fis…\n$ type       &lt;chr&gt; \"Entity.Location.City\", \"Entity.Location.City\", \"Entity.Loc…\n$ X.Kind     &lt;chr&gt; \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"bu…\n$ fish_speci &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POINT [°]&gt; POINT (-165.6908 39.03215), POINT (-165.8855 39.10005…\n\n\n\n\nShow the code\nggplot(data = oceanus_locations) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nwrite_rds(oceanus_locations, \n  \"data/rds/oceanus_locations.rds\")\n\n\n\n\n1.2.2 Wrangling of Geographical Data\nIn the code chunk below, st_coordinate() of sf package is used to extract coordinates from oceanus_locations sf data.frame.\n\n\nShow the code\ncoords &lt;- st_coordinates(oceanus_locations)\n\n\nNext, code chunk below is used to drop the geometry column of oceanus_locations of sf data.frame by using st_drop_geometry() of sf package and save the output into a new data.frame called oceanus_locations_df.\n\n\nShow the code\noceanus_locations_df &lt;- oceanus_locations %&gt;%\n  st_drop_geometry()\n\n\nThen, the code chunk below is to append the x- and y-coodinate values from coords list into the XCOORD and YCOORD columns of oceanus_locations_df respectively.\n\n\nShow the code\noceanus_locations_df$XCOORD &lt;- coords[, \"X\"]\noceanus_locations_df$YCOORD &lt;- coords[, \"Y\"]\n\n\nLastly, the code chunk below is used to tidy OceanusLocations_df by selecting the necessary columns only and at the same time, rename X.Kind to Loc_Type.\n\n\nShow the code\noceanus_locations_df &lt;- oceanus_locations_df %&gt;%\n  select(Name, X.Kind, XCOORD, YCOORD) %&gt;%\n  rename(loc_type = X.Kind, loc_short = Name)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-edges",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-edges",
    "title": "Take Home Exercise 3",
    "section": "1.3 Wrangling and tidying edges",
    "text": "1.3 Wrangling and tidying edges\n\n1.3.1 Extracting edges\nFirst, we extract only distinct edges from the tibble links data.frame of mc2_data and save it as a tibble data.frame called mc2_edges.\n\n\nShow the code\nmc2_edges &lt;- mc2_data$links %&gt;% \n  distinct()\n\n\nNext, glimpse() of dplyr will be used to reveal the structure of mc2_edges tibble data.table.\n\n\nShow the code\nglimpse(mc2_edges)\n\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;chr&gt; \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\nFrom the table above, we can identify some issues with the data:\n\nThe columns with date data type are all in character format.\nSome columns have names that starts with “_”. These need to be rename to avoid coding issues.\n\n\n\n1.3.2 Correcting the date data type with lubridate()\n\n\nShow the code\nmc2_edges$time &lt;- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` &lt;- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` &lt;- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date &lt;- as_datetime(mc2_edges$date)\n\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\n\nShow the code\nglimpse(mc2_edges)\n\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;dttm&gt; 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` &lt;dttm&gt; 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n1.3.3 Changing field name\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\nShow the code\nmc2_edges &lt;- mc2_edges %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\n1.3.4 Splitting words in type column\nThe code chunk below combined the following steps:\n\nSplitting the words by “.” - after observing that the format for type is as such: “Event.TransportEvent.TransponderPing”\nThe max(lengths(word_list)) will be used to find the maximum number of elements in any split.\nApply function(x) to pad shorter splits with NA values to make them all the same length.\nCreate word_df and changing column names to event1 etc.\nConvert word_df from matrix into tibble data.frame, and checks its class.\nAppend word_df to mc2_edges tibble data.frame.\nSaving mc2_edges into R rds format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\n\nShow the code\nword_list &lt;- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"event\", 1:max_elements)\n\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(event2, event3)\nclass(word_df)\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nShow the code\nmc2_edges &lt;- mc2_edges %&gt;%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-nodes",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-nodes",
    "title": "Take Home Exercise 3",
    "section": "1.4 Wrangling and tidying nodes",
    "text": "1.4 Wrangling and tidying nodes\n\n1.4.1 Extracting nodes\nThe code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\n\nShow the code\nmc2_nodes &lt;- as_tibble(mc2_data$nodes) %&gt;%\n  distinct()\n\n\nNext, take a glimpse() to understand the data structure.\n\n\nShow the code\nglimpse(mc2_nodes)\n\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for type column issues we discussed earlier, two additional data issues can be observed. They are:\n\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data.\nSome values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.\n\n\n1.4.2 Correcting the date data type with lubridate()\nCorrect the date data type and take a glimpse() to confirm changes.\n\n\nShow the code\nmc2_nodes$`_last_edited_date` &lt;- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` &lt;- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date &lt;- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;dttm&gt; 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  &lt;dttm&gt; 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n1.4.3 Changing field name\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\nShow the code\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\n1.4.4 Splitting words in type column\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R rds format yet, as there are more works to be done to clean up the dataframe.\n\n\nShow the code\nword_list &lt;- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"entity\", 1:max_elements)\n\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(entity2, entity3,entity4)\nclass(word_df)\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nShow the code\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  cbind(word_df)\n\n\n\n\n1.4.5 Tidying text field\nUsing mutate() of dplyr and gsub() of Base R to tidy up the values in the cell. Essentially, the unwanted characters like c, (, ), and \\ are removed by substituting with empty value \"\" for both Activities and fish_species_present columns. What is left in the columns will be characters separated by ,.\n\n\nShow the code\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %&gt;% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %&gt;%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities))\n\n\n\n\nShow the code\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %&gt;% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %&gt;%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\nmc2_nodes$entity3[5342] = \"Ferry_Cargo\"\nmc2_nodes$entity3[5461] = \"Ferry_Cargo\"\nmc2_nodes$entity3[5332] = \"Ferry_Passenger\"\nmc2_nodes$entity3[5452] = \"Ferry_Passenger\"\nmc2_nodes$entity3[5484] = \"Ferry_Passenger\"\n\n\nLastly, we will save the tidied mc2_nodes\n\n\nShow the code\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#processing-nodes-and-edges-data",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#processing-nodes-and-edges-data",
    "title": "Take Home Exercise 3",
    "section": "1.5 Processing nodes and edges data",
    "text": "1.5 Processing nodes and edges data\n\n1.5.1 Understanding the nodes and edges data\nIn this section, we will gain more insights from the existing data. The table below summarises the type of data we can glean from the nodes and edges:\n\n\n\n\n\n\n\n\n\nmc2_nodes Type\nEntity\nDetails\nRelevant Fields\n\n\n\n\nCommodity\nFish\n10 x Fish Species\n\n\nname (fish species common name/scientific name\nid (species)\n\n\n\nLocation\n\nCity\nPoint\nRegion\n\n24 x Locations:\n6 x City\n\n12 x Point\n\n6 x Region\n\n3 x Ecological Preserves\n3 x Fishing Ground\n\n\n\nid ( City Name)\nName (City short name)\ndescription\nactivities\nkind\nentity3 (type of location)\n\n\n\nDocument\nDelivery Report\n5,307 x Cargoes\n\nid\nqty_tons\ndate\n\n\n\nVessels\n\nFishing Vessels\nCargo Vessels\nFerry Cargo\nFerry Passenger\nResearch\nTour\nOthers\n\n296 x Vessels\n\n178 x Fishing Vessels\n100 x Cargo Vessels\n2 x Cargo Ferry\n3 x Passenger Ferry\n2 x Research Vessels\n6 x Tour Vessels\n5 x Other Vessels\n\n\nid\nName\nflag_country\ncompany\ntonnage\nlength_overall\nentity3 (type of vessels)\n\n\n\n\n\n\n\n\n\n\n\n\nmc2_edges type\nCount (n)\nRelevant Fields\n\n\n\n\nTransponder Ping\n258,542 x Pings\n\ntime\ndwell\nsource (locations)\ntarget (vessels)\n\n\n\nHarbor Report\n 2,487 x Sightings\n\nsource (vessels)\ntarget (city)\ndate\n\n\n\nImport Record\n10,614 x Records (matching 5,307 unique cargoes to fish species and city)\n\nsource (cargo)\ntarget (fish species & city)\ndate\n\n\n\n\n\n\n1.5.2 Extracting Relevant Information for each nodes data\nIn this section, we will extract the relevant columns with intuitive names. From the analysis above, we will have 4 nodes data and 3 edges data as below:\n\n\n\n\n\n\nNodes and Edges Data\n\n\n\nNodes:\n\nfish_nodes: all types of fish species in the data set\nlocation_nodes: all locations in the data set\ncargo_nodes: all cargoes in the data set\nvessel_nodes: all vessels in the data set\n\nEdges:\n\nvessel_movement: vessel movement, location, time and dwell\nharbor_report: date and vessel that dock in the harbor (city)\nimport_record: date and location of transaction of cargoes\n\n\n\nfish_nodes\n\n\nShow the code\nfish_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 == \"Commodity\") %&gt;% \n  select(name, id) %&gt;% \n  mutate(name = str_replace(name, \"/.*\", \"\")) %&gt;% \n  rename(fish = name, species = id)\n\n\nlocation_nodes\n\n\nShow the code\nlocation_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 == \"Location\" ) %&gt;% \n  select(id, Name, Description, Activities, kind, entity3) %&gt;% \n  rename(loc = id, loc_short = Name, type = entity3)\n\n\ncargo_nodes\n\n\nShow the code\ncargo_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"DeliveryReport\") %&gt;% \n  select(id,qty_tons,date) %&gt;% \n  rename(cargo = id, cargo_delivery_date = date)\n\n\nvessel_nodes\n\n\nShow the code\nvessel_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 == \"Vessel\") %&gt;% \n  select(id, Name, flag_country, \n         company, tonnage, \n         length_overall, entity3) %&gt;% \n  rename(vessel = id, vessel_name = Name, type = entity3)\n\n\n\n\n1.5.3 Consolidating relevant information in the edges data\nvessel_movement\nWe will add in oceanus_location and vessel_nodes data together with the Transponder Ping data, by using left_join .\n\n\nShow the code\nvessel_movement &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;% \n  select(time, dwell, source, target) %&gt;% \n  rename(loc= source, vessel = target )\n\nvessel_movement$loc_short &lt;- vessel_movement$loc\n\nvessel_movement &lt;- vessel_movement %&gt;%   \n  mutate(loc_short = gsub(\"^City of\", \"\",loc_short)) %&gt;%\n  mutate(loc_short = gsub(\"^\\\\s+\", \"\",loc_short)) %&gt;% \n  left_join(oceanus_locations_df) %&gt;% \n  left_join(vessel_nodes)\n\n\nharbor_report\nSimilarly, we will add in vessel_nodes data into the harbor_report using left_join.\n\n\nShow the code\nharbor_report &lt;- mc2_edges %&gt;% \n  filter(event2 ==\"HarborReport\") %&gt;% \n  select(source, target, date) %&gt;% \n  rename(vessel = source, city = target)\n\nharbor_report &lt;- harbor_report %&gt;% \n  left_join(vessel_nodes, by = \"vessel\")\n\n\nimport_record\nCombining fish_nodes and cargo_nodes data into import_record using left_join.\n\n\nShow the code\nimport_record &lt;- mc2_edges %&gt;% \n  filter(event2 == \"Transaction\") %&gt;% \n  select(source, target, date)\n\n\nimport_city &lt;- import_record %&gt;% \n  select(source,target) %&gt;% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  rename(city = target)\n\nimport_cargo &lt;- import_record %&gt;% \n  select(source,target) %&gt;% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  rename(species = target)\n\nimport_record &lt;- import_city %&gt;% \n  left_join(import_cargo) %&gt;% \n  rename(cargo = source) %&gt;% \n  left_join(fish_nodes) %&gt;% \n  left_join(cargo_nodes) %&gt;% \n  select(fish, species, city, cargo, qty_tons, cargo_delivery_date)\n\n\nBefore we move on to exploring the data, we will save the 4 nodes and 3 edges as R rds format in the data/rds folder:\n\n\nShow the code\nwrite_rds(fish_nodes, \"data/rds/fish_nodes.rds\")\nwrite_rds(location_nodes, \"data/rds/location_nodes.rds\")\nwrite_rds(cargo_nodes, \"data/rds/cargo_nodes.rds\")\nwrite_rds(vessel_nodes, \"data/rds/vessel_nodes.rds\")\nwrite_rds(vessel_movement, \"data/rds/vessel_movement.rds\")\nwrite_rds(harbor_report, \"data/rds/harbor_report.rds\")\nwrite_rds(import_record, \"data/rds/import_record.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#exploratory-data-analysis",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#exploratory-data-analysis",
    "title": "Take Home Exercise 3",
    "section": "1.6 Exploratory Data Analysis",
    "text": "1.6 Exploratory Data Analysis\n\n1.6.1 Understanding the Fish Species in each Region\nBefore we can detect anomalies in the for fishing activities, we first need to understand where are the fish species found in each Region.\n\n\nShow the code\nregion_fish_species &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"Region\") %&gt;% \n  select(Name, fish_species_present, Activities, kind) \n\n\n\n\nShow the code\nword_list &lt;- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"species\", 1:max_elements) \n\nword_df &lt;- as_tibble(word_df) %&gt;% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %&gt;% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %&gt;% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %&gt;% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %&gt;% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %&gt;%\n  mutate_at(vars(species1:species5), trimws)\n\nregion_fish_species &lt;- region_fish_species %&gt;%\n  cbind(word_df)\n\n# Convert data to long format\nregion_fish_species_long &lt;- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long &lt;- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %&gt;% \n  na.omit() %&gt;%\n  mutate_at(vars(Presence), trimws)\n\n\n\n\nShow the code\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence in each Region\",\n       x = \"Region\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\nEcological Preserves\nWe can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species (Sockfish, Offidiaa, and Helenaa) would have fished illegally. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\nSockfish: Only found in Don Limpet Preserve\nOffidiaa: Only found in Ghoti Preserve\nHelenaa: Only found in Ecological Preserves (all three)\n\nFishing Grounds\n\nCod: Only found in Cod Table\nHarland: Only found in Tuna Shelf\n\nOther notable point\n\nSalmon: Not found in any of the 6 locations mentioned above. This might be imports from other countries or from international shipping.\n\n\n\n\n\n1.6.2 Understanding the qty_tons of each Fish Species by City\nAfter identifying the three fish species (Sockfish, Offidiaa, and Helenaa) that are only found in the Ecological Preserves, we will have an overview of how each of the fish species are spread across the city.\n\n\nShow the code\n# Aggregate the qty_tons by fish and city\nqty_tons_agg &lt;- import_record %&gt;%\n  group_by(fish, city) %&gt;%\n  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Add distinct colors to flag out Sockfish, Offidiaa, and Helenaa\ncolor &lt;- c(\"Wrasse\" = \"#000099\",\n           \"Tuna\" = \"#0000CC\",\n           \"Harland\" = \"#0000FF\",\n           \"Cod\" = \"#3333FF\",\n           \"Birdseye\" = \"#6666FF\",\n           \"Beauvoir\" = \"#9999FF\",\n           \"Salmon\" = \"#CCCCFF\",\n           \"Helenaa\" = \"#FF99FF\",\n           \"Offidiaa\" = \"#FF00FF\",\n           \"Sockfish\" = \"#990099\")\n\n# Reorder to match the above \nqty_tons_agg$fish &lt;- factor(qty_tons_agg$fish,\n                            levels = c(\"Wrasse\",\"Tuna\",\n                                       \"Harland\",\"Cod\",\n                                       \"Birdseye\", \"Beauvoir\",\n                                       \"Salmon\",\"Helenaa\",\n                                       \"Offidiaa\",\"Sockfish\"))\n\n# Reorder city in descending order based on total_qty_tons\nqty_tons_agg$city &lt;- factor(qty_tons_agg$city,\n                            levels = c(\"City of Paackland\",\n                                       \"City of Himark\",\n                                       \"City of Lomark\",\n                                       \"City of South Paackland\",\n                                       \"City of Haacklee\"))\n\n# Bar plot\nggplot(qty_tons_agg, aes(x = city, \n                         y = total_qty_tons, \n                         fill = fish)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = color) +\n  labs(title = \"Quantity Tons of Fish by City and Fish Species\",\n       x = \"City\",\n       y = \"Total Quantity (tons)\",\n       fill = \"Fish Species\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n1.6.3 Understanding the number of cargoes of each Fish Species by City\n\n\nShow the code\n# Aggregate the qty_tons by fish and city\ncargo_n_agg &lt;- import_record %&gt;%\n  group_by(fish, city) %&gt;%\n  summarize(total_cargo = n()) %&gt;%\n  ungroup()\n\n# Add distinct colors to flag out Sockfish, Offidiaa, and Helenaa\ncolor &lt;- c(\"Wrasse\" = \"#000099\",\n           \"Tuna\" = \"#0000CC\",\n           \"Harland\" = \"#0000FF\",\n           \"Cod\" = \"#3333FF\",\n           \"Birdseye\" = \"#6666FF\",\n           \"Beauvoir\" = \"#9999FF\",\n           \"Salmon\" = \"#CCCCFF\",\n           \"Helenaa\" = \"#FF99FF\",\n           \"Offidiaa\" = \"#FF00FF\",\n           \"Sockfish\" = \"#990099\")\n\n# Reorder to match the above \ncargo_n_agg$fish &lt;- factor(cargo_n_agg$fish,\n                            levels = c(\"Wrasse\",\"Tuna\",\n                                       \"Harland\",\"Cod\",\n                                       \"Birdseye\", \"Beauvoir\",\n                                       \"Salmon\",\"Helenaa\",\n                                       \"Offidiaa\",\"Sockfish\"))\n\n# Reorder city in descending order based on total_qty_tons\ncargo_n_agg$city &lt;- factor(cargo_n_agg$city,\n                            levels = c(\"City of Paackland\",\n                                       \"City of Himark\",\n                                       \"City of Lomark\",\n                                       \"City of South Paackland\",\n                                       \"City of Haacklee\"))\n\n# Bar plot\nggplot(cargo_n_agg, aes(x = city, \n                         y = total_cargo, \n                         fill = fish)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = color) +\n  labs(title = \"Number of Cargoes by City and Fish Species\",\n       x = \"City\",\n       y = \"No. of Cargoes\",\n       fill = \"Fish Species\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nBoth qty_tons and number of cargoes bar plots shows similar distribution of fish species within each city.\nThe City of Paackland processed the highest qty_tons and number of cargoes, follow by City of Himark, City of Lomark, City of South Paackalnd, and City of Hacklee.\n\n\n\n\n\n1.6.4 Understanding the Activities by Locations\nUnderstanding the activities in each of the locations.\n\n\nShow the code\nword_list &lt;- strsplit(location_nodes$Activities, \"\\\\,\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"activity\", 1:max_elements) \n\nword_df &lt;- as_tibble(word_df) \n\nlocation_nodes1 &lt;- location_nodes %&gt;%\n  cbind(word_df)\n\n# Convert data to long format\nlocation_nodes_long &lt;- pivot_longer(location_nodes1, cols = starts_with(\"activity\"), names_to = \"activity\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nlocation_nodes_long &lt;- location_nodes_long[location_nodes_long$Presence != \"\", ] %&gt;% \n  mutate_at(vars(Presence), trimws) %&gt;% \n  filter(if_all(c(loc), ~ !is.na(.)))\n\nlocation_nodes_long$Presence[8] = \"Tourism\"\n\n\n\n\nShow the code\n# Order the locations\ndesired_order &lt;- c(\"City of Himark\",\n                   \"City of Lomark\",\n                   \"City of Haacklee\",\n                   \"City of Paackland\",\n                   \"City of South Paackland\",\n                   \"City of Port Grove\",\n                   \"Ghoti Preserve\", \n                   \"Nemo Reef\", \n                   \"Don Limpet Preserve\",\n                   \"Cod Table\", \n                   \"Wrasse Beds\",\n                   \"Tuna Shelf\",\n                   \"Exit North\",\n                   \"Exit South\",\n                   \"Exit East\",\n                   \"Exit West\",\n                   \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                   \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\")  \n\nlocation_nodes_long$loc &lt;- factor(location_nodes_long$loc, levels = desired_order)\n\nggplot(location_nodes_long, aes(x = loc, \n                                y = Presence,\n                                colour = Presence)) +\n  geom_point() +\n  labs(title = \"Activities in each Location\",\n       x = \"Location\",\n       y = \"Activity\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Aggregate the transponder ping by location\nlocation_ping_agg &lt;- vessel_movement %&gt;%\n  group_by(loc, type) %&gt;%\n  summarize(total_ping = n()) %&gt;%\n  ungroup()\n\n\n# Reorder to match the above \nlocation_ping_agg$loc &lt;- factor(location_ping_agg$loc,\n                           levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))  \n\n# Bar plot\nggplot(location_ping_agg, aes(x = loc, \n                              y = total_ping, \n                              fill = type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Number of Transponder Ping by Locations\",\n       x = \"Locations\",\n       y = \"No. of Transponder Ping\",\n       fill = \"Locations\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nThere is abnormally high number of pings for fishing vessels at Nemo Reef. Since Nemo Reef is a Ecological Preserve, the correct safe navigation around it is through Nav D.\nGiven that the fish species (Wrasse, Tuna, Birdseye, Beauvoir) in Nemo Reef, can also be found in other fishing grounds, there is likelihood of IUU here. The presence of Helenaa is the only tell-tale sign if a fishing vessel indeed fish in Nemo Reef.\nThere is abornormally high number of pings for fishing vessels at Exit East. Since the activities in Exit E are international shipping and Deep Sea Fishing, it is not a designated Fishing Ground within Oceanus. Thus, we should be only expecting cargo vessels through Exit E, as observed in other exits.\n\n\n\n\n\n1.6.5 Understanding the Harbor Report by Locations\n\n\nShow the code\n# Aggregate the harbor report by location\nharbor_report_agg &lt;- harbor_report %&gt;%\n  group_by(city, type) %&gt;%\n  summarize(total_report = n()) %&gt;%\n  ungroup()\n\n\n# Reorder to match the above \nharbor_report_agg$city&lt;- factor(harbor_report_agg$city,\n                           levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\"))\n                                        \n\n# Bar plot\nggplot(harbor_report_agg, aes(x = city, \n                              y = total_report, \n                              fill = type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Number of Report by City\",\n       x = \"City\",\n       y = \"No. of Reports\",\n       fill = \"City\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nThere is only Research and Tour vessels visiting City of Port Grove.\nThe other five cities have mostly fishing or cargo vessels visits.\n\n\n\n\n\n1.6.6 Understanding the Cargoes\nCargoes by Quantity in Ton\n\n\nShow the code\n# Calculate Vlines\nmean_qty_tons &lt;- mean(cargo_nodes$qty_tons, na.rm = TRUE)\nmedian_qty_tons &lt;- median(cargo_nodes$qty_tons, na.rm = TRUE)\n\n# Create a new column to indicate if the value is negative\ncargo_nodes &lt;- cargo_nodes %&gt;%\n  mutate(is_negative = ifelse(qty_tons &gt; 0, \"Positive\", \"Negative\"))\n\n# Plot Histogram\np1 &lt;- ggplot(cargo_nodes, aes(x = qty_tons, fill = is_negative)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  geom_vline(aes(xintercept = mean_qty_tons), \n             color = \"purple\", \n             linetype = \"dashed\", \n             size = 1) +\n  geom_vline(aes(xintercept = median_qty_tons), \n             color = \"blue\", \n             linetype = \"dashed\", size = 1) +\n  scale_fill_manual(values = c(\"Negative\" = \"red\", \n                               \"Positive\" = \"skyblue\"), \n                    name = \"Value Type\") +\n  labs(title = \"Cargo Quantity in Tons with Mean and Median\",\n       x = \"Quantity of Tons\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  annotate(\"text\", \n           x = mean_qty_tons, \n           y = Inf, \n           label = paste(\"Mean =\", round(mean_qty_tons, 2)), \n           vjust = 1, hjust = -0.2, \n           color = \"purple\") +\n  annotate(\"text\", \n           x = median_qty_tons, \n           y = Inf, \n           label = paste(\"Median =\", round(median_qty_tons, 2)), \n           vjust = 1, hjust = 1.3, color = \"blue\") \n\np2 &lt;- ggplot(cargo_nodes, aes(y = qty_tons)) +\n  geom_boxplot(fill = \"skyblue\", \n               color = \"black\", \n               alpha = 0.7,\n               width = 0.2,\n               outlier.colour = \"darkgreen\") +\n  stat_dots(data = subset(cargo_nodes, \n                          qty_tons &gt; 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"blue\") +\n  stat_dots(data = subset(cargo_nodes, \n                          qty_tons &lt;= 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"red\") +\n  geom_hline(yintercept = 0,\n             color = 'red', \n             linetype = 'dashed') +\n  geom_text(aes(x = 0.3,\n                y = -5,\n                label = \"Suspicious \\nCargoes\"),\n            color = \"red\",\n            size = 3,\n            vjust = 1.7,\n            hjust = 0.7) +\n  geom_hline(yintercept = 60,\n             color = 'darkgreen', \n             linetype = 'dashed') +\n  geom_text(aes(x = 0.3,\n                y = 60,\n                label = \"Outliers to be \\n  Investigated\"),\n            color = \"darkgreen\",\n            size = 3,\n            vjust = 1.7,\n            hjust = -0.3) +\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank()) +\n  coord_flip() +\n  ggtitle(label = \"Cargo qty_tons Distribution\")\n\np3 &lt;- ggplot(import_record, \n       aes(x = city, \n           y = qty_tons)) + \n  geom_boxplot(fill = \"skyblue\",\n               width = 0.2,\n               outlier.color = \"darkgreen\") +\n  stat_dots(data = subset(import_record, \n                          qty_tons &gt; 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"blue\") +\n  stat_dots(data = subset(import_record, \n                          qty_tons &lt;= 0),\n    side = \"left\", \n    justification = 1.2,\n    binwidth = 1, \n    dotsize = 0.1,\n    color = \"red\") +\n  geom_hline(yintercept = 0,\n             color = 'red', \n             linetype = 'dashed') +\n  geom_text(aes(x = \"City of Haacklee\",\n                y = -5,\n                label = \"Suspicious \\nCargoes\"),\n            color = \"red\",\n            size = 3,\n            vjust = 1.7,\n            hjust = 0.7) +\n  geom_hline(yintercept = 60,\n             color = 'darkgreen', \n             linetype = 'dashed') +\n  geom_text(aes(x = \"City of Haacklee\",\n                y = 60,\n                label = \"Outliers to be \\n  Investigated\"),\n            color = \"darkgreen\",\n            size = 3,\n            vjust = 1.7,\n            hjust = -0.3) +\n  coord_flip() +\n  ggtitle(label = \"Cargo qty_tons by City\")\n\n\n\n\nShow the code\np1/p2/p3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nThere are cargoes which has negative values. This is abnormal as all cargoes qty_tons values should be at least zero.\nThere are a number of outliers cargoes with qty_tons above ~70 tons.\n\n\n\nCargoes Quantity Ton by Date and City\n\n\nShow the code\n# Aggregate import record data\nimport_record_agg &lt;- import_record %&gt;%\n  mutate(year = year(cargo_delivery_date),\n         month = factor(month(cargo_delivery_date, label = TRUE), levels = month.abb), # Ensure month is a factor\n         day = day(cargo_delivery_date),\n         week = week(cargo_delivery_date),\n         weekday = wday(cargo_delivery_date, label = TRUE, week_start = 1)) %&gt;% \n  group_by(city, year, month) %&gt;%  # Group by city, year, and month\n  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %&gt;% \n  arrange(city, year, month)\n\n# Create heatmap\nggplot(import_record_agg, \n       aes(x = month, \n           y = city, \n           fill = total_qty_tons)) + \n  geom_tile(color = \"white\", \n            size = 0.1) +  \n  coord_equal() +\n  scale_fill_gradient(name = \"Cargo Quantity Ton by Month\",\n                      low = \"sky blue\", \n                      high = \"dark blue\") +\n  labs(x = NULL, \n       y = NULL, \n       title = \"Cargo Quantity Ton by Month\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nHigher qty_tons of cargoes enters the various cities from Aug to Nov period.\nQty_tons peak in Oct and Nov period, expecially for City of Paackland.\n\n\n\n\n\n1.6.7 Understanding the Vessels\nTypes of vessels\n\n\nShow the code\n# Vessel count and reorder bar plot\nvessel_count &lt;- vessel_nodes %&gt;%\n  group_by(type) %&gt;%\n  summarize(n = n()) %&gt;% \n  mutate(type = reorder(type, -n))\n\n# Bar plot\nggplot(vessel_count,\n       aes(x = type,\n           y = n)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = n), vjust = -0.5, size = 3)\n\n\n\n\n\n\n\n\n\nLength by Tonnage\n\n\nShow the code\n# Scatter plot\nggplot(vessel_nodes) +\n  geom_point(aes(x = length_overall,\n                 y = tonnage,\n                 color = type)) +\n  ggtitle(label = \"Length by Tonnage\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nCargo vessels have wide range of length and tonnage. Only a few data points ( &lt;20), falls within similar range of the fishing vessels.\nThe fishing vessels tonnage mostly are &lt;12,000 ton and length_overall of &lt;150m. Only three fishing vessels are above these range.\n\n\n\nTonnage Distribution\n\n\nShow the code\n# Raincloud Plot for Tonnage Distribution of Fishing and Cargo Vessels\np1 &lt;- vessel_nodes %&gt;% \n  filter(type %in% c(\"FishingVessel\")) %&gt;%\n  ggplot(aes(x = tonnage, \n             y = type)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 100,\n            dotsize = 1) +\n  ggtitle(\"Tonnage Distribution by of Fishing Vessels\") +\n  theme(plot.title = element_text(size=12)) +\n  theme_minimal()\n\np2 &lt;- vessel_nodes %&gt;% \n  filter(type %in% c(\"CargoVessel\")) %&gt;%\n  ggplot(aes(x = tonnage, \n             y = type)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 500,\n            dotsize = 0.1) +\n  ggtitle(\"Tonnage Distribution by of Cargo Vessels\") +\n  theme(plot.title = element_text(size=12)) +\n  theme_minimal()\n\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nFishing vessels tonnage distribution is right skewed. There is high concentration of fishing vessels of &lt; 1,000 ton.\nCargo vessels tonnage falls largely into two distinct groups: (1) ~2000 ton, and (2) ~75,000 ton.\n\n\n\nVessel Type and Flag Country\n\n\nShow the code\n# Bar plot\nggplot(vessel_nodes) +\n  geom_bar(aes(x = flag_country,\n               fill = type)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nVessels from Oceanus We now take a more detailed look at Oceanus vessel.\n\n\nShow the code\n# Oceanus vessel count and reorder bar plot\nvessel_count &lt;- vessel_nodes %&gt;%\n  filter(flag_country == \"Oceanus\") %&gt;% \n  group_by(type) %&gt;%\n  summarize(n = n()) %&gt;% \n  mutate(type = reorder(type, -n))\n\n# Bar plot\nggplot(vessel_count,\n       aes(x = type,\n           y = n,\n           fill = type)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = n), vjust = -0.5, size = 3)\n\n\n\n\n\n\n\n\n\nVessels from other flag_country\n\n\nShow the code\n# Bar plot for flag countries other than Oceanus\nvessel_nodes %&gt;% \n  filter(flag_country != \"Oceanus\") %&gt;% \n  ggplot() +\n  geom_bar(aes(x = flag_country,\n               fill = type)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Bar plot for flag countries other than Oceanus\nvessel_nodes %&gt;% \n  filter(flag_country != \"Oceanus\") %&gt;% \n  ggplot() +\n  geom_bar(aes(x = flag_country,\n               fill = type)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  facet_grid(~type)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from these vessels visualisation\n\n\n\n\nMost fishing vessels (158 of 178) are registered under flag country of Oceanus.\nOther countries vessels are only cargo vessels (99) and fishing vessels (20).\nOther countries own between 0 to 5 cargo vessels and 0 to 2 fishing vessels.\n\n\n\nVessels by Company\nUpon inspecting the vessel_nodes data, we observe that non-Oceanus fishing vessels has registered company information, while non-Oceanus cargo vessels do not have registered company information. To confirm this is true, we remove those company that are “NA” in the bar plot.\n\n\n\nShow the code\n# Checking the hypothesis that non-Oceanus cargo vessels are not registered as company in the data\nvessel_nodes %&gt;% \n  na.omit(company) %&gt;% \n  filter(flag_country != \"Oceanus\") %&gt;% \n  ggplot(aes(x = company, fill = type)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  facet_grid(~type)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nOnly one cargo vessel is registered with company. This belongs to the “Saltwater Sisters Company Marine”. Using the data table created above, we found out that this cargo vessel is registered under the flag_country of Oceantterra. This company also owns a fishing vessel (bassbaiterb9f) with flag_country as Oceanus.\nAll 20 non-Oceanus fishing vessels are all registered with company in the data.\n\n\n\n\n\n1.6.8 Understanding the vessel movements\nUnderstand Average Dwell by Location\n\n\nShow the code\nvessel_movement$loc &lt;- factor(vessel_movement$loc,\n                              levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\nggplot(vessel_movement, aes(x = loc, \n                            y = dwell,\n                            fill = loc_type)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  scale_y_continuous(limits = c(0, 300000)) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nFor the cities, the outliers can be explained by the extend stay due to repair and replenishment purposes.\nFor all three ecological preserves, there are many outliers, and this is a tell-tale sign of extended stay in the preserves by fishing vessels for IUU fishing.\nFor the fishing grounds, the extended stay of fishing vessels may be explained by conducting of transshipment between small fishing vessels and bigger reefer/cargo ships, where the small fishing vessels stay at the location for fishing. There are fishing vessels that are out in the sea for months.\nFor the navigation points, Exit E display signs of abnormality due to its high number of outliers compared to other navigation points that are used for international shipping (Exit North, Exit South and Exit West). Nav 1 and Nav A may also be investigated since there are high numbers of outliers, and also, they are at the fringe of the Ghoti and Don Limpet Preserves respectively."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-1-flow-of-commercially-caught-fish",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-1-flow-of-commercially-caught-fish",
    "title": "Take Home Exercise 3",
    "section": "2.0 Task 1: Flow of Commercially Caught Fish",
    "text": "2.0 Task 1: Flow of Commercially Caught Fish\nIn this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:\n\nAssociating the vessels with their probable cargoes\nWhich vessels deliver which products and when?\nExamine the seasonal trends and anomalies in the port exit records"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#associating-the-vessels-with-their-probable-cargoes",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#associating-the-vessels-with-their-probable-cargoes",
    "title": "Take Home Exercise 3",
    "section": "2.1 Associating the vessels with their probable cargoes",
    "text": "2.1 Associating the vessels with their probable cargoes\nMatching the vessel with the import_record\nWe will use the vessel_nodes that contains information on the movement of fishing vessels and cargoes, and define the vessels location, start time and end time of the vessels in the particular location using transponder ping.\n\n\nShow the code\nfishing_and_cargo_vessel_list &lt;- vessel_nodes %&gt;% \n  filter(type %in% c(\"FishingVessel\", \"CargoVessel\")) %&gt;% \n  select(vessel)\n\nfishing_and_cargo_vessel_list &lt;- as.list(fishing_and_cargo_vessel_list)\n\nvessel_location &lt;- vessel_movement %&gt;% \n  filter(vessel %in% unlist(fishing_and_cargo_vessel_list)) %&gt;% \n  arrange(vessel,time) %&gt;% \n  mutate(next_time = ifelse(lead(vessel) == vessel, lead(time), NA)) %&gt;% \n  mutate(next_time = as_datetime(next_time))   %&gt;% \n  mutate(end_time = time + dwell)\n\nvessel_location_city &lt;- vessel_location %&gt;% \n  filter(loc_short %in% c(\"Haacklee\",\n                       \"Lomark\",\n                       \"Himark\",\n                       \"Paackland\",\n                       \"South Paackland\",\n                       \"Port Grove\"))\n\n\nVessel Location based on harbor report\nThe next step we do is to extract the date, location and vessel from the harbor report. Since this is describe as canonical, it should be considered for matching first before using the vessel location data from transponder ping. Columns are renamed to match the information in the cargo_list.\n\n\nShow the code\nvessel_mvmt_hr &lt;- harbor_report %&gt;% \n  select(vessel, city, date) %&gt;% \n  rename(vessel_delivery_date = date)\n\n\nMerging import_record and vessel_mvmt_hr\nAdding one column on vessel delivery date, which is 1 day before the date stated in the harbor import record.\n\n\nShow the code\ncargo_list &lt;- import_record %&gt;% \n  mutate(vessel_delivery_date = cargo_delivery_date + days(-1))\n\n\nSaving cargo_list:\n\n\nShow the code\nwrite_rds(cargo_list, \"data/rds/cargo_list.rds\")\n\n\n\n\nShow the code\nvessel_location_match_hr &lt;- cargo_list %&gt;% \n  left_join(vessel_mvmt_hr ) %&gt;%\n  filter(if_all(c(qty_tons,vessel), ~ !is.na(.))) %&gt;% \n  distinct()\n\n\n\n\nShow the code\nwrite_rds(vessel_location_match_hr, \"data/rds/vessel_location_match_hr.rds\")\n\n\n\n\nShow the code\nhr_match &lt;- mc2_nodes %&gt;% \n  select(id,Name,flag_country, company, tonnage,entity3) %&gt;% \n  rename(vessel = id) %&gt;% \n  left_join(vessel_location_match_hr) %&gt;%   \n  filter(if_all(c(qty_tons, tonnage), ~ !is.na(.))) %&gt;% \n  distinct() %&gt;% \n  filter()\n\n\nMerging cargo_list and vessel_location_city\n\n\nShow the code\nvessel_location_city &lt;- vessel_location_city %&gt;% \n  mutate(date = substr(`time`,1,10)) %&gt;% \n  mutate(vessel_delivery_date = ymd(date))  %&gt;% \n  filter(dwell &gt; 0)\n\n\n\n\nShow the code\nvessel_location_match &lt;- vessel_location_city %&gt;% \n  left_join(cargo_list, \n            unmatched = \"drop\") %&gt;%\n  filter(if_all(c(qty_tons), ~ !is.na(.))) %&gt;% \n  distinct()\n\n\nVessel Match Graph\n\n\nShow the code\nid1 &lt;- vessel_location_match_hr  %&gt;% \n  select(vessel) %&gt;% \n  rename(id = vessel) \n\nid2 &lt;- vessel_location_match_hr  %&gt;% \n  select(cargo) %&gt;% \n  rename(id = cargo)\n\ncargo_vessel_nodes &lt;- rbind(id1,id2) %&gt;% \n  distinct() \n\ncargo_vessel_edges &lt;- vessel_location_match_hr %&gt;% \n  select(vessel,cargo, fish, city) %&gt;% \n  distinct() %&gt;%\n  group_by(vessel, cargo) %&gt;%\n  rename(source = vessel, target = cargo)%&gt;%\n  filter(source!=target) %&gt;% \n  ungroup()\n\ncargo_vessel_graph &lt;- tbl_graph(nodes = cargo_vessel_nodes,\n                       edges = cargo_vessel_edges,\n                       directed = FALSE)\n\n\nFinding anomalies in vessel movement by comparing end time (calculated by dwell) with next time (the next time the vessel is detected at the next location).\n\n\nShow the code\nab_vessel_mvmt &lt;- vessel_location %&gt;%\n  mutate(time = ymd_hms(time)) %&gt;% \n  mutate(next_time = ymd_hms(next_time)) %&gt;% \n  mutate(end_time = ymd_hms(end_time)) %&gt;% \n  filter(end_time != next_time) \n\nab_vessel_mvmt_agg &lt;- ab_vessel_mvmt %&gt;% \n  distinct() %&gt;% \n  group_by(vessel) %&gt;% \n  summarise(weights = n()) %&gt;%\n  arrange(desc(weights))\nab_vessel_mvmt_agg\n\n\n# A tibble: 277 × 2\n   vessel                 weights\n   &lt;chr&gt;                    &lt;int&gt;\n 1 brooktroutbuccaneerc0b     151\n 2 bluemarlinbandit292        149\n 3 halibuthero9b9             146\n 4 catchcruisera94            145\n 5 bluefishbandit8ec          138\n 6 tenchtaker595              133\n 7 deepseadrifter9f2          132\n 8 whitefishwrangler7df       132\n 9 yellowfintunataker08b      130\n10 rainbowtroutraider4d0      129\n# ℹ 267 more rows"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#examine-the-seasonal-trends-and-anomalies-in-the-port-exit-records",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#examine-the-seasonal-trends-and-anomalies-in-the-port-exit-records",
    "title": "Take Home Exercise 3",
    "section": "2.3 Examine the seasonal trends and anomalies in the port exit records",
    "text": "2.3 Examine the seasonal trends and anomalies in the port exit records\n\n2.3.1 Seasonal trends in port exit records\n\n\nShow the code\nimport_record1 &lt;- import_record %&gt;% \n  mutate(year = year(cargo_delivery_date),\n         month = month(cargo_delivery_date, label = TRUE),\n         day = day(cargo_delivery_date),\n         week = week(cargo_delivery_date),\n         weekday = wday(cargo_delivery_date, label = TRUE, week_start = 1))\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- import_record1  %&gt;%\n  distinct() %&gt;%\n  group_by(fish,month) %&gt;%\n  summarise(total_qty_tons = sum(qty_tons)) %&gt;% \n  ungroup()\n\nggplot(fish_agg, aes(x = month, y = fish, fill = total_qty_tons)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Function to create a calendar heat map\ncreate_heatmap &lt;- function(data, city) {\n  ggplot(data, aes(x = month, \n                   y = fish, \n                   fill = total_qty_tons)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n\n\n\n\nShow the code\nfish_by_port_agg &lt;- import_record1 %&gt;% \n  group_by(city,fish,month) %&gt;% \n  summarise(total_qty_tons = sum(qty_tons))\n\n\n\n\nShow the code\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#understanding-the-types-of-fish-that-should-not-be-in-the-market",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#understanding-the-types-of-fish-that-should-not-be-in-the-market",
    "title": "Take Home Exercise 3",
    "section": "2.3.1 Understanding the types of fish that should not be in the market",
    "text": "2.3.1 Understanding the types of fish that should not be in the market\n\n\nShow the code\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c) %&gt;% \n    filter(fish %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\",\"Salmon\"))\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nFrom this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively.\nProbable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-2",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-2",
    "title": "Take Home Exercise 3",
    "section": "3.0 Task 2",
    "text": "3.0 Task 2\nDevelop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#illegal-fishing-by-southseafood-express-corp",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#illegal-fishing-by-southseafood-express-corp",
    "title": "Take Home Exercise 3",
    "section": "3.1 Illegal fishing by SouthSeafood Express Corp",
    "text": "3.1 Illegal fishing by SouthSeafood Express Corp\nSouthSeafood Express Corp operates two fishing vessels by the id of “snappersnatcher7be” and “roachrobberdb6”.\n\n\nShow the code\nvessel_movement_agg &lt;-\n  vessel_movement %&gt;%\n  distinct() %&gt;%\n  group_by(loc, vessel, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  ungroup()\n\n\n\n\nShow the code\nvessel_movement_agg %&gt;% \n  filter(vessel %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %&gt;%\n  group_by(vessel) %&gt;% \n  ggplot(aes(x=vessel, y=loc,\n             size = weights)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n3.1.1 When and where did SouthSeafood Express Corp vessels perform their illegal fishing?\nSince only Snapper Snatcher appears to be operating in Ghoti Preserve, we will examine this fishing vessel more closely.\n\n\nShow the code\nsnapper_activities &lt;- vessel_movement %&gt;% \n  filter(vessel %in% c(\"snappersnatcher7be\")) %&gt;% \n  filter(loc == \"Ghoti Preserve\") %&gt;% \n  arrange(vessel,time) %&gt;% \n  mutate(end_time = time + dwell) %&gt;% \n  select(time, dwell, end_time)\nsnapper_activities\n\n\n                 time      dwell            end_time\n1 2035-02-02 05:39:59 282000.853 2035-02-05 12:00:00\n2 2035-02-09 05:49:11 281448.765 2035-02-12 12:00:00\n3 2035-02-16 07:02:09 277070.841 2035-02-19 12:00:00\n4 2035-03-15 05:46:02   6410.348 2035-03-15 07:32:52\n\n\nThere three instances (2,9 and 16 Feb) where Snapper Snatcher stayed at the Ghoti Preserve for over 3 days. These are the instances where SouthSeafood Express Corp’s Snapper Snatcher conducted IUU Fishing in Ghoti Preserve.\n\n\n3.1.2 Visualising Vessel Trajectory\nIn the code chunk below, st_as_sf() of sf package is used to convert vessel_movement_data data.frame into sf point data.frame by using values in XCOORD and YCOORD columns. The output is an sf data.frame called vessel_movement_sf.\n\n\nShow the code\nvessel_movement_sf &lt;- vessel_movement %&gt;%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n\n\nNext arrange() is used to sort the records according to the vessels’ name (i.e. target) and navigation time (i.e. time)\n\n\nShow the code\nvessel_movement_sf &lt;- vessel_movement_sf %&gt;%\n  arrange(vessel, time)\n\n\nLastly, st_cast() of sf package is used to convert vessel_movement_sf from point features into linestring features called vessel_trajectory.\n\n\nShow the code\nvessel_trajectory &lt;- vessel_movement_sf %&gt;%\n  group_by(vessel) %&gt;%\n  summarize(do_union = FALSE) %&gt;%\n  st_cast(\"LINESTRING\")\n\n\nSelecting SouthSeafood Express vessels\n\n\nShow the code\nvessel_trajectory_selected &lt;- vessel_trajectory %&gt;%\n  filter(vessel %in% c(\"snappersnatcher7be\", \"roachrobberdb6\"))\n\n\nNext, appropriate functions of ggplot2 is used to plot the selected vessel trajectories by using the code chunk below.\n\n\nShow the code\nggplot() +\n  geom_sf(data = oceanus_geography) +\n  geom_sf(data = vessel_trajectory_selected, \n          aes(color = factor(vessel)), \n          size = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of SouthSeafood Express Vessels\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-4",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-4",
    "title": "Take Home Exercise 3",
    "section": "4.0 Task 4",
    "text": "4.0 Task 4\nThe Questions:\n\nHow did fishing activity change after SouthSeafood Express Corp was caught?\nWhat new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\nThe Answer In order to understand the change in fishing activities, we first have to determine the date where SouthSeafood Express Corp was caught. The final activities of SouthSeafood’s vessels are on 2035-05-14 at City of Lomark for Snapper Snatcher (snappersnatcher7be) and 2035-05-12 at City of Himark for Roach Robber (roachrobberdb6) according to the transponder pings. Hence, we can conclude that the SouthSeafood is caught for illegal fishing, and had ceased operating its fishing vessels since 2035-05-14. We will use this date as the cut off to define before and after SSEC was caught."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#changes-in-commercial-fishing",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#changes-in-commercial-fishing",
    "title": "Take Home Exercise 3",
    "section": "4.1 Changes in Commercial Fishing",
    "text": "4.1 Changes in Commercial Fishing\nFirstly, we take a look at the species caught across the months (Feb to Nov 2035).\n\n\nShow the code\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;%\n  distinct() %&gt;%\n  group_by(fish,month) %&gt;%\n  summarise(total_qty_tons = sum(total_qty_tons)) \n\noceanus_heatmap &lt;- ggplot(fish_agg, aes(x = month, y = fish, fill = total_qty_tons)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal() +\n  geom_vline(xintercept = \"May\",color = 'red', linetype = 'dashed') +\n  annotate(\"text\", x = \"May\" , y = \"Offidiaa\", label = \"SouthSeafood caught\", angle = 90, vjust = -0.5, hjust = 0.5, color = \"red\")\n\n\n\n\nShow the code\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nspecies_plot &lt;-ggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\n\n\nShow the code\noceanus_heatmap / species_plot\n\n\n\n\n\n\n\n\n\nFor recapitulation, we know that Sockfish, Offidiaa, and Helenaa are fish species that are unique to the three Preserves. From the two plots above, we can derive initial conclusion that there is an usual increase in Sockfish catch after SouthSeafood was caught in mid-May. We also see a minor increase in Helenaa between Jun to Aug, and later in Oct to Nov. The spike in Offidiaa catch begins in Sep and grows gradually to Nov. There is also appearance of Salmon from Jul onwards.\nCombining the information above, we can make the following two hypothesis about the changes in fishing activities in Oceanus after SouthSeafood was caught:\n\nThe fishing vessels switched to Don Limpet Preserve for IUU fishing. Tell tale sign is the increase in Sockfish catch, which is species unique to Don Limpet Preserve. This also explains the slight increase in Helena catch from Jun.\nThe fishing vessels moved into Ghoti Preserves from Sep onwards for IUU fishing. Tell tale sign is the increase in Offidia catch from Sep, which is species unique to Ghoti Preserve.\nSalmon start to appear in the cargoes in various cities. Salmon is a deep sea fish species that is not found in any of the fishing ground in Oceanus\n\nFor confirmation, we take a look at the changes to OVLS Transponder Ping, comparing the total pings to various locations month by month.\nFrequency of visits to the Cities\n\n\nShow the code\nvessel_movement_long &lt;- vessel_movement %&gt;% \n  filter(loc_type == \"city\") %&gt;% \n  filter(type == \"FishingVessel\") %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(loc, vessel, month) %&gt;% \n  group_by(loc, month) %&gt;% \n  summarize(n = n()) \n\n\n\n\nShow the code\na &lt;- vessel_movement_long %&gt;% \n  mutate(month = as.factor(month)) %&gt;% \n  newggslopegraph(month,n, loc,\n                Title = \"Changes in Visit Frequency of Fishing Vessels\",\n                SubTitle = \"Cities\",\n                Caption = \"Feb-Nov.Before and After SSEC caught in May\") \n\n\na &lt;- a + \n  geom_vline(xintercept = 4, \n                    linetype = 2, \n                    color = \"red\") +\n  geom_text(aes(x = 4, y = 150, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = 1.1,\n            size = 3)\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"none\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\nShow the code\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nFor the City of Himark, there is a hike in visit frequency till the time SSEC got caught in May. Then the frequency decline all the way till Nov.\n\n\n\n\n\nShow the code\nvessel_movement_long &lt;- vessel_movement %&gt;% \n  filter(loc_type == \"buoy\") %&gt;% \n  filter(type == \"FishingVessel\") %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(loc, vessel, month) %&gt;% \n  group_by(loc, month) %&gt;% \n  summarize(n = n()) \n\n\n\n\nShow the code\nb &lt;- vessel_movement_long %&gt;% \n  mutate(month = as.factor(month)) %&gt;% \n  newggslopegraph(month,n, loc,\n                Title = \"Changes in Visit Frequency of Fishing Vessels\",\n                SubTitle = \"Navigation Points\",\n                Caption = \"Feb-Nov.Before and After SSEC caught in May\") \n\n\nb &lt;- b + \n  geom_vline(xintercept = 4, \n                    linetype = 2, \n                    color = \"red\") +\n  geom_text(aes(x = 4, y = 150, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = 1.1,\n            vjust = -8,\n            size = 3)\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"none\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\nShow the code\nb\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nvessel_movement_long &lt;- vessel_movement %&gt;% \n  filter(loc_type %in% c(\"Fishing Ground\", \"Ecological Preserve\")) %&gt;% \n  filter(type == \"FishingVessel\") %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(loc, vessel, month) %&gt;% \n  group_by(loc, month) %&gt;% \n  summarize(n = n()) \n\n\n\n\nShow the code\nc &lt;- vessel_movement_long %&gt;% \n  mutate(month = as.factor(month)) %&gt;% \n  newggslopegraph(month,n, loc,\n                Title = \"Changes in Visit Frequency of Fishing Vessels\",\n                SubTitle = \"Fishing Grounds and Ecological Preserves\",\n                Caption = \"Feb-Nov.Before and After SSEC caught in May\") \n\nc &lt;- c + \n  geom_vline(xintercept = 4, \n                    linetype = 2, \n                    color = \"red\") +\n  geom_text(aes(x = 4, y = 150, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = 1.1,\n            vjust = -8,\n            size = 3)\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"none\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\nShow the code\nc\n\n\n\n\n\n\n\n\n\n\nIn the line graph below, we observe that the overall fishing vessels activities in the fishing ground and preserves dropped.\n\n\nShow the code\naverage &lt;- vessel_movement %&gt;% \n  filter(type == \"FishingVessel\") %&gt;%\n  filter(loc %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;%\n  mutate(month = month(time)) %&gt;% \n  summarise(average = (n()/10))\n\nvessel_movement %&gt;% \n  filter(loc %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;%\n  filter(type == \"FishingVessel\") %&gt;% \n  mutate(month = month(time)) %&gt;% \n  group_by(month) %&gt;% \n  summarise(n = as.numeric(n())) %&gt;%\n  ggplot(aes(x = month, y = n)) + \n  geom_line(color = \"blue\") +  \n  geom_point(size = 4, color = \"blue\") +\n  geom_text(aes(label = n), \n            vjust = -1,\n            size = 3) +\n  labs(title = \"Visit Frequency to All Fishing Grounds and Preserves by Month\",\n       x = \"Month\",\n       y = \"Frequency\") +\n  geom_hline(average, \n             yintercept = as.numeric(average), \n             color=\"black\",\n             linetype = 6) +\n  geom_point(x = 5, y = 13315,\n             size = 4, color = \"red\") +\n  geom_text(aes(x = 5, y = 13315, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = -0.2,\n            size = 3) +\n  geom_text(aes(x = 4.5, y = 12000, label = \"Monthly Average = 11854\"),\n            color = \"black\",\n            size = 3) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nDerive monthly transponder ping:\n\n\nShow the code\nmonthly_vessel_movement &lt;- vessel_movement %&gt;% \n  filter(type == \"FishingVessel\") %&gt;%\n  mutate(month = month(time)) %&gt;% \n  select(loc, vessel, month) %&gt;% \n  group_by(loc, month) %&gt;% \n  summarize(n = n()) \n\n\n\n\nShow the code\nmonthly_vessel_movement$month &lt;- factor(monthly_vessel_movement$month)\nmonthly_vessel_movement$loc &lt;- factor(monthly_vessel_movement$loc,\n                                             levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\n\nhline.data &lt;- monthly_vessel_movement %&gt;% \n  group_by(loc) %&gt;%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_vessel_movement, \n       aes(x = month, \n           y = n, \n           group = loc, \n           color = loc)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ loc, scales = \"free_y\") +  \n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", \n                y = avgvalue, \n                label = \"SouthSeafood caught\"), \n            vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n4.2 What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n\nShow the code\nmonthly_vessel_movement$month &lt;- factor(monthly_vessel_movement$month)\nmonthly_vessel_movement$loc &lt;- factor(monthly_vessel_movement$loc,\n                                             levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\n\nhline.data &lt;- monthly_vessel_movement %&gt;% \n  group_by(loc) %&gt;%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_vessel_movement, \n       aes(x = month, \n           y = n, \n           group = loc, \n           color = loc)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ loc, scales = \"free_y\") +  \n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", \n                y = avgvalue, \n                label = \"SouthSeafood caught\"), \n            vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion from the visualisation\n\n\n\nAfter SSFEC arrest:\n\nAbnormally high frequency of visit to Exit East. Upward trend of frequency of visit from Feb to Nov. Exit East offers deep sea fishing.\nDrastic drop in frequency of visit to the City of Haacklee. Investigate into changes in fish species in the cargoes through the months going to the City of Haacklee.\nDrop in frequency if visit in both Ghoti Preserve and Nemo Reef. However, the drop in Nemo Reef in actual value is greater. Nemo reef is a good area for violation of IUU as vessels have access to fish species in Nemo Reef that are common to the three fishing grounds, except for Helenaa species. Also, Nemo Reef sits between the two fishing grounds, maske good excuse for vessels to cut across it rather than using Nav D as safe navigation around Nemo Reef.\n\n\n\nChanges in fish species delivered to the City of Haacklee through the month\n\n\nShow the code\ncreate_heatmap(fish_by_port_agg, \"City of Haacklee\")\n\n\n\n\n\n\n\n\n\nUnderstanding the dwell time\n\n\nShow the code\nvessel_movement$loc &lt;- factor(vessel_movement$loc,\n                              levels = c(\"City of Himark\",\n                                      \"City of Lomark\",\n                                      \"City of Haacklee\",\n                                      \"City of Paackland\",\n                                      \"City of South Paackland\",\n                                      \"City of Port Grove\",\n                                      \"Ghoti Preserve\", \n                                      \"Nemo Reef\", \n                                      \"Don Limpet Preserve\",\n                                      \"Cod Table\", \n                                      \"Wrasse Beds\",\n                                      \"Tuna Shelf\",\n                                      \"Exit North\",\n                                      \"Exit South\",\n                                      \"Exit East\",\n                                      \"Exit West\",\n                                      \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                                      \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\"))\nggplot(vessel_movement, aes(x = loc, \n                            y = dwell,\n                            fill = loc_type)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous( limits = c(0, 500000))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion from the visualisation\n\n\n\n\nFor the cities, the outliers can be explained by the extend stay due to repair and replenishment purposes.\nFor all three ecological preserves, there are many outliers, and this is a tell-tale sign of extended stay in the preserves by fishing vessels for IUU fishing.\nFor the fishing grounds, the extended stay of fishing vessels may be explained by conducting of transshipment between small fishing vessels and bigger reefer/cargo ships, where the small fishing vessels stay at the location for fishing. There are fishing vessels that are out in the sea for months.\nFor the navigation points, Exit E display signs of abnormality due to its high number of outliers compared to other navigation points that are used for international shipping (Exit North, Exit South and Exit West). Nav 1 and Nav A may also be investigated since there are high numbers of outliers, and also, they are at the fringe of the Ghoti and Don Limpet Preserves respectively.\n\n\n\n\n\nShow the code\n# to change according to city \n\ncity_before &lt;- vessel_movement %&gt;% \n  filter(time &lt;= as.Date(\"2035-05-14\")) %&gt;% \n  filter(loc == \"City of Haacklee\") %&gt;% \n  ggplot(aes(x = loc, \n             y = dwell,\n             fill = loc)) +\n  geom_boxplot(width = 0.2) +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       subtitle = \"Before SSEC caught\",\n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\") +\n  scale_y_continuous( limits = c(0, 500000)) \n\ncity_after &lt;- vessel_movement %&gt;% \n  filter(time &gt; as.Date(\"2035-05-14\")) %&gt;% \n  filter(loc == \"City of Haacklee\") %&gt;% \n  ggplot(aes(x = loc, \n             y = dwell,\n             fill = loc)) +\n  geom_boxplot(width = 0.2) +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       subtitle = \"After SSEC caught\",\n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\") +\n  scale_y_continuous( limits = c(0, 500000))\n\ncity_before + city_after\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nAs we observe previously that there is a sharp drop in visit for the City of Haacklee, we also observe a drop in the median dwell time, and also much more data points that are outliers.\n\n\n\n\n\nShow the code\nvessel_movement %&gt;% \n  filter(type ==\"FishingVessel\") %&gt;% \n  filter(loc %in% c(\"Exit North\",\n                    \"Exit South\",\n                    \"Exit East\",\n                    \"Exit West\",\n                    \"Nav 1\",\"Nav 2\", \"Nav 3\", \n                    \"Nav A\", \"Nav B\", \"Nav C\", \"Nav D\", \"Nav E\")) %&gt;% \n  ggplot(aes(x = loc, \n       y = dwell,\n       fill = loc_type)) +                            \n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\",\n       subtitle = \"Comparing across the Navigation Points\",\n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, \n                                   hjust = 1)) \n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# to change according to navigation point \n\nnav_before &lt;- vessel_movement %&gt;% \n  filter(time &lt;= as.Date(\"2035-05-14\")) %&gt;% \n  filter(loc == \"Exit East\") %&gt;% \n  ggplot(aes(x = loc, \n             y = dwell,\n             fill = loc)) +\n  geom_boxplot(width = 0.2) +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       subtitle = \"Before SSEC caught\",\n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\") +\n  scale_y_continuous( limits = c(0, 25000))\n\nnav_after &lt;- vessel_movement %&gt;% \n  filter(time &gt; as.Date(\"2035-05-14\")) %&gt;% \n  filter(loc == \"Exit East\") %&gt;% \n  ggplot(aes(x = loc, \n             y = dwell,\n             fill = loc)) +\n  geom_boxplot(width = 0.2) +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Location\", \n       subtitle = \"After SSEC caught\",\n       x = \"Location\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\") +\n  scale_y_continuous( limits = c(0, 25000))\n\nnav_before + nav_after\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights from this visualisation\n\n\n\n\nWe notice that there is no significant change in activities in Exit East after SSEC got caught. However, this location remains highly suspicious for IUU as Exit East are meant for navigation purposes and vessels not meant to have overly long period in this area not designated for fishing.\nThis location offers opportunity for deep sea fishing, which may be unregulated (IUU), since we observe many instances of outliers (long dwell)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class Exercise/In-class_Ex09/In-class_Ex09.html",
    "title": "In-class Exercise 9",
    "section": "",
    "text": "Show the code\npacman::p_load(scatterPlotMatrix,\n               parallelPlot,\n               cluster, factoextra,\n               tidyverse)\n\n\n\n\nShow the code\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\n\n\nShow the code\nggplot(data = wine,\n       aes(x = type)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nwhitewine &lt;- wine %&gt;% \n  filter(type ==\"white\") %&gt;% \n  select(c(1:11))\n\n\nscatterPlotMatrix is a html matrix. 500 by 500 is based on number of pixel.\n\n\nShow the code\nscatterPlotMatrix(whitewine,\n                  corrPlotType = \"Text\",\n                  distribType = 1,\n                  width = 500,\n                  height = 500)\n\n\n\n\n\n\nNote: 1. use scatterPlotMatrixOutput and renderScatterPlotMatrix for implementation.\nDocumentation here\nNote: 1. Use nstart = 25, usual for clustering algorithm.\n\nUse set seed for consistency.\ncluster package has more features than base R.\n\n\n\nShow the code\nset.seed(123)\nkmeans4 &lt;- kmeans(whitewine, 4, nstart = 25)\nprint(kmeans4)\n\n\nK-means clustering with 4 clusters of sizes 757, 978, 1444, 1719\n\nCluster means:\n  fixed acidity volatile acidity citric acid residual sugar  chlorides\n1      6.981506        0.2965786   0.3563540       9.705878 0.05227081\n2      6.805112        0.2759356   0.3168814       3.607822 0.04012781\n3      6.908172        0.2776939   0.3455402       7.780852 0.04919668\n4      6.782403        0.2719372   0.3247469       5.348342 0.04324549\n  free sulfur dioxide total sulfur dioxide   density       pH sulphates\n1            52.83421             206.8164 0.9965522 3.176975 0.5179392\n2            20.52761              83.1411 0.9919192 3.175256 0.4707566\n3            42.31129             160.3061 0.9951215 3.193996 0.4940651\n4            30.11635             121.1963 0.9931958 3.195829 0.4847935\n    alcohol\n1  9.611471\n2 11.233930\n3 10.120392\n4 10.833256\n\nClustering vector:\n   [1] 3 4 2 1 1 2 4 3 4 4 2 4 2 3 3 4 2 2 3 4 2 2 4 3 4 1 3 4 4 4 4 2 2 4 3 4 3\n  [38] 4 3 3 3 3 3 3 3 3 1 1 3 3 3 4 2 4 4 1 1 3 2 4 4 3 3 2 4 4 4 3 2 4 1 1 1 2\n  [75] 2 4 2 2 4 4 4 3 3 1 3 3 3 1 3 3 3 1 4 4 3 1 3 2 2 3 1 3 3 3 1 4 3 3 3 1 3\n [112] 1 1 3 3 2 4 2 1 1 2 4 4 4 3 3 4 1 3 3 2 1 1 1 1 3 4 3 2 2 2 3 4 2 2 4 3 2\n [149] 2 4 3 3 4 2 2 1 1 4 4 4 4 3 2 1 1 3 1 2 3 4 4 2 2 4 3 3 2 3 4 3 3 1 3 1 1\n [186] 1 3 4 4 1 1 3 4 4 1 1 1 1 1 1 1 1 1 4 4 3 4 4 2 3 2 4 4 4 4 3 3 3 3 3 3 3\n [223] 4 3 4 3 1 1 1 3 4 1 1 1 1 1 1 1 4 3 1 2 2 1 3 1 4 2 2 4 1 1 3 4 3 3 2 2 4\n [260] 2 4 3 2 1 3 3 3 3 3 3 3 3 3 4 1 3 3 2 2 4 4 4 1 1 1 3 1 1 1 1 1 3 1 3 3 3\n [297] 3 1 3 4 2 2 2 3 3 3 3 3 4 3 2 3 3 3 3 4 4 4 4 2 2 4 4 4 1 1 1 3 1 2 4 4 2\n [334] 4 2 2 4 3 4 3 3 4 4 3 3 4 2 3 4 3 3 4 4 4 1 1 1 3 3 3 3 2 4 1 2 4 3 3 3 2\n [371] 3 3 1 3 2 2 4 2 3 4 2 3 3 3 4 2 4 1 4 1 1 2 4 2 3 3 2 4 3 2 4 3 4 1 3 3 4\n [408] 4 4 2 3 3 2 2 3 3 2 1 2 4 4 1 1 1 3 1 1 1 2 1 1 2 1 3 4 2 1 1 1 4 2 4 4 1\n [445] 3 2 3 4 4 4 3 4 3 4 4 4 2 4 1 1 4 3 3 2 3 4 3 2 3 1 3 1 2 4 4 1 4 4 3 3 3\n [482] 4 4 3 1 4 4 2 3 3 2 2 3 3 4 3 1 3 3 1 1 3 1 1 3 3 4 3 3 3 3 3 4 2 4 3 3 3\n [519] 2 2 4 4 2 2 2 4 2 4 4 4 4 3 3 3 3 3 3 3 2 1 3 1 3 3 3 3 3 2 4 1 3 2 4 3 4\n [556] 2 3 4 3 3 3 4 3 4 3 2 2 3 3 3 1 4 3 3 4 1 1 3 4 4 1 4 3 2 4 2 3 4 4 4 4 4\n [593] 3 4 4 4 3 4 4 2 3 4 4 4 4 4 3 3 3 2 4 2 4 4 4 4 2 1 1 4 1 3 4 2 4 4 3 1 1\n [630] 2 3 3 4 1 3 4 4 3 1 1 4 1 1 3 3 3 3 3 1 1 1 1 1 4 3 4 2 4 1 1 2 4 3 2 3 4\n [667] 1 3 3 1 1 2 3 4 1 1 1 2 2 2 3 3 3 3 3 1 4 1 1 4 4 1 1 3 1 1 2 1 1 1 1 4 2\n [704] 4 4 2 1 3 4 2 3 4 4 1 1 3 1 3 3 4 3 3 4 2 4 4 4 2 3 3 4 1 2 3 1 4 3 1 3 4\n [741] 2 2 4 3 3 4 1 3 3 3 3 3 3 1 4 4 3 3 3 4 3 3 1 4 3 4 1 2 4 4 4 3 3 3 4 4 2\n [778] 1 3 3 2 1 3 3 1 4 4 4 4 4 4 2 3 2 3 3 1 3 4 2 3 1 1 3 4 3 1 1 1 1 1 4 3 3\n [815] 1 4 2 4 4 4 2 1 4 4 2 3 3 4 2 2 4 3 4 2 4 4 3 3 3 4 4 3 3 4 4 4 3 2 3 4 4\n [852] 3 4 3 4 4 3 3 3 3 4 1 3 4 3 4 4 3 3 2 3 3 4 2 2 4 4 4 4 4 4 4 4 4 1 4 3 2\n [889] 3 2 3 4 4 4 4 2 1 2 2 1 3 4 1 1 3 2 2 4 3 1 4 4 4 2 2 2 4 4 4 4 3 3 3 1 3\n [926] 2 2 3 3 4 2 1 1 1 1 1 2 4 1 1 1 1 2 4 4 4 1 3 2 2 4 4 2 4 4 4 4 2 2 3 3 4\n [963] 3 4 3 2 1 3 2 2 2 4 3 2 4 4 4 1 3 2 2 3 2 2 3 4 3 3 3 4 3 2 1 2 3 3 2 3 3\n[1000] 3 2 1 1 4 3 2 3 2 1 3 4 3 2 1 3 4 4 4 3 1 4 4 1 3 3 4 3 2 4 1 3 1 1 1 1 3\n[1037] 2 2 4 2 4 2 4 1 2 2 4 2 2 4 3 4 2 4 2 4 4 1 4 3 4 1 1 1 3 4 3 4 2 3 3 4 4\n[1074] 1 3 4 3 4 1 1 4 3 3 1 4 3 4 4 1 4 1 3 3 4 1 2 3 4 4 4 3 4 3 4 3 1 4 2 2 3\n[1111] 2 2 3 2 2 2 2 1 2 4 4 4 2 4 4 3 3 2 2 4 3 4 3 4 4 3 3 3 4 2 2 3 4 4 4 1 3\n[1148] 3 4 1 1 1 2 2 3 3 4 4 1 4 3 4 3 1 2 4 2 4 2 3 4 4 4 4 1 3 1 3 3 4 4 4 4 4\n[1185] 4 1 3 4 3 2 4 4 4 4 1 3 4 4 4 2 2 2 1 2 2 1 3 1 4 4 2 3 3 2 2 3 2 1 4 2 1\n[1222] 4 4 3 4 2 4 4 4 2 1 4 2 4 3 1 2 4 4 3 3 3 3 4 4 1 3 2 2 1 3 3 3 3 3 4 3 1\n[1259] 1 1 1 3 3 1 2 3 4 3 4 1 3 4 3 4 1 4 3 4 4 3 4 3 3 3 3 4 3 4 4 2 2 1 2 2 2\n[1296] 1 4 4 3 3 3 3 1 3 1 4 4 4 4 2 3 4 3 3 3 3 1 3 2 1 4 4 3 3 3 4 3 3 2 4 4 4\n[1333] 1 3 4 1 3 1 1 4 4 3 4 3 3 4 3 3 3 2 4 4 1 1 3 3 1 3 4 4 3 1 4 2 3 4 2 4 1\n[1370] 1 4 3 3 3 4 4 4 4 4 4 3 2 2 2 4 4 4 2 4 1 4 2 2 2 4 2 4 1 1 2 1 1 4 4 2 4\n[1407] 2 2 1 4 2 2 3 4 4 2 4 1 4 4 4 2 4 1 4 4 4 3 2 2 4 2 2 2 3 2 1 2 1 1 3 4 4\n[1444] 4 3 4 2 3 3 3 3 4 3 3 1 3 2 4 3 4 4 3 3 4 3 3 3 2 2 4 3 3 2 4 2 3 3 2 3 4\n[1481] 3 4 1 2 4 4 2 3 1 1 4 2 1 3 1 1 2 4 2 3 4 3 4 4 4 4 1 3 3 4 4 4 4 3 4 4 3\n[1518] 3 2 3 3 4 3 3 3 3 3 1 3 3 3 3 1 4 3 4 2 3 4 4 3 2 4 2 2 3 3 3 4 4 3 4 3 3\n[1555] 3 3 3 3 4 2 3 4 4 3 4 4 3 4 1 3 3 1 3 4 4 1 2 4 3 1 4 2 4 3 1 3 3 1 3 4 3\n[1592] 3 4 2 4 1 4 1 4 2 4 1 2 2 4 4 4 4 1 1 4 2 2 4 4 3 1 4 1 4 2 4 3 4 4 3 1 4\n[1629] 4 2 4 4 4 4 1 4 3 3 1 4 3 3 4 3 4 3 3 2 2 3 4 1 4 3 3 4 2 3 1 1 1 1 4 3 3\n[1666] 4 2 4 2 4 3 2 3 3 1 1 2 3 3 4 1 1 1 1 1 1 3 1 1 4 3 1 1 1 3 4 1 1 1 3 4 1\n[1703] 4 3 3 4 3 3 3 3 2 4 3 4 4 3 4 4 3 2 3 1 3 3 4 3 2 1 4 4 4 1 4 4 1 3 2 1 2\n[1740] 2 3 3 3 3 4 1 2 3 2 4 3 3 1 3 2 3 1 1 2 1 1 4 2 4 1 1 1 3 3 4 3 3 3 3 2 4\n[1777] 3 3 3 3 3 1 3 2 4 3 4 3 4 1 3 4 3 1 4 3 4 4 3 3 1 2 3 3 1 4 4 1 4 1 3 4 2\n[1814] 4 2 3 4 4 2 4 3 4 2 1 3 2 3 1 1 3 3 3 3 3 3 1 4 4 1 4 3 4 1 4 2 3 3 3 1 1\n[1851] 3 2 4 4 3 1 3 3 3 1 3 1 4 1 4 4 1 4 3 3 3 3 3 3 3 3 3 2 1 2 1 2 1 1 4 2 4\n[1888] 3 1 4 1 1 3 3 3 1 3 3 2 4 3 4 3 4 1 3 4 3 2 4 3 2 4 3 4 2 3 2 3 1 3 4 4 2\n[1925] 2 2 2 3 1 3 1 1 2 3 2 3 1 3 2 3 1 3 1 1 1 3 3 1 4 3 1 3 4 3 1 3 2 2 1 2 2\n[1962] 4 2 1 3 3 4 1 3 3 4 3 4 4 4 1 1 3 4 1 1 1 1 1 1 3 3 3 1 4 4 1 2 3 3 3 3 3\n[1999] 3 1 3 3 3 3 3 3 3 2 3 2 2 3 3 4 2 2 4 2 4 4 3 3 1 3 1 3 2 3 3 1 4 3 2 1 4\n[2036] 2 3 3 4 2 1 4 4 4 4 2 4 3 3 3 4 3 3 2 2 3 3 3 1 3 1 2 4 4 3 4 4 3 4 4 3 4\n[2073] 3 1 3 4 4 1 4 4 4 2 4 4 3 3 2 3 4 3 3 3 2 4 4 3 4 3 3 3 3 2 1 4 3 4 1 3 3\n[2110] 1 3 3 3 2 1 3 2 4 4 4 3 4 3 3 4 3 3 1 3 4 4 3 3 3 4 1 4 1 2 2 4 4 3 2 3 3\n[2147] 4 4 2 2 4 4 2 2 1 3 2 2 4 2 4 2 4 2 4 3 3 1 1 1 1 1 4 3 1 1 4 4 3 4 3 4 3\n[2184] 3 4 2 2 4 2 4 4 3 3 4 2 4 2 2 1 1 3 3 1 3 3 3 4 4 4 4 3 4 4 4 4 3 2 4 3 4\n[2221] 4 3 3 3 3 3 3 3 4 3 4 3 2 3 2 4 1 3 3 4 3 1 3 3 1 4 3 3 2 1 1 4 3 1 3 4 4\n[2258] 4 1 4 1 4 2 3 3 3 3 3 3 3 4 3 4 2 4 3 1 2 1 3 2 2 1 1 1 1 3 3 1 2 4 3 1 2\n[2295] 4 3 3 1 4 4 4 4 1 4 3 3 4 3 4 4 3 4 4 2 4 3 4 3 3 2 4 3 4 3 1 4 4 4 4 3 1\n[2332] 3 1 4 1 4 1 3 3 2 3 3 2 3 2 1 3 2 4 3 1 1 4 2 2 4 4 2 1 4 4 2 3 3 1 4 1 1\n[2369] 3 3 4 1 2 2 1 3 1 2 1 1 1 3 4 2 4 3 3 3 2 2 4 3 4 4 1 1 1 2 2 2 2 4 1 4 4\n[2406] 1 2 4 1 4 1 1 1 4 1 4 1 1 2 1 4 1 1 4 1 4 3 1 3 1 1 3 1 1 1 4 3 3 3 4 3 3\n[2443] 1 1 1 1 1 4 4 1 3 3 4 4 1 1 3 3 1 3 3 2 2 3 4 3 3 4 2 4 3 3 2 4 2 4 3 2 1\n[2480] 4 4 1 1 1 1 1 4 4 4 3 4 1 3 4 4 3 2 4 4 3 4 1 4 4 3 1 1 4 3 4 1 1 2 4 3 2\n[2517] 3 1 2 1 3 4 3 3 3 3 4 4 4 3 3 3 3 3 2 3 4 4 4 4 3 3 3 4 4 3 3 4 1 1 4 1 4\n[2554] 3 3 3 3 3 3 4 2 4 2 4 3 1 2 4 1 4 4 2 2 3 3 1 1 1 4 4 3 3 3 3 3 3 3 2 3 3\n[2591] 4 3 3 3 4 3 1 4 1 1 4 1 4 4 4 2 3 1 1 2 3 1 4 4 2 4 4 4 4 3 3 4 4 4 2 3 4\n[2628] 4 1 1 4 4 1 3 1 2 3 1 4 2 2 3 2 3 3 4 2 4 3 3 3 3 2 3 1 1 1 4 3 2 3 3 4 2\n[2665] 2 4 3 4 4 3 3 3 4 2 4 4 2 3 4 4 4 3 4 4 4 2 4 1 3 4 4 4 3 4 4 4 3 2 3 4 2\n[2702] 4 4 4 1 1 1 4 1 1 1 3 3 1 1 3 1 3 2 3 2 3 4 4 3 3 2 4 1 2 1 3 4 2 3 1 4 2\n[2739] 4 2 3 4 3 2 2 2 3 4 3 4 3 4 4 2 2 1 1 2 2 4 3 3 3 4 3 4 2 3 4 3 1 4 4 2 4\n[2776] 4 4 4 2 4 4 3 1 1 1 3 2 3 3 3 1 1 1 4 3 2 4 3 4 4 1 1 2 2 2 4 3 3 1 3 2 4\n[2813] 4 3 2 2 4 2 3 4 4 1 3 2 3 3 1 3 3 3 3 3 2 4 4 3 1 3 2 2 2 2 2 2 2 2 2 2 3\n[2850] 1 3 2 3 4 2 3 4 2 3 4 3 2 2 2 4 4 4 4 4 4 4 2 3 2 4 2 3 3 4 2 2 2 4 2 4 2\n[2887] 2 2 2 4 3 3 1 3 2 3 1 1 2 3 2 2 3 2 4 3 1 2 2 2 3 3 2 1 2 2 4 4 2 4 2 1 4\n[2924] 4 4 1 2 3 3 4 3 2 1 4 2 2 2 1 4 4 4 4 3 4 4 3 4 4 1 4 4 2 4 4 2 4 2 2 2 2\n[2961] 4 4 2 4 4 4 4 4 3 2 3 4 4 4 4 3 4 4 4 4 4 2 1 3 2 4 4 4 2 1 3 3 4 4 4 4 4\n[2998] 3 4 4 4 4 3 2 4 3 1 3 3 1 1 4 2 4 2 2 4 3 4 2 2 2 4 2 4 3 4 3 4 4 4 4 2 1\n[3035] 3 2 1 3 4 1 4 3 3 4 4 2 4 3 4 1 1 1 3 4 2 4 2 4 1 2 3 3 4 3 1 4 1 4 4 2 4\n[3072] 2 3 4 4 2 4 1 2 4 2 3 2 2 2 2 2 1 2 2 2 1 3 4 2 2 2 4 4 4 4 2 4 4 4 3 3 3\n[3109] 3 1 4 2 4 4 4 4 2 2 3 2 1 4 4 2 4 3 4 2 2 4 3 1 4 4 4 1 4 4 4 4 1 2 4 4 4\n[3146] 4 4 3 4 3 2 4 1 2 4 4 4 4 4 4 2 4 4 4 1 4 4 4 2 4 3 2 4 4 4 3 2 3 2 4 2 4\n[3183] 4 2 2 4 2 4 4 3 4 3 4 4 2 4 4 4 4 4 3 4 2 4 3 3 2 4 3 3 4 3 4 3 2 2 4 4 4\n[3220] 2 2 2 4 3 3 2 4 1 1 4 3 4 2 2 4 3 3 3 4 2 4 4 4 2 2 4 4 3 3 3 4 3 4 4 1 1\n[3257] 1 1 1 1 1 2 1 2 1 3 4 3 4 1 4 2 2 4 4 2 3 4 1 4 4 4 4 3 4 4 4 4 3 1 2 2 1\n[3294] 2 4 1 1 1 4 4 2 2 2 2 3 2 3 1 4 2 4 3 2 2 1 2 2 4 4 3 4 2 4 2 4 4 3 2 4 4\n[3331] 3 3 3 3 2 1 1 1 2 2 4 2 4 1 1 1 1 3 2 2 4 2 2 2 4 4 3 2 2 2 2 2 4 2 2 2 4\n[3368] 4 3 4 4 4 3 4 3 4 3 1 3 1 4 4 4 3 3 4 3 1 2 2 4 4 2 4 1 1 4 1 1 2 4 4 4 4\n[3405] 2 4 2 1 1 4 3 4 3 1 3 3 1 2 1 3 3 2 4 3 4 3 3 3 4 3 3 3 4 2 2 2 2 4 1 4 4\n[3442] 4 2 4 1 4 3 2 4 4 4 4 4 2 4 2 3 3 4 3 4 1 4 4 3 4 4 1 2 3 1 4 4 2 1 3 2 3\n[3479] 3 2 2 4 2 2 2 4 2 1 2 2 3 4 4 4 4 4 3 3 4 4 4 4 3 2 4 4 3 4 3 3 3 2 4 2 2\n[3516] 2 3 4 4 4 1 3 3 1 4 4 4 3 2 4 3 3 2 3 3 3 2 4 4 2 2 4 3 3 3 1 3 1 4 3 4 4\n[3553] 4 4 2 4 4 2 4 2 2 2 3 2 2 2 4 2 2 2 2 2 4 2 4 4 3 4 4 2 3 4 2 2 2 4 3 4 4\n[3590] 4 4 3 3 3 4 4 4 3 3 1 2 4 4 4 2 3 3 2 3 3 3 2 4 3 3 2 1 4 4 4 3 4 2 4 2 1\n[3627] 4 1 3 3 4 4 4 4 3 2 2 4 2 2 4 3 3 4 4 3 2 2 4 4 4 1 4 1 4 4 1 4 3 4 4 3 2\n[3664] 3 3 4 3 4 2 4 3 2 2 2 4 3 2 3 4 4 1 4 4 1 4 1 3 2 1 4 3 4 4 4 4 3 4 1 2 3\n[3701] 3 4 3 3 3 3 2 4 1 3 2 3 3 1 2 1 3 4 4 1 3 4 4 3 4 4 4 3 2 4 1 3 4 4 4 2 2\n[3738] 4 4 3 3 3 3 3 3 3 4 1 4 3 3 4 3 3 4 4 4 3 3 4 4 2 2 2 4 1 1 1 4 1 4 4 4 4\n[3775] 1 4 4 4 4 2 1 4 2 1 4 2 1 1 1 1 1 1 4 3 4 4 2 2 4 3 2 2 4 4 2 2 2 4 4 4 3\n[3812] 3 4 3 3 4 4 4 4 4 4 3 1 1 4 2 4 2 4 2 4 4 4 4 3 4 4 4 3 4 2 1 4 4 2 3 4 3\n[3849] 2 2 4 4 2 4 4 3 2 4 4 1 1 3 1 1 2 4 4 1 1 3 3 1 1 3 1 4 3 2 3 2 4 4 4 3 4\n[3886] 2 3 2 4 4 2 4 4 2 4 2 3 3 4 4 2 2 2 2 4 2 2 2 4 4 3 4 2 4 4 4 3 1 4 4 4 3\n[3923] 2 4 4 2 2 4 3 3 2 4 4 2 2 1 4 3 2 3 3 3 4 4 3 3 4 3 4 3 3 3 2 4 3 2 4 2 4\n[3960] 4 3 3 4 4 3 2 4 1 1 4 3 4 2 1 1 3 4 4 1 1 3 3 3 4 4 4 4 1 4 4 1 4 2 4 4 4\n[3997] 4 3 4 4 4 4 2 4 4 4 2 4 2 3 4 3 4 3 1 2 3 4 1 2 2 4 3 3 3 2 3 3 2 4 4 4 4\n[4034] 4 4 3 3 3 4 4 1 3 4 4 4 4 3 4 4 2 4 2 3 4 3 2 4 4 4 2 2 2 4 4 2 4 3 3 3 4\n[4071] 3 2 3 4 2 4 4 4 4 2 4 4 3 3 2 2 2 4 2 4 3 2 4 2 2 2 4 2 4 4 2 3 3 2 2 4 3\n[4108] 3 4 3 1 2 2 2 4 2 3 3 4 3 4 3 3 2 2 3 3 1 1 2 4 1 1 4 2 4 4 1 2 3 3 3 4 4\n[4145] 3 3 4 3 4 2 1 1 4 1 1 1 1 3 3 3 3 3 3 4 4 2 3 4 4 4 3 4 3 2 3 3 3 4 4 1 4\n[4182] 2 3 2 2 1 2 4 4 4 2 4 2 2 2 2 2 3 3 2 2 2 4 3 4 2 3 4 2 2 4 1 3 2 1 1 1 4\n[4219] 3 1 2 4 4 2 2 1 3 2 1 4 4 2 2 4 4 4 4 2 4 2 4 3 3 2 4 4 2 4 4 3 2 2 2 2 4\n[4256] 4 4 4 4 4 3 4 3 3 4 3 4 4 3 1 3 1 4 4 4 4 4 3 2 4 4 4 4 2 2 2 2 4 2 4 4 1\n[4293] 4 1 4 1 4 4 4 3 3 3 1 4 4 4 4 4 2 4 3 4 4 2 4 4 2 3 4 4 1 3 4 4 4 3 3 3 3\n[4330] 3 3 3 3 3 3 3 3 3 3 2 3 4 3 4 4 4 4 3 3 1 2 4 3 3 3 4 3 1 3 1 3 4 4 4 4 3\n[4367] 4 4 4 4 4 2 4 2 3 1 4 2 4 4 3 3 4 2 3 3 3 2 2 4 3 1 3 3 3 3 3 3 3 3 3 4 3\n[4404] 1 1 1 4 2 1 4 3 2 4 2 4 4 3 4 4 4 4 4 4 4 4 4 4 1 3 3 3 2 2 1 3 3 2 3 4 4\n[4441] 3 4 3 4 4 4 4 2 4 3 4 1 3 2 3 3 3 3 4 4 3 3 4 4 4 4 3 3 2 4 2 2 2 4 4 4 4\n[4478] 3 3 4 4 3 3 4 4 2 2 2 4 4 4 2 2 3 2 1 2 3 4 2 3 3 3 4 4 3 4 2 3 2 3 4 4 2\n[4515] 1 4 2 2 2 3 1 1 2 3 3 3 1 2 2 3 3 3 4 4 4 3 3 2 4 2 4 4 2 2 4 4 2 2 1 2 2\n[4552] 4 4 4 4 2 4 1 4 4 4 2 4 4 4 3 3 3 4 4 2 2 2 2 4 4 2 2 2 4 4 4 3 3 4 3 4 4\n[4589] 4 4 3 1 3 4 4 4 4 2 4 2 4 4 3 4 3 2 4 3 2 2 2 2 3 3 3 4 2 4 4 1 4 2 4 4 2\n[4626] 3 1 2 2 2 4 4 1 1 4 4 3 4 3 1 4 4 2 1 4 3 2 4 1 2 2 4 1 2 3 3 3 3 4 2 2 3\n[4663] 4 4 4 4 1 4 4 4 3 3 3 4 3 3 4 4 3 3 4 2 2 4 1 4 4 3 3 3 3 3 3 3 3 4 2 4 4\n[4700] 3 3 3 3 2 1 4 4 4 4 3 4 4 4 2 4 2 2 4 4 2 2 2 4 3 2 4 2 4 4 2 4 3 3 4 2 2\n[4737] 2 4 4 2 1 4 4 3 2 1 4 2 3 3 3 1 2 4 4 2 4 4 4 4 4 4 2 4 4 2 4 3 3 3 3 3 1\n[4774] 2 4 4 4 4 4 2 4 3 4 4 3 2 4 4 3 4 4 4 4 3 3 3 3 2 4 4 4 3 4 4 2 2 4 4 2 3\n[4811] 3 2 4 3 4 4 3 4 2 4 3 4 3 4 3 4 4 2 3 2 4 4 4 2 2 4 2 1 4 2 4 1 2 3 3 2 3\n[4848] 4 3 3 3 3 4 2 2 3 3 4 3 4 4 2 2 2 3 2 4 2 4 2 4 2 3 4 4 2 4 2 2 3 3 4 3 3\n[4885] 3 3 4 2 4 4 2 4 4 2 3 4 4 2\n\nWithin cluster sum of squares by cluster:\n[1] 681403.3 357903.9 579703.3 462118.7\n (between_SS / total_SS =  80.0 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\n\n\n\nShow the code\nfviz_cluster(kmeans4, data = whitewine)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nwhitewine &lt;- whitewine %&gt;% \n  mutate(Cluster = kmeans4$cluster)\n\n\nNote: Cluster value is integer. We use the following code to change it to factor.\n\n\nShow the code\nwhitewine$Cluster &lt;- \n  as_factor(whitewine$Cluster)\n\n\n\n\nShow the code\nwhitewine %&gt;% \n  parallelPlot(refColumnDim = \"Cluster\",\n               width = 300,\n               height = 250,\n               rotateTitle = TRUE)\n\n\n\n\n\n\nNote: 1. parallelPlotOutput() and renderParallelPlot() when deploying in Shiny."
  }
]