[
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Mini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\nThe details of the mini challenge can be found here.\n\n\n\nFishEye analysts need your help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. Your task is to develop new visual analytics tools and workflows that can be used to discover and understand signatures of different types of behavior. Can you use your tool to visualize a signature of SouthSeafood Express Corp’s illegal behavior? FishEye needs your help to develop a workflow to find other instances of illegal behavior.\n\nFishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\nDevelop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\nTo support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\nHow did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n\n\n\n\n\n\n\npacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf,\n               patchwork, CGPfunctions,\n               ggHoriPlot)\n\n\n\n\nLoading the .json data using jsonlite package.\n\nmc2_data &lt;- fromJSON(\"data/MC2/mc2.json\")\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\noceanus_map &lt;- read_sf(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\")\n\nLoading the oceanus map:\n\nggplot(oceanus_map) +\n  geom_sf(color = \"black\",\n          ) +\n  theme_void() +\n  geom_sf_text(aes(label = Name), size = 2,\n               vjust = 1.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, we extract only distinct edges from the tibble links data.frame of mc2_data and save it as a tibble data.frame called mc2_edges.\n\nmc2_edges &lt;- mc2_data$links %&gt;% \n  distinct()\n\nNext, glimpse() of dplyr will be used to reveal the structure of mc2_edges tibble data.table.\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;chr&gt; \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\nFrom the table above, we can identify some issues with the data:\n\nThe columns with date data type are all in character format.\nSome columns have names that starts with “_”. These need to be rename to avoid coding issues.\n\n\n\n\n\nmc2_edges$time &lt;- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` &lt;- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` &lt;- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date &lt;- as_datetime(mc2_edges$date)\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;dttm&gt; 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` &lt;dttm&gt; 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\nmc2_edges &lt;- mc2_edges %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\nThe code chunk below combined the following steps:\n\nSplitting the words by “.” - after observing that the format for type is as such: “Event.TransportEvent.TransponderPing”\nThe max(lengths(word_list)) will be used to find the maximum number of elements in any split.\nApply function(x) to pad shorter splits with NA values to make them all the same length.\nCreate word_df and changing column names to event1 etc.\nConvert word_df from matrix into tibble data.frame, and checks its class.\nAppend word_df to mc2_edges tibble data.frame.\nSaving mc2_edges into R rds format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\nword_list &lt;- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"event\", 1:max_elements)\n\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(event2, event3)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nmc2_edges &lt;- mc2_edges %&gt;%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n\n\n\n\n\n\n\nThe code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\nmc2_nodes &lt;- as_tibble(mc2_data$nodes) %&gt;%\n  distinct()\n\nNext, take a glimpse() to understand the data structure.\n\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for type column issues we discussed earlier, two additional data issues can be observed. They are:\n\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data.\nSome values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.\n\n\n\nCorrect the date data type and take a glimpse() to confirm changes.\n\nmc2_nodes$`_last_edited_date` &lt;- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` &lt;- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date &lt;- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;dttm&gt; 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  &lt;dttm&gt; 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R rds format yet, as there are more works to be done to clean up the dataframe.\n\nword_list &lt;- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"entity\", 1:max_elements)\n\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(entity2, entity3)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  cbind(word_df)\n\n\n\n\nUsing mutate() of dplyr and gsub() of Base R to tidy up the values in the cell. Essentially, the unwanted characters like c, (, ), and \\ are removed by substituting with empty value \"\" for both Activities and fish_species_present columns. What is left in the columns will be characters separated by ,.\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %&gt;% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %&gt;%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %&gt;% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %&gt;%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\nLastly, we will save the tidied mc2_nodes\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\n\n\n\n\n\nIn this section, we will extract the required column for the following graphs:\n\nVessel Movements\nHarbor Reports\nHarbor Import Records\n\n\n\nVessel Movements: Oceanus is outfitted with a transponder/ping system named the Oceanus Vessel Locator System (OVLS).  Vessels are outfitted with a transponder and periodic ‘pings’ from base-stations results in a report of vessel locations at any time.  The raw ping granularity is at the minute-level but post-processing has converted it into visit/dwell times. OVLS is generally reliable, though vessel records may be missing for a variety of reasons.\nNode/Edge types and properties present\n\nEntity.Vessel: Description of the vessel\nEntity.Location: Description of a geographic location\nEvent.TransponderPing: Links a vessel to a location\n\nFirst, we will extract the relevant nodes, namely the vessels and locations from mc2_nodes. As we are only concerned about the fishing vessels, we will only extract values matching “Vessel” in entity2 column and values matching “FishingVessel” in entity3 column. For locations, we will match values of “Location” in entity2 column, and match values of “City”, “Point” and “Region” in entity3 column.\n\nvessel_mvmt_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 %in% c(\"Vessel\",\"Location\")) %&gt;% \n  filter(entity3 %in% c(\"FishingVessel\",\"City\",\"Point\",\"Region\"))\n\nNext, we will extract the vessel movement edges from mc2_edges, by filtering the “TransponderPing” from event3 column.\n\nvessel_mvmt_edges &lt;- mc2_edges %&gt;% \n  filter(event3 %in% c(\"TransponderPing\"))\n\n\n\n\nHarbor Reports: Harbor masters regularly report the vessels found in their purview anytime during the day.  This data is derived from a different system than OVLS (see “Vessel Movements”), though the data overlaps.  Harbor Reports are provided on a different schedule from different harbors. Since no harbor reports every day, this data has lower temporal granularity than vessel movement data. Additionally, the Harbor Master is also responsible for proximate navigational beacon(s), so this data has lower spatial granularity as well.  However, the list of vessels observed is considered canonical.\nNode/edge types present:\n\nEntity.Vessel\nEntity.location\nEvent.HarborReport\n\nSince the node type are the same as the vessel movements, we will make a copy of the node from vessel movement nodes.\n\nharbor_report_nodes &lt;- vessel_mvmt_nodes\n\nNext, we will extract the harbor report edges from mc2_edges, by filtering the “HarborReport” from event3 column.\n\nharbor_report_edges &lt;- mc2_edges %&gt;% \n  filter(event2 %in% c(\"HarborReport\"))\n\n\n\n\nHarbor Import Records: Vessels deliver cargo to the ports, and that cargo is brought into Oceanus.  These records reflect the goods that *leave* the harbor to go to businesses in Oceanus or to be exported.  It was filtered pre-ingest to focus on the delivery of raw fish.  Because it is raw, fish leave the port quickly (generally one day after delivery).  Due to clerical error, the records purchased by FishEye do not include the vessel that delivered the cargo.\nNode/Edge types present:\n\nEntity.location\nEntity.Commodity.Fish\nEntity.Document.DeliveryReport\nEvent.Transaction\n\nFirst, we will extract the relevant nodes, namely the location, commodity.fish and document.delivery report from mc2_nodes.\n\nharbor_import_records_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 %in% c(\"Location\",\"Commodity\",\"Document\"))\n\nNext, we will extract harbor import records edges, by filtering the event2 with value of “Transaction”.\n\nharbor_import_records_edges &lt;- mc2_edges %&gt;% \n  filter(event2 == \"Transaction\")\n\nBefore we move on to exploring the data, we will save the 3 sources edges and nodes tibble data frame as R rds format in the data/rds folder:\n\nwrite_rds(vessel_mvmt_nodes, \"data/rds/vessel_mvmt_nodes.rds\")\nwrite_rds(vessel_mvmt_edges, \"data/rds/vessel_mvmt_edges.rds\")\nwrite_rds(harbor_report_nodes, \"data/rds/harbor_report_nodes.rds\")\nwrite_rds(harbor_report_edges, \"data/rds/harbor_report_edges.rds\")\nwrite_rds(harbor_import_records_nodes, \"data/rds/harbor_import_records_nodes.rds\")\nwrite_rds(harbor_import_records_edges, \"data/rds/harbor_import_records_edges.rds\")\n\n\n\n\n\nIn this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:\n\nAssociating the vessels with their probable cargoes\nWhich vessels deliver which products and when?\nExamine the seasonal trends and anomalies in the port exit records\n\n\n\n\nTo find out which commodity goes to which ports, we first create a cargo list that links the cargo to the cities and commodities. At the same time, we also clean up the name of the fish, leaving only its common name in the “name” column, by removing all the characters after the “/”.\n\ncargo_port_list &lt;- harbor_import_records_edges %&gt;% \n  select(source,target) %&gt;% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\ncargo_commodity_list &lt;- harbor_import_records_edges %&gt;% \n  select(source,target) %&gt;% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  rename(commodity = target)\n\ncargo_list &lt;- cargo_port_list %&gt;% \n  left_join(cargo_commodity_list) %&gt;%\n  left_join(harbor_import_records_edges) %&gt;% \n  select(source, target, commodity, date) %&gt;% \n  rename(cargo = source, city = target) \n\ncargo_list&lt;- harbor_import_records_nodes %&gt;% \n  rename(commodity = id) %&gt;% \n  select(name, commodity) %&gt;% \n  left_join(cargo_list) %&gt;% \n  mutate(name = str_replace(name, \"/.*\", \"\"))\n\ncargo_list&lt;- harbor_import_records_nodes %&gt;% \n  select(id,qty_tons) %&gt;% \n  rename(cargo = id) %&gt;% \n  left_join(cargo_list,\n            unmatched = \"drop\") %&gt;%\n  filter(if_all(c(qty_tons), ~ !is.na(.)))\n\nMatching the vessel with the cargo list\nWe first single out all the fishing vessels from mc2_edges and define the fishing vessel location, start time and end time of the vessels in the particular location.\n\nfishing_vessel_list &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"FishingVessel\") %&gt;% \n  select(id) \n\nfishing_vessel_list &lt;- as.list(fishing_vessel_list)\n\nvessel_location &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, target, time, dwell) %&gt;% \n  arrange(target,time) %&gt;% \n  mutate(next_time = ifelse(lead(target) == target, lead(time), NA)) %&gt;% \n  mutate(next_time = as_datetime(next_time))   %&gt;% \n  mutate(end_time = time + dwell)\n\nvessel_location_city &lt;- vessel_location %&gt;% \n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\nMerging cargo_list and vessel_location_city\n\ncargo_list &lt;- cargo_list %&gt;% \n  mutate(vessel_delivery_date = date + days(-1))\n\n\nvessel_location_city &lt;- vessel_location_city %&gt;% \n  mutate(date = substr(`time`,1,10)) %&gt;% \n  mutate(vessel_delivery_date = ymd(date)) \n\n\nvessel_location_match &lt;- vessel_location_city %&gt;% \n  select(source,target,vessel_delivery_date) %&gt;% \n  rename(city = source, vessel_hr = target) %&gt;% \n  left_join(cargo_list,\n            unmatched = \"drop\") %&gt;%\n  filter(if_all(c(qty_tons), ~ !is.na(.))) %&gt;% \n  distinct()\n\nThere are a total of 5,307 unique cargoes, but we have 65,340 matches between the cargoes and vessels.\n\nvessel_location_match %&gt;% \n  select(cargo) %&gt;% \n  distinct()\n\n                   cargo\n1    cargo_2035_30543bf8\n2    cargo_2035_30544dae\n3    cargo_2035_2669078b\n4    cargo_2035_30545119\n5    cargo_2035_305464b1\n6    cargo_2035_26699791\n7    cargo_2035_30548bdf\n8    cargo_2035_27003cd3\n9    cargo_2035_3001480a\n10   cargo_2035_3113485f\n11   cargo_2035_3113505b\n12   cargo_2035_300163b6\n13   cargo_2035_31138b98\n14   cargo_2035_260361c4\n15   cargo_2035_3001893d\n16   cargo_2035_305503db\n17   cargo_2035_3113943e\n18   cargo_2035_3114013f\n19   cargo_2035_30021d35\n20   cargo_2035_31141efd\n21   cargo_2035_31142cb2\n22   cargo_2035_2700770f\n23   cargo_2035_2604045d\n24   cargo_2035_3002397e\n25   cargo_2035_3055178e\n26   cargo_2035_31143154\n27   cargo_2035_3114447b\n28   cargo_2035_30025175\n29   cargo_2035_305522ac\n30   cargo_2035_311451b5\n31   cargo_2035_31146b3e\n32   cargo_2035_27009220\n33   cargo_2035_285584e7\n34   cargo_2035_3002772e\n35   cargo_2035_311470e5\n36   cargo_2035_31149290\n37   cargo_2035_305538c2\n38   cargo_2035_30029c52\n39   cargo_2035_26263703\n40   cargo_2035_29369e58\n41   cargo_2035_250710f3\n42   cargo_2035_26268346\n43   cargo_2035_264947cc\n44   cargo_2035_29374be7\n45   cargo_2035_262704be\n46   cargo_2035_29376731\n47   cargo_2035_2507376e\n48   cargo_2035_26272077\n49   cargo_2035_26458bcb\n50   cargo_2035_293784e2\n51   cargo_2035_29387eb6\n52   cargo_2035_29745484\n53   cargo_2035_26462982\n54   cargo_2035_281711e8\n55   cargo_2035_297480c2\n56   cargo_2035_24065ce6\n57   cargo_2035_26464f84\n58   cargo_2035_23956ba0\n59   cargo_2035_24313467\n60   cargo_2035_264422ec\n61   cargo_2035_2646587a\n62   cargo_2035_2950370c\n63   cargo_2035_23957cfd\n64   cargo_2035_2646637b\n65   cargo_2035_30156210\n66   cargo_2035_23959ab6\n67   cargo_2035_2508454d\n68   cargo_2035_25572d67\n69   cargo_2035_28332486\n70   cargo_2035_29400e1b\n71   cargo_2035_29861f6e\n72   cargo_2035_3038132f\n73   cargo_2035_23960fa9\n74   cargo_2035_2646944e\n75   cargo_2035_23962f3c\n76   cargo_2035_24298085\n77   cargo_2035_264715c1\n78   cargo_2035_272650a0\n79   cargo_2035_2396328a\n80   cargo_2035_242660d7\n81   cargo_2035_26472e66\n82   cargo_2035_272765c6\n83   cargo_2035_28344af6\n84   cargo_2035_2982688d\n85   cargo_2035_29997681\n86   cargo_2035_23966ec6\n87   cargo_2035_2426962e\n88   cargo_2035_25578e75\n89   cargo_2035_26475bbe\n90   cargo_2035_2732737e\n91   cargo_2035_28465e29\n92   cargo_2035_239679db\n93   cargo_2035_24884946\n94   cargo_2035_25093b88\n95   cargo_2035_2557937d\n96   cargo_2035_27101746\n97   cargo_2035_27266d43\n98   cargo_2035_28466c1f\n99   cargo_2035_28801c50\n100  cargo_2035_29697d75\n101  cargo_2035_3036119a\n102  cargo_2035_30390aaf\n103  cargo_2035_239687f3\n104  cargo_2035_26477d70\n105  cargo_2035_271025fb\n106  cargo_2035_284678a5\n107  cargo_2035_239703bb\n108  cargo_2035_24272b98\n109  cargo_2035_25493588\n110  cargo_2035_27268a74\n111  cargo_2035_28375a92\n112  cargo_2035_29869d8e\n113  cargo_2035_303621df\n114  cargo_2035_239710af\n115  cargo_2035_241938f4\n116  cargo_2035_24778cef\n117  cargo_2035_2488936f\n118  cargo_2035_25811c17\n119  cargo_2035_26653c8b\n120  cargo_2035_27269fc6\n121  cargo_2035_28342875\n122  cargo_2035_28376768\n123  cargo_2035_2876626d\n124  cargo_2035_28805365\n125  cargo_2035_28850d37\n126  cargo_2035_29870b31\n127  cargo_2035_239726c0\n128  cargo_2035_24274378\n129  cargo_2035_26480407\n130  cargo_2035_27271c71\n131  cargo_2035_27906f30\n132  cargo_2035_28377af4\n133  cargo_2035_29871155\n134  cargo_2035_23974ca6\n135  cargo_2035_24897bc9\n136  cargo_2035_25099adb\n137  cargo_2035_25819234\n138  cargo_2035_26018613\n139  cargo_2035_26947427\n140  cargo_2035_27065105\n141  cargo_2035_27252295\n142  cargo_2035_27277628\n143  cargo_2035_2843950c\n144  cargo_2035_296575a4\n145  cargo_2035_30396791\n146  cargo_2035_30449092\n147  cargo_2035_30868a7a\n148  cargo_2035_23975884\n149  cargo_2035_27066076\n150  cargo_2035_2727994c\n151  cargo_2035_28440120\n152  cargo_2035_23976a08\n153  cargo_2035_24095b13\n154  cargo_2035_24278f4c\n155  cargo_2035_26257c81\n156  cargo_2035_264844ab\n157  cargo_2035_27885ed2\n158  cargo_2035_28348407\n159  cargo_2035_2949763c\n160  cargo_2035_297151ee\n161  cargo_2035_29830fa5\n162  cargo_2035_23977a6d\n163  cargo_2035_270688a2\n164  cargo_2035_284427f0\n165  cargo_2035_30035b54\n166  cargo_2035_23978abd\n167  cargo_2035_24097aa8\n168  cargo_2035_24280a49\n169  cargo_2035_260216f9\n170  cargo_2035_2625909e\n171  cargo_2035_26767885\n172  cargo_2035_27282d6f\n173  cargo_2035_27628367\n174  cargo_2035_27887a60\n175  cargo_2035_28350a9b\n176  cargo_2035_29499ac4\n177  cargo_2035_2983203f\n178  cargo_2035_23979493\n179  cargo_2035_24836909\n180  cargo_2035_25973d5b\n181  cargo_2035_26124625\n182  cargo_2035_263576c0\n183  cargo_2035_27532651\n184  cargo_2035_29445c6a\n185  cargo_2035_29661a29\n186  cargo_2035_23981254\n187  cargo_2035_24099b6f\n188  cargo_2035_242827ef\n189  cargo_2035_2583169d\n190  cargo_2035_26023d20\n191  cargo_2035_2626114c\n192  cargo_2035_26488644\n193  cargo_2035_27286c6c\n194  cargo_2035_278892bb\n195  cargo_2035_28352518\n196  cargo_2035_28776ca4\n197  cargo_2035_29501b13\n198  cargo_2035_2394778c\n199  cargo_2035_24204b16\n200  cargo_2035_24497c26\n201  cargo_2035_24911413\n202  cargo_2035_25832ea4\n203  cargo_2035_264354b4\n204  cargo_2035_27071b81\n205  cargo_2035_27223098\n206  cargo_2035_28309e4c\n207  cargo_2035_28353eb8\n208  cargo_2035_28826389\n209  cargo_2035_29835f38\n210  cargo_2035_23958501\n211  cargo_2035_2431048a\n212  cargo_2035_24385568\n213  cargo_2035_244412f7\n214  cargo_2035_24516a72\n215  cargo_2035_24799533\n216  cargo_2035_250181f1\n217  cargo_2035_25460af7\n218  cargo_2035_257336c7\n219  cargo_2035_2687691c\n220  cargo_2035_28923b0c\n221  cargo_2035_2894792b\n222  cargo_2035_30419f6a\n223  cargo_2035_3046426d\n224  cargo_2035_30643ebf\n225  cargo_2035_307485d2\n226  cargo_2035_23982236\n227  cargo_2035_24459fc5\n228  cargo_2035_24502114\n229  cargo_2035_24920107\n230  cargo_2035_258408b5\n231  cargo_2035_283147d7\n232  cargo_2035_28358a18\n233  cargo_2035_28831e2b\n234  cargo_2035_29840c1a\n235  cargo_2035_305032c7\n236  cargo_2035_239830f2\n237  cargo_2035_24330402\n238  cargo_2035_24503d0b\n239  cargo_2035_249227f8\n240  cargo_2035_25465012\n241  cargo_2035_25842aa1\n242  cargo_2035_26030044\n243  cargo_2035_27224e79\n244  cargo_2035_28315b12\n245  cargo_2035_2883238a\n246  cargo_2035_30149550\n247  cargo_2035_23984c4a\n248  cargo_2035_24289d1d\n249  cargo_2035_24923229\n250  cargo_2035_2546613a\n251  cargo_2035_25843a69\n252  cargo_2035_26031b96\n253  cargo_2035_268840d7\n254  cargo_2035_27078659\n255  cargo_2035_272250fb\n256  cargo_2035_27301f2f\n257  cargo_2035_2733370f\n258  cargo_2035_28452b54\n259  cargo_2035_30350c6c\n260  cargo_2035_23985513\n261  cargo_2035_24505cca\n262  cargo_2035_249279ed\n263  cargo_2035_25745d4d\n264  cargo_2035_258460cd\n265  cargo_2035_27228a03\n266  cargo_2035_28317fd9\n267  cargo_2035_28834337\n268  cargo_2035_29671c72\n269  cargo_2035_30151578\n270  cargo_2035_23986aa0\n271  cargo_2035_24291ac7\n272  cargo_2035_25624930\n273  cargo_2035_2584736a\n274  cargo_2035_26033a75\n275  cargo_2035_27080b4f\n276  cargo_2035_27229356\n277  cargo_2035_27305685\n278  cargo_2035_27898201\n279  cargo_2035_284544ab\n280  cargo_2035_30407061\n281  cargo_2035_27646428\n282  cargo_2035_27386013\n283  cargo_2035_276437b3\n284  cargo_2035_27366912\n285  cargo_2035_27644762\n286  cargo_2035_2887544e\n287  cargo_2035_27367bbb\n288  cargo_2035_27645875\n289  cargo_2035_27647b6b\n290  cargo_2035_2736949e\n291  cargo_2035_2764918f\n292  cargo_2035_28919e72\n293  cargo_2035_27371ad7\n294  cargo_2035_27652b54\n295  cargo_2035_27372167\n296  cargo_2035_2445006b\n297  cargo_2035_27373fc8\n298  cargo_2035_27655081\n299  cargo_2035_28867f80\n300  cargo_2035_24453e2d\n301  cargo_2035_27374c41\n302  cargo_2035_28869143\n303  cargo_2035_29190b6f\n304  cargo_2035_27377035\n305  cargo_2035_24326871\n306  cargo_2035_24456004\n307  cargo_2035_288726d0\n308  cargo_2035_29198186\n309  cargo_2035_30790f09\n310  cargo_2035_2404657f\n311  cargo_2035_28874684\n312  cargo_2035_24048be0\n313  cargo_2035_273798b3\n314  cargo_2035_2766434f\n315  cargo_2035_288763b8\n316  cargo_2035_2738003c\n317  cargo_2035_27665b0f\n318  cargo_2035_2887805d\n319  cargo_2035_28879b9d\n320  cargo_2035_27382134\n321  cargo_2035_28880463\n322  cargo_2035_27383ddd\n323  cargo_2035_27670033\n324  cargo_2035_2888254f\n325  cargo_2035_29365506\n326  cargo_2035_27557511\n327  cargo_2035_28883840\n328  cargo_2035_27672e33\n329  cargo_2035_28884dfd\n330  cargo_2035_26267e8e\n331  cargo_2035_27561ff4\n332  cargo_2035_28885226\n333  cargo_2035_2738731f\n334  cargo_2035_27674b84\n335  cargo_2035_288879fe\n336  cargo_2035_275665e0\n337  cargo_2035_28888ef4\n338  cargo_2035_2756784f\n339  cargo_2035_29740623\n340  cargo_2035_2757044a\n341  cargo_2035_288902eb\n342  cargo_2035_3117306a\n343  cargo_2035_26297998\n344  cargo_2035_276783f8\n345  cargo_2035_28891677\n346  cargo_2035_31174e0f\n347  cargo_2035_24674476\n348  cargo_2035_26301dd4\n349  cargo_2035_27576410\n350  cargo_2035_29417d8f\n351  cargo_2035_29744489\n352  cargo_2035_30762ac7\n353  cargo_2035_311788c3\n354  cargo_2035_2399679d\n355  cargo_2035_263031e7\n356  cargo_2035_27577be1\n357  cargo_2035_30764d70\n358  cargo_2035_3117920f\n359  cargo_2035_23997fac\n360  cargo_2035_27579c76\n361  cargo_2035_28894f01\n362  cargo_2035_29419a3f\n363  cargo_2035_239998e2\n364  cargo_2035_27392d8b\n365  cargo_2035_2768329d\n366  cargo_2035_2817300d\n367  cargo_2035_28895262\n368  cargo_2035_29682554\n369  cargo_2035_30512a46\n370  cargo_2035_307674ed\n371  cargo_2035_3118220f\n372  cargo_2035_240006a5\n373  cargo_2035_27393af7\n374  cargo_2035_2968466f\n375  cargo_2035_30513aa6\n376  cargo_2035_31183e46\n377  cargo_2035_24001fb5\n378  cargo_2035_250823be\n379  cargo_2035_2817598d\n380  cargo_2035_293965f1\n381  cargo_2035_29856d89\n382  cargo_2035_3037936c\n383  cargo_2035_24002b8d\n384  cargo_2035_25083f17\n385  cargo_2035_2709398c\n386  cargo_2035_2833106f\n387  cargo_2035_293999ef\n388  cargo_2035_29860b82\n389  cargo_2035_30380f54\n390  cargo_2035_24003bb0\n391  cargo_2035_24338ac1\n392  cargo_2035_24802f0a\n393  cargo_2035_26315159\n394  cargo_2035_27395001\n395  cargo_2035_27687904\n396  cargo_2035_281773b7\n397  cargo_2035_28900c35\n398  cargo_2035_29691f7a\n399  cargo_2035_30515de2\n400  cargo_2035_3064686c\n401  cargo_2035_3119010f\n402  cargo_2035_24004231\n403  cargo_2035_250854ef\n404  cargo_2035_25573cc1\n405  cargo_2035_27098d08\n406  cargo_2035_283368cf\n407  cargo_2035_294043c3\n408  cargo_2035_29864f7e\n409  cargo_2035_301594eb\n410  cargo_2035_30382ec6\n411  cargo_2035_24005055\n412  cargo_2035_243432bf\n413  cargo_2035_27594d13\n414  cargo_2035_29696623\n415  cargo_2035_30648b71\n416  cargo_2035_3077983a\n417  cargo_2035_31194d62\n418  cargo_2035_243447ce\n419  cargo_2035_25915f58\n420  cargo_2035_25956b12\n421  cargo_2035_27398ccb\n422  cargo_2035_304356ce\n423  cargo_2035_24686d17\n424  cargo_2035_248067a1\n425  cargo_2035_25599807\n426  cargo_2035_25917f03\n427  cargo_2035_25957dfe\n428  cargo_2035_26326509\n429  cargo_2035_26965a59\n430  cargo_2035_27347e06\n431  cargo_2035_273998db\n432  cargo_2035_276001b7\n433  cargo_2035_2942912e\n434  cargo_2035_246874e7\n435  cargo_2035_24807b07\n436  cargo_2035_249376a2\n437  cargo_2035_259584c6\n438  cargo_2035_26327ef0\n439  cargo_2035_26419868\n440  cargo_2035_26629aa8\n441  cargo_2035_26966e06\n442  cargo_2035_289054d3\n443  cargo_2035_294301b8\n444  cargo_2035_24689667\n445  cargo_2035_248081ba\n446  cargo_2035_2560106b\n447  cargo_2035_25918982\n448  cargo_2035_26330213\n449  cargo_2035_26967f6d\n450  cargo_2035_27349631\n451  cargo_2035_28800607\n452  cargo_2035_28965828\n453  cargo_2035_29431632\n454  cargo_2035_24691107\n455  cargo_2035_248116c2\n456  cargo_2035_269707d5\n457  cargo_2035_2716972e\n458  cargo_2035_27352863\n459  cargo_2035_2760926b\n460  cargo_2035_28802eb0\n461  cargo_2035_29434ae5\n462  cargo_2035_246922a6\n463  cargo_2035_24812d9c\n464  cargo_2035_26634a6f\n465  cargo_2035_26971eec\n466  cargo_2035_27611f27\n467  cargo_2035_287657e8\n468  cargo_2035_294355d6\n469  cargo_2035_29762660\n470  cargo_2035_2469383e\n471  cargo_2035_24813799\n472  cargo_2035_2504146c\n473  cargo_2035_256058f0\n474  cargo_2035_25964e70\n475  cargo_2035_263383dd\n476  cargo_2035_26972393\n477  cargo_2035_27170a6b\n478  cargo_2035_273540ab\n479  cargo_2035_27403a5a\n480  cargo_2035_27613ee5\n481  cargo_2035_28806f3a\n482  cargo_2035_3003289d\n483  cargo_2035_30994953\n484  cargo_2035_246940bd\n485  cargo_2035_2481434d\n486  cargo_2035_25495f9e\n487  cargo_2035_25712d9f\n488  cargo_2035_264313d5\n489  cargo_2035_266364a9\n490  cargo_2035_26973b06\n491  cargo_2035_27615b38\n492  cargo_2035_28912d75\n493  cargo_2035_294379c8\n494  cargo_2035_29764981\n495  cargo_2035_3044473d\n496  cargo_2035_3079657a\n497  cargo_2035_30995884\n498  cargo_2035_239889c5\n499  cargo_2035_24695513\n500  cargo_2035_24815f35\n501  cargo_2035_256083f1\n502  cargo_2035_26342824\n503  cargo_2035_263986f4\n504  cargo_2035_269748cb\n505  cargo_2035_273566d4\n506  cargo_2035_276173c7\n507  cargo_2035_29801dc4\n508  cargo_2035_30040ec7\n509  cargo_2035_30364fda\n510  cargo_2035_30971f08\n511  cargo_2035_2398914c\n512  cargo_2035_246967f6\n513  cargo_2035_248315d4\n514  cargo_2035_25498de0\n515  cargo_2035_26119fa8\n516  cargo_2035_26345ac1\n517  cargo_2035_26399fd2\n518  cargo_2035_269752c6\n519  cargo_2035_27620fc3\n520  cargo_2035_289142a8\n521  cargo_2035_294391a3\n522  cargo_2035_29923315\n523  cargo_2035_3041118d\n524  cargo_2035_30448837\n525  cargo_2035_30740390\n526  cargo_2035_30972007\n527  cargo_2035_23990788\n528  cargo_2035_24094ab9\n529  cargo_2035_24817c04\n530  cargo_2035_25610b0f\n531  cargo_2035_2634751b\n532  cargo_2035_26400b7a\n533  cargo_2035_27622a63\n534  cargo_2035_28782d37\n535  cargo_2035_29803316\n536  cargo_2035_23991fa7\n537  cargo_2035_24040d7f\n538  cargo_2035_248186f4\n539  cargo_2035_255008bc\n540  cargo_2035_2640150a\n541  cargo_2035_2762482e\n542  cargo_2035_28804ee4\n543  cargo_2035_30742a1d\n544  cargo_2035_23992af5\n545  cargo_2035_243742d4\n546  cargo_2035_24445936\n547  cargo_2035_24493cb3\n548  cargo_2035_2592854f\n549  cargo_2035_26351836\n550  cargo_2035_264559b6\n551  cargo_2035_26865b87\n552  cargo_2035_27174ca1\n553  cargo_2035_2755268e\n554  cargo_2035_27625b9e\n555  cargo_2035_27705adb\n556  cargo_2035_28811792\n557  cargo_2035_298050f6\n558  cargo_2035_30414724\n559  cargo_2035_30453ba9\n560  cargo_2035_30663318\n561  cargo_2035_30743a2d\n562  cargo_2035_23993070\n563  cargo_2035_24820b01\n564  cargo_2035_25502143\n565  cargo_2035_25971968\n566  cargo_2035_26009c37\n567  cargo_2035_2635368b\n568  cargo_2035_264866df\n569  cargo_2035_27175623\n570  cargo_2035_289457dc\n571  cargo_2035_2980600e\n572  cargo_2035_3074485b\n573  cargo_2035_309766bd\n574  cargo_2035_23994469\n575  cargo_2035_24043519\n576  cargo_2035_24822f21\n577  cargo_2035_25588818\n578  cargo_2035_256144ef\n579  cargo_2035_26010d78\n580  cargo_2035_264043da\n581  cargo_2035_2736081e\n582  cargo_2035_27631aa1\n583  cargo_2035_291780fc\n584  cargo_2035_29807a3e\n585  cargo_2035_3097757c\n586  cargo_2035_23995a34\n587  cargo_2035_24247763\n588  cargo_2035_2482365a\n589  cargo_2035_2550497c\n590  cargo_2035_259331b7\n591  cargo_2035_2601132e\n592  cargo_2035_261252bc\n593  cargo_2035_26358749\n594  cargo_2035_263597f4\n595  cargo_2035_26405693\n596  cargo_2035_27633ab1\n597  cargo_2035_28814d57\n598  cargo_2035_28946a12\n599  cargo_2035_291792d9\n600  cargo_2035_307463a5\n601  cargo_2035_30978765\n602  cargo_2035_31162023\n603  cargo_2035_24383a57\n604  cargo_2035_24449d57\n605  cargo_2035_257318ee\n606  cargo_2035_26874322\n607  cargo_2035_27533955\n608  cargo_2035_28815c3c\n609  cargo_2035_2918047b\n610  cargo_2035_30418451\n611  cargo_2035_30462072\n612  cargo_2035_307479d8\n613  cargo_2035_24036bf2\n614  cargo_2035_24384bd8\n615  cargo_2035_26875676\n616  cargo_2035_2741109c\n617  cargo_2035_277103ab\n618  cargo_2035_27760381\n619  cargo_2035_30463253\n620  cargo_2035_23969037\n621  cargo_2035_24047415\n622  cargo_2035_24321f11\n623  cargo_2035_24387006\n624  cargo_2035_24452374\n625  cargo_2035_24810539\n626  cargo_2035_25020029\n627  cargo_2035_25735fbc\n628  cargo_2035_26013ba3\n629  cargo_2035_26878467\n630  cargo_2035_277115c5\n631  cargo_2035_28783499\n632  cargo_2035_3042163c\n633  cargo_2035_304664aa\n634  cargo_2035_30501778\n635  cargo_2035_30654996\n636  cargo_2035_30750b67\n637  cargo_2035_2425272d\n638  cargo_2035_2432850c\n639  cargo_2035_243903ab\n640  cargo_2035_244583af\n641  cargo_2035_24501b24\n642  cargo_2035_24518b54\n643  cargo_2035_24821249\n644  cargo_2035_24842a80\n645  cargo_2035_25021798\n646  cargo_2035_25737d67\n647  cargo_2035_275354d7\n648  cargo_2035_277626be\n649  cargo_2035_28925628\n650  cargo_2035_304228a1\n651  cargo_2035_30469ad7\n652  cargo_2035_305022d4\n653  cargo_2035_30665466\n654  cargo_2035_24418bbc\n655  cargo_2035_24843c93\n656  cargo_2035_271584f3\n657  cargo_2035_31168128\n658  cargo_2035_27302f29\n659  cargo_2035_28360e7f\n660  cargo_2035_30150dcc\n661  cargo_2035_24052438\n662  cargo_2035_2425718e\n663  cargo_2035_2439912f\n664  cargo_2035_244210fb\n665  cargo_2035_2452397d\n666  cargo_2035_2482842c\n667  cargo_2035_24846146\n668  cargo_2035_24928c4e\n669  cargo_2035_26888e42\n670  cargo_2035_271645f8\n671  cargo_2035_27335c02\n672  cargo_2035_2771888e\n673  cargo_2035_27765672\n674  cargo_2035_28931fd5\n675  cargo_2035_28951e4f\n676  cargo_2035_30351c8f\n677  cargo_2035_30478819\n678  cargo_2035_29637568\n679  cargo_2035_296518ab\n680  cargo_2035_25389203\n681  cargo_2035_25400572\n682  cargo_2035_2541148f\n683  cargo_2035_25444ba2\n684  cargo_2035_2806869a\n685  cargo_2035_29244134\n686  cargo_2035_27909784\n687  cargo_2035_2807721c\n688  cargo_2035_289751c3\n689  cargo_2035_292088fa\n690  cargo_2035_2989901d\n691  cargo_2035_30061643\n692  cargo_2035_2990009d\n693  cargo_2035_27911e0c\n694  cargo_2035_28081952\n695  cargo_2035_289778ed\n696  cargo_2035_29210e39\n697  cargo_2035_30562081\n698  cargo_2035_2564139d\n699  cargo_2035_28086dc7\n700  cargo_2035_29903e40\n701  cargo_2035_2808741b\n702  cargo_2035_29459cb5\n703  cargo_2035_30068b22\n704  cargo_2035_28089e02\n705  cargo_2035_29460d75\n706  cargo_2035_24473ffc\n707  cargo_2035_25401a44\n708  cargo_2035_25667486\n709  cargo_2035_25694349\n710  cargo_2035_27132753\n711  cargo_2035_289829d5\n712  cargo_2035_2921553f\n713  cargo_2035_30071b2a\n714  cargo_2035_25645f96\n715  cargo_2035_2650583d\n716  cargo_2035_28093f5e\n717  cargo_2035_29303583\n718  cargo_2035_29462313\n719  cargo_2035_30072067\n720  cargo_2035_24476151\n721  cargo_2035_25542857\n722  cargo_2035_26189b18\n723  cargo_2035_2795207a\n724  cargo_2035_28096431\n725  cargo_2035_2875396f\n726  cargo_2035_29464ab1\n727  cargo_2035_255435e8\n728  cargo_2035_25647158\n729  cargo_2035_26508a82\n730  cargo_2035_27953b64\n731  cargo_2035_28098db9\n732  cargo_2035_29465881\n733  cargo_2035_3007598a\n734  cargo_2035_244780a7\n735  cargo_2035_2619160f\n736  cargo_2035_28100e56\n737  cargo_2035_287552e1\n738  cargo_2035_29466d64\n739  cargo_2035_25649fbc\n740  cargo_2035_26510706\n741  cargo_2035_268249cf\n742  cargo_2035_281023a1\n743  cargo_2035_2930873e\n744  cargo_2035_29467400\n745  cargo_2035_300796bf\n746  cargo_2035_24480aaf\n747  cargo_2035_255457b0\n748  cargo_2035_26193016\n749  cargo_2035_2795555c\n750  cargo_2035_28104711\n751  cargo_2035_28757f09\n752  cargo_2035_293098e0\n753  cargo_2035_2946841a\n754  cargo_2035_300801ff\n755  cargo_2035_28105b05\n756  cargo_2035_24024728\n757  cargo_2035_26828483\n758  cargo_2035_27438297\n759  cargo_2035_27738fec\n760  cargo_2035_2811013b\n761  cargo_2035_30084063\n762  cargo_2035_24029512\n763  cargo_2035_2541282d\n764  cargo_2035_26391468\n765  cargo_2035_27444cb0\n766  cargo_2035_27927fed\n767  cargo_2035_2899383d\n768  cargo_2035_29226285\n769  cargo_2035_29705c51\n770  cargo_2035_29915a6c\n771  cargo_2035_30086838\n772  cargo_2035_24030096\n773  cargo_2035_24147edc\n774  cargo_2035_25783f15\n775  cargo_2035_26580af5\n776  cargo_2035_26606e07\n777  cargo_2035_268307c6\n778  cargo_2035_27107ae5\n779  cargo_2035_277417b1\n780  cargo_2035_27928019\n781  cargo_2035_28116aa2\n782  cargo_2035_2899468e\n783  cargo_2035_29060883\n784  cargo_2035_29227ea7\n785  cargo_2035_293167b0\n786  cargo_2035_29783d47\n787  cargo_2035_299416ae\n788  cargo_2035_300899bf\n789  cargo_2035_24031644\n790  cargo_2035_24149f6f\n791  cargo_2035_25785665\n792  cargo_2035_26582d69\n793  cargo_2035_26608f53\n794  cargo_2035_27742fda\n795  cargo_2035_27931dc2\n796  cargo_2035_28121cd6\n797  cargo_2035_28630ac2\n798  cargo_2035_28997ace\n799  cargo_2035_29318abe\n800  cargo_2035_2994380c\n801  cargo_2035_29995c4e\n802  cargo_2035_3009245f\n803  cargo_2035_240329d3\n804  cargo_2035_27109bf2\n805  cargo_2035_27743b04\n806  cargo_2035_2812332d\n807  cargo_2035_24033f5a\n808  cargo_2035_242146f7\n809  cargo_2035_25418293\n810  cargo_2035_2636323f\n811  cargo_2035_27934a9a\n812  cargo_2035_290004b8\n813  cargo_2035_29233c12\n814  cargo_2035_29881f7b\n815  cargo_2035_29922a67\n816  cargo_2035_29946cbb\n817  cargo_2035_30095425\n818  cargo_2035_308061a1\n819  cargo_2035_2403401c\n820  cargo_2035_24123306\n821  cargo_2035_244669e8\n822  cargo_2035_25064c07\n823  cargo_2035_2568402a\n824  cargo_2035_25790463\n825  cargo_2035_2649833d\n826  cargo_2035_26554243\n827  cargo_2035_26587047\n828  cargo_2035_2711170e\n829  cargo_2035_27448e4a\n830  cargo_2035_2774568c\n831  cargo_2035_279352a3\n832  cargo_2035_281306c9\n833  cargo_2035_28634694\n834  cargo_2035_290012dd\n835  cargo_2035_29067509\n836  cargo_2035_29788e27\n837  cargo_2035_29974951\n838  cargo_2035_30200d30\n839  cargo_2035_30320c86\n840  cargo_2035_24035d6f\n841  cargo_2035_24125596\n842  cargo_2035_24468105\n843  cargo_2035_248601b0\n844  cargo_2035_25686e07\n845  cargo_2035_25792364\n846  cargo_2035_26208a0c\n847  cargo_2035_265002dd\n848  cargo_2035_26555d73\n849  cargo_2035_26836176\n850  cargo_2035_27112e17\n851  cargo_2035_279377dc\n852  cargo_2035_281340f0\n853  cargo_2035_28636034\n854  cargo_2035_29003f89\n855  cargo_2035_292364e2\n856  cargo_2035_29324860\n857  cargo_2035_29976f72\n858  cargo_2035_24014a5e\n859  cargo_2035_2555509b\n860  cargo_2035_25659a39\n861  cargo_2035_269353d3\n862  cargo_2035_27113ba5\n863  cargo_2035_27747557\n864  cargo_2035_2813617d\n865  cargo_2035_2901965e\n866  cargo_2035_30955bf1\n867  cargo_2035_240152cb\n868  cargo_2035_25425a03\n869  cargo_2035_25519c57\n870  cargo_2035_2636906f\n871  cargo_2035_2683931b\n872  cargo_2035_26902a05\n873  cargo_2035_2711442a\n874  cargo_2035_279418dc\n875  cargo_2035_2900782c\n876  cargo_2035_29240705\n877  cargo_2035_2995324c\n878  cargo_2035_3081383e\n879  cargo_2035_309569de\n880  cargo_2035_24016013\n881  cargo_2035_24472a84\n882  cargo_2035_24864757\n883  cargo_2035_256612ab\n884  cargo_2035_256903e9\n885  cargo_2035_2579665c\n886  cargo_2035_265933c2\n887  cargo_2035_26840eee\n888  cargo_2035_27115952\n889  cargo_2035_27429ba1\n890  cargo_2035_277493ad\n891  cargo_2035_27942002\n892  cargo_2035_2814310b\n893  cargo_2035_28641b5d\n894  cargo_2035_290087a6\n895  cargo_2035_29241599\n896  cargo_2035_29792224\n897  cargo_2035_29929cf4\n898  cargo_2035_30106d3b\n899  cargo_2035_30206ebe\n900  cargo_2035_30326dcd\n901  cargo_2035_30957898\n902  cargo_2035_240176e7\n903  cargo_2035_24867838\n904  cargo_2035_25046aad\n905  cargo_2035_255223f2\n906  cargo_2035_265952ed\n907  cargo_2035_269054a8\n908  cargo_2035_271160b5\n909  cargo_2035_2814737b\n910  cargo_2035_29023970\n911  cargo_2035_30208fbf\n912  cargo_2035_30329e0b\n913  cargo_2035_24018829\n914  cargo_2035_2814951a\n915  cargo_2035_290244b4\n916  cargo_2035_24019ac2\n917  cargo_2035_25431e0e\n918  cargo_2035_26376ca7\n919  cargo_2035_28777cc4\n920  cargo_2035_299602c9\n921  cargo_2035_308206c8\n922  cargo_2035_240203ce\n923  cargo_2035_248719c7\n924  cargo_2035_2656647d\n925  cargo_2035_26845c33\n926  cargo_2035_271190c5\n927  cargo_2035_274334c7\n928  cargo_2035_28156eb9\n929  cargo_2035_290282c6\n930  cargo_2035_299872aa\n931  cargo_2035_240219d6\n932  cargo_2035_24873007\n933  cargo_2035_25052112\n934  cargo_2035_265685fc\n935  cargo_2035_27946e6b\n936  cargo_2035_2816033b\n937  cargo_2035_29030dc5\n938  cargo_2035_29333a00\n939  cargo_2035_29489769\n940  cargo_2035_29989282\n941  cargo_2035_27635493\n942  cargo_2035_27775d9b\n943  cargo_2035_28959397\n944  cargo_2035_27426b30\n945  cargo_2035_2778097e\n946  cargo_2035_28864afb\n947  cargo_2035_28886e4d\n948  cargo_2035_28930f74\n949  cargo_2035_28942d3f\n950  cargo_2035_27653e3d\n951  cargo_2035_28865e79\n952  cargo_2035_243198c9\n953  cargo_2035_28866286\n954  cargo_2035_243226d5\n955  cargo_2035_2445184b\n956  cargo_2035_288681cf\n957  cargo_2035_30784bce\n958  cargo_2035_30015428\n959  cargo_2035_24324010\n960  cargo_2035_24454b6c\n961  cargo_2035_28870fa9\n962  cargo_2035_29194d75\n963  cargo_2035_307878c6\n964  cargo_2035_244558d2\n965  cargo_2035_27660d39\n966  cargo_2035_28871190\n967  cargo_2035_2919520e\n968  cargo_2035_3078821a\n969  cargo_2035_24045644\n970  cargo_2035_2445723e\n971  cargo_2035_27378ce1\n972  cargo_2035_27662a42\n973  cargo_2035_2776649b\n974  cargo_2035_29199348\n975  cargo_2035_27388697\n976  cargo_2035_276767bb\n977  cargo_2035_288894e0\n978  cargo_2035_24675cfc\n979  cargo_2035_263044a1\n980  cargo_2035_26954bff\n981  cargo_2035_27578e87\n982  cargo_2035_29342277\n983  cargo_2035_24682b36\n984  cargo_2035_25913ebf\n985  cargo_2035_25953808\n986  cargo_2035_2662470a\n987  cargo_2035_2696153e\n988  cargo_2035_27591683\n989  cargo_2035_29349db8\n990  cargo_2035_29425a9c\n991  cargo_2035_307778a2\n992  cargo_2035_24342cb7\n993  cargo_2035_2548698c\n994  cargo_2035_25955818\n995  cargo_2035_25996f5f\n996  cargo_2035_26319787\n997  cargo_2035_27396cbb\n998  cargo_2035_27689295\n999  cargo_2035_2890265e\n1000 cargo_2035_29189197\n1001 cargo_2035_29695f58\n1002 cargo_2035_30359570\n1003 cargo_2035_30517597\n1004 cargo_2035_24685fde\n1005 cargo_2035_24805fa9\n1006 cargo_2035_25487a3b\n1007 cargo_2035_263237e0\n1008 cargo_2035_26397dd6\n1009 cargo_2035_26627c2d\n1010 cargo_2035_26964613\n1011 cargo_2035_275987f2\n1012 cargo_2035_29428145\n1013 cargo_2035_297553f5\n1014 cargo_2035_23964f68\n1015 cargo_2035_24267775\n1016 cargo_2035_264733d1\n1017 cargo_2035_26628b75\n1018 cargo_2035_270749d7\n1019 cargo_2035_28448fa7\n1020 cargo_2035_30008349\n1021 cargo_2035_30354340\n1022 cargo_2035_24349008\n1023 cargo_2035_28954e64\n1024 cargo_2035_30479b43\n1025 cargo_2035_2469025b\n1026 cargo_2035_254916b4\n1027 cargo_2035_25960251\n1028 cargo_2035_26631e77\n1029 cargo_2035_26968747\n1030 cargo_2035_27606f3c\n1031 cargo_2035_28907762\n1032 cargo_2035_24360628\n1033 cargo_2035_25483240\n1034 cargo_2035_2560405b\n1035 cargo_2035_260051e1\n1036 cargo_2035_26337063\n1037 cargo_2035_26853536\n1038 cargo_2035_27353ffc\n1039 cargo_2035_27698b5c\n1040 cargo_2035_28968fec\n1041 cargo_2035_296997a9\n1042 cargo_2035_3003855b\n1043 cargo_2035_30441e69\n1044 cargo_2035_3052669a\n1045 cargo_2035_2436308a\n1046 cargo_2035_244396bc\n1047 cargo_2035_25484742\n1048 cargo_2035_260068b3\n1049 cargo_2035_26340fe4\n1050 cargo_2035_26856629\n1051 cargo_2035_2754979e\n1052 cargo_2035_27614127\n1053 cargo_2035_30443dd2\n1054 cargo_2035_30658c2d\n1055 cargo_2035_24369c26\n1056 cargo_2035_25453831\n1057 cargo_2035_2560959b\n1058 cargo_2035_2571661c\n1059 cargo_2035_259265b0\n1060 cargo_2035_25967599\n1061 cargo_2035_26346930\n1062 cargo_2035_2735706f\n1063 cargo_2035_27405cd8\n1064 cargo_2035_289153eb\n1065 cargo_2035_29173619\n1066 cargo_2035_29802431\n1067 cargo_2035_30041fbb\n1068 cargo_2035_3036555a\n1069 cargo_2035_30530a5a\n1070 cargo_2035_31157f2a\n1071 cargo_2035_2483278c\n1072 cargo_2035_26120d02\n1073 cargo_2035_26348c58\n1074 cargo_2035_27340edb\n1075 cargo_2035_28793346\n1076 cargo_2035_291745b0\n1077 cargo_2035_29440c93\n1078 cargo_2035_311580af\n1079 cargo_2035_240412f8\n1080 cargo_2035_25612ec3\n1081 cargo_2035_263525dc\n1082 cargo_2035_26402cf7\n1083 cargo_2035_27407386\n1084 cargo_2035_27626b7f\n1085 cargo_2035_3097581d\n1086 cargo_2035_2404289d\n1087 cargo_2035_2437731d\n1088 cargo_2035_24835f83\n1089 cargo_2035_25457d1c\n1090 cargo_2035_25613bab\n1091 cargo_2035_25725caa\n1092 cargo_2035_259307dd\n1093 cargo_2035_26123e49\n1094 cargo_2035_26355a7e\n1095 cargo_2035_26868eb7\n1096 cargo_2035_26969213\n1097 cargo_2035_27409caa\n1098 cargo_2035_27758c78\n1099 cargo_2035_288121e1\n1100 cargo_2035_2892096e\n1101 cargo_2035_29177668\n1102 cargo_2035_29443e33\n1103 cargo_2035_30456213\n1104 cargo_2035_311618c7\n1105 cargo_2035_24044e53\n1106 cargo_2035_24248ede\n1107 cargo_2035_243088f4\n1108 cargo_2035_24382a3b\n1109 cargo_2035_24515c89\n1110 cargo_2035_24837fb7\n1111 cargo_2035_25106ea3\n1112 cargo_2035_254593dc\n1113 cargo_2035_25615a5a\n1114 cargo_2035_25729955\n1115 cargo_2035_26213379\n1116 cargo_2035_268730c4\n1117 cargo_2035_26904473\n1118 cargo_2035_273610e1\n1119 cargo_2035_27410dbb\n1120 cargo_2035_27709e24\n1121 cargo_2035_27759234\n1122 cargo_2035_289220e4\n1123 cargo_2035_29446d47\n1124 cargo_2035_298082be\n1125 cargo_2035_30045f45\n1126 cargo_2035_30346df6\n1127 cargo_2035_30461db1\n1128 cargo_2035_240491d9\n1129 cargo_2035_26014193\n1130 cargo_2035_26360537\n1131 cargo_2035_2641074a\n1132 cargo_2035_28182442\n1133 cargo_2035_28784f9e\n1134 cargo_2035_291836b1\n1135 cargo_2035_293367aa\n1136 cargo_2035_30983d6f\n1137 cargo_2035_3116751f\n1138 cargo_2035_240505aa\n1139 cargo_2035_24329475\n1140 cargo_2035_2562161d\n1141 cargo_2035_259812ba\n1142 cargo_2035_26289c9c\n1143 cargo_2035_264112cb\n1144 cargo_2035_27332287\n1145 cargo_2035_2894900c\n1146 cargo_2035_293376a0\n1147 cargo_2035_30752552\n1148 cargo_2035_2405123d\n1149 cargo_2035_24107a93\n1150 cargo_2035_256236db\n1151 cargo_2035_264139d6\n1152 cargo_2035_271619b3\n1153 cargo_2035_2776497d\n1154 cargo_2035_28185e62\n1155 cargo_2035_28787286\n1156 cargo_2035_300031b2\n1157 cargo_2035_30986585\n1158 cargo_2035_3053771c\n1159 cargo_2035_3055766e\n1160 cargo_2035_30566b7f\n1161 cargo_2035_30586a0d\n1162 cargo_2035_305923dc\n1163 cargo_2035_30538eb4\n1164 cargo_2035_26674c75\n1165 cargo_2035_305390b2\n1166 cargo_2035_30540706\n1167 cargo_2035_2699108c\n1168 cargo_2035_305416be\n1169 cargo_2035_2699629a\n1170 cargo_2035_26998c89\n1171 cargo_2035_27001fd9\n1172 cargo_2035_270047f4\n1173 cargo_2035_27010339\n1174 cargo_2035_24078cf5\n1175 cargo_2035_27013019\n1176 cargo_2035_24086289\n1177 cargo_2035_270153a1\n1178 cargo_2035_279793a7\n1179 cargo_2035_30556020\n1180 cargo_2035_30558bb9\n1181 cargo_2035_27986589\n1182 cargo_2035_296012f2\n1183 cargo_2035_305596dd\n1184 cargo_2035_27990fb1\n1185 cargo_2035_28560cf3\n1186 cargo_2035_24059eec\n1187 cargo_2035_27992fd7\n1188 cargo_2035_30561eba\n1189 cargo_2035_30902c40\n1190 cargo_2035_26523187\n1191 cargo_2035_27994f4b\n1192 cargo_2035_27996833\n1193 cargo_2035_309063bf\n1194 cargo_2035_2702236e\n1195 cargo_2035_309095f5\n1196 cargo_2035_26708634\n1197 cargo_2035_28574c9e\n1198 cargo_2035_2961994f\n1199 cargo_2035_3091485d\n1200 cargo_2035_26664abb\n1201 cargo_2035_26712afd\n1202 cargo_2035_2800836a\n1203 cargo_2035_282185d4\n1204 cargo_2035_29623f7d\n1205 cargo_2035_309191b8\n1206 cargo_2035_270275e0\n1207 cargo_2035_309215fc\n1208 cargo_2035_26668451\n1209 cargo_2035_26717fe1\n1210 cargo_2035_28013c9c\n1211 cargo_2035_28223080\n1212 cargo_2035_28580f64\n1213 cargo_2035_2962829a\n1214 cargo_2035_30565f32\n1215 cargo_2035_23961648\n1216 cargo_2035_2508606f\n1217 cargo_2035_28179f0c\n1218 cargo_2035_28337739\n1219 cargo_2035_294052ec\n1220 cargo_2035_2986599e\n1221 cargo_2035_300120af\n1222 cargo_2035_3038348f\n1223 cargo_2035_2488299b\n1224 cargo_2035_260812ce\n1225 cargo_2035_2653076f\n1226 cargo_2035_267276bb\n1227 cargo_2035_30615a5f\n1228 cargo_2035_26092f5c\n1229 cargo_2035_267282bf\n1230 cargo_2035_28023e72\n1231 cargo_2035_28588628\n1232 cargo_2035_261157ef\n1233 cargo_2035_267318b6\n1234 cargo_2035_28590de6\n1235 cargo_2035_30618a20\n1236 cargo_2035_26116233\n1237 cargo_2035_266466d2\n1238 cargo_2035_26732f9a\n1239 cargo_2035_27209c03\n1240 cargo_2035_28026892\n1241 cargo_2035_28591d13\n1242 cargo_2035_305713ed\n1243 cargo_2035_2802936c\n1244 cargo_2035_30572f9e\n1245 cargo_2035_30941569\n1246 cargo_2035_24079d3d\n1247 cargo_2035_26052bd5\n1248 cargo_2035_26736d82\n1249 cargo_2035_272116eb\n1250 cargo_2035_28030c52\n1251 cargo_2035_28595b3f\n1252 cargo_2035_24705a40\n1253 cargo_2035_260557ec\n1254 cargo_2035_26740698\n1255 cargo_2035_28033d6d\n1256 cargo_2035_282632c3\n1257 cargo_2035_28598501\n1258 cargo_2035_306229ef\n1259 cargo_2035_260563cc\n1260 cargo_2035_266551be\n1261 cargo_2035_26741cfd\n1262 cargo_2035_272137ca\n1263 cargo_2035_28035141\n1264 cargo_2035_285998db\n1265 cargo_2035_24082aed\n1266 cargo_2035_24708cbd\n1267 cargo_2035_260600b3\n1268 cargo_2035_266599d5\n1269 cargo_2035_267444f1\n1270 cargo_2035_26758acb\n1271 cargo_2035_28189331\n1272 cargo_2035_2408320d\n1273 cargo_2035_24780f73\n1274 cargo_2035_2675916c\n1275 cargo_2035_28038a0d\n1276 cargo_2035_295946f5\n1277 cargo_2035_240849ef\n1278 cargo_2035_247100fa\n1279 cargo_2035_24781789\n1280 cargo_2035_265211f9\n1281 cargo_2035_2666283f\n1282 cargo_2035_27041e02\n1283 cargo_2035_28040bb2\n1284 cargo_2035_29595e82\n1285 cargo_2035_26063f93\n1286 cargo_2035_26760dc4\n1287 cargo_2035_26762015\n1288 cargo_2035_272162a0\n1289 cargo_2035_30676cd7\n1290 cargo_2035_311180e9\n1291 cargo_2035_24056bb2\n1292 cargo_2035_25867a30\n1293 cargo_2035_26064013\n1294 cargo_2035_2652287f\n1295 cargo_2035_27849bbb\n1296 cargo_2035_281911c1\n1297 cargo_2035_2406737e\n1298 cargo_2035_24711d72\n1299 cargo_2035_27042961\n1300 cargo_2035_27185855\n1301 cargo_2035_2408538f\n1302 cargo_2035_24713cb6\n1303 cargo_2035_26068bef\n1304 cargo_2035_265243d2\n1305 cargo_2035_27207bf9\n1306 cargo_2035_2819361f\n1307 cargo_2035_24087a28\n1308 cargo_2035_2587382d\n1309 cargo_2035_26072044\n1310 cargo_2035_26768e3c\n1311 cargo_2035_30579407\n1312 cargo_2035_30680c1a\n1313 cargo_2035_311221a0\n1314 cargo_2035_240887f6\n1315 cargo_2035_258758e9\n1316 cargo_2035_26770d2f\n1317 cargo_2035_270446ae\n1318 cargo_2035_24089e1f\n1319 cargo_2035_25877372\n1320 cargo_2035_26075fb3\n1321 cargo_2035_267711bb\n1322 cargo_2035_27871cb7\n1323 cargo_2035_2847991b\n1324 cargo_2035_306811dd\n1325 cargo_2035_31123808\n1326 cargo_2035_24090dbb\n1327 cargo_2035_26077710\n1328 cargo_2035_26528c75\n1329 cargo_2035_27976280\n1330 cargo_2035_28197cb0\n1331 cargo_2035_240579f7\n1332 cargo_2035_267472a9\n1333 cargo_2035_2704611b\n1334 cargo_2035_24058afe\n1335 cargo_2035_24722bbd\n1336 cargo_2035_25881862\n1337 cargo_2035_26080adb\n1338 cargo_2035_3058204f\n1339 cargo_2035_3068585e\n1340 cargo_2035_31127e0f\n1341 cargo_2035_2406078b\n1342 cargo_2035_247240bc\n1343 cargo_2035_2608403b\n1344 cargo_2035_27188adf\n1345 cargo_2035_2785059e\n1346 cargo_2035_2820173c\n1347 cargo_2035_306867b8\n1348 cargo_2035_31128225\n1349 cargo_2035_24061755\n1350 cargo_2035_24726882\n1351 cargo_2035_25885f8e\n1352 cargo_2035_26085c4b\n1353 cargo_2035_3058398b\n1354 cargo_2035_306879ac\n1355 cargo_2035_3112923f\n1356 cargo_2035_2406298f\n1357 cargo_2035_24727bec\n1358 cargo_2035_270515ec\n1359 cargo_2035_28552459\n1360 cargo_2035_2406345e\n1361 cargo_2035_25888bfc\n1362 cargo_2035_26685d6d\n1363 cargo_2035_27052574\n1364 cargo_2035_2719160a\n1365 cargo_2035_28553c7b\n1366 cargo_2035_296084b2\n1367 cargo_2035_240648fe\n1368 cargo_2035_2589008c\n1369 cargo_2035_25944814\n1370 cargo_2035_26753777\n1371 cargo_2035_29609375\n1372 cargo_2035_2406617c\n1373 cargo_2035_258928ec\n1374 cargo_2035_26094094\n1375 cargo_2035_27194e83\n1376 cargo_2035_28020d07\n1377 cargo_2035_30584e50\n1378 cargo_2035_30691be0\n1379 cargo_2035_31133103\n1380 cargo_2035_289624b9\n1381 cargo_2035_29363906\n1382 cargo_2035_293671b9\n1383 cargo_2035_26262559\n1384 cargo_2035_29368c12\n1385 cargo_2035_2626593e\n1386 cargo_2035_29371b64\n1387 cargo_2035_26266ac0\n1388 cargo_2035_2937220e\n1389 cargo_2035_29373648\n1390 cargo_2035_262690b4\n1391 cargo_2035_29375f86\n1392 cargo_2035_262732b4\n1393 cargo_2035_27910a64\n1394 cargo_2035_2937914c\n1395 cargo_2035_26274688\n1396 cargo_2035_29380f08\n1397 cargo_2035_25074103\n1398 cargo_2035_26276c26\n1399 cargo_2035_293820ba\n1400 cargo_2035_24110241\n1401 cargo_2035_25075d07\n1402 cargo_2035_262774da\n1403 cargo_2035_26460e62\n1404 cargo_2035_293839d1\n1405 cargo_2035_2411145a\n1406 cargo_2035_26278bd0\n1407 cargo_2035_29384348\n1408 cargo_2035_24112c1c\n1409 cargo_2035_26279bd5\n1410 cargo_2035_29385819\n1411 cargo_2035_241140b0\n1412 cargo_2035_250765f2\n1413 cargo_2035_26280694\n1414 cargo_2035_2820751f\n1415 cargo_2035_2938669e\n1416 cargo_2035_25568335\n1417 cargo_2035_30765a72\n1418 cargo_2035_30911c34\n1419 cargo_2035_26445c03\n1420 cargo_2035_264689cf\n1421 cargo_2035_270944f3\n1422 cargo_2035_29506247\n1423 cargo_2035_26447dfe\n1424 cargo_2035_26470f54\n1425 cargo_2035_27099281\n1426 cargo_2035_295087f4\n1427 cargo_2035_27298900\n1428 cargo_2035_309332c9\n1429 cargo_2035_23965a72\n1430 cargo_2035_2426886d\n1431 cargo_2035_26474214\n1432 cargo_2035_27166b4f\n1433 cargo_2035_27309e82\n1434 cargo_2035_27602f19\n1435 cargo_2035_28366ed2\n1436 cargo_2035_29848a88\n1437 cargo_2035_2494981d\n1438 cargo_2035_257822d4\n1439 cargo_2035_25959398\n1440 cargo_2035_27326d2f\n1441 cargo_2035_27604f33\n1442 cargo_2035_28846cd5\n1443 cargo_2035_30019793\n1444 cargo_2035_242701bc\n1445 cargo_2035_26476d14\n1446 cargo_2035_2732826c\n1447 cargo_2035_283736cd\n1448 cargo_2035_30030863\n1449 cargo_2035_2560364c\n1450 cargo_2035_26649c2d\n1451 cargo_2035_27267d5b\n1452 cargo_2035_25581498\n1453 cargo_2035_268324cc\n1454 cargo_2035_240932fa\n1455 cargo_2035_24275b2c\n1456 cargo_2035_26017d3a\n1457 cargo_2035_26255681\n1458 cargo_2035_26482a86\n1459 cargo_2035_272754f0\n1460 cargo_2035_27883c31\n1461 cargo_2035_28346f9e\n1462 cargo_2035_29495e62\n1463 cargo_2035_296566fb\n1464 cargo_2035_29828c84\n1465 cargo_2035_24098e61\n1466 cargo_2035_242819ae\n1467 cargo_2035_26260477\n1468 cargo_2035_26487d07\n1469 cargo_2035_272849ac\n1470 cargo_2035_278887e9\n1471 cargo_2035_29361fed\n1472 cargo_2035_2950014b\n1473 cargo_2035_29833b0f\n1474 cargo_2035_29998336\n1475 cargo_2035_241000fc\n1476 cargo_2035_24283ebe\n1477 cargo_2035_27289b4a\n1478 cargo_2035_27890a5f\n1479 cargo_2035_299993f8\n1480 cargo_2035_24101869\n1481 cargo_2035_2583471d\n1482 cargo_2035_26978bcf\n1483 cargo_2035_272459a5\n1484 cargo_2035_27291477\n1485 cargo_2035_278916d8\n1486 cargo_2035_28172868\n1487 cargo_2035_283542b0\n1488 cargo_2035_2983604c\n1489 cargo_2035_30000207\n1490 cargo_2035_30378594\n1491 cargo_2035_24103c21\n1492 cargo_2035_24285664\n1493 cargo_2035_2491656a\n1494 cargo_2035_27293c2c\n1495 cargo_2035_27893eee\n1496 cargo_2035_29666fa0\n1497 cargo_2035_241048fe\n1498 cargo_2035_24286830\n1499 cargo_2035_27295c68\n1500 cargo_2035_28357c15\n1501 cargo_2035_29326790\n1502 cargo_2035_29839f6b\n1503 cargo_2035_304009e7\n1504 cargo_2035_24105eab\n1505 cargo_2035_24288930\n1506 cargo_2035_272973af\n1507 cargo_2035_300022ec\n1508 cargo_2035_30148b7b\n1509 cargo_2035_30349477\n1510 cargo_2035_24106abd\n1511 cargo_2035_27300143\n1512 cargo_2035_28359b69\n1513 cargo_2035_298412e7\n1514 cargo_2035_3040535a\n1515 cargo_2035_30985367\n1516 cargo_2035_24108b6f\n1517 cargo_2035_262955e1\n1518 cargo_2035_273049b6\n1519 cargo_2035_28361344\n1520 cargo_2035_300043df\n1521 cargo_2035_29648bfd\n1522 cargo_2035_29652167\n1523 cargo_2035_28044392\n1524 cargo_2035_25422bfc\n1525 cargo_2035_25433c7f\n1526 cargo_2035_25448822\n1527 cargo_2035_25449647\n1528 cargo_2035_253910aa\n1529 cargo_2035_285579bf\n1530 cargo_2035_253931aa\n1531 cargo_2035_27018e28\n1532 cargo_2035_290410d2\n1533 cargo_2035_253951a4\n1534 cargo_2035_25662733\n1535 cargo_2035_2904349a\n1536 cargo_2035_299029f2\n1537 cargo_2035_25397c9e\n1538 cargo_2035_25664b65\n1539 cargo_2035_29045ad6\n1540 cargo_2035_25540ac0\n1541 cargo_2035_29904460\n1542 cargo_2035_253995c4\n1543 cargo_2035_25666f7e\n1544 cargo_2035_25692115\n1545 cargo_2035_30070e25\n1546 cargo_2035_3080809d\n1547 cargo_2035_3081966f\n1548 cargo_2035_25402112\n1549 cargo_2035_25695be6\n1550 cargo_2035_261876f9\n1551 cargo_2035_28751860\n1552 cargo_2035_30830a38\n1553 cargo_2035_286182c4\n1554 cargo_2035_29907088\n1555 cargo_2035_30834899\n1556 cargo_2035_27028ac4\n1557 cargo_2035_280121f4\n1558 cargo_2035_28579748\n1559 cargo_2035_30922a13\n1560 cargo_2035_277352c9\n1561 cargo_2035_27954309\n1562 cargo_2035_286208a5\n1563 cargo_2035_299100cc\n1564 cargo_2035_30078617\n1565 cargo_2035_30836a2e\n1566 cargo_2035_24479ac7\n1567 cargo_2035_25406576\n1568 cargo_2035_25673f2b\n1569 cargo_2035_2569954a\n1570 cargo_2035_26192c9a\n1571 cargo_2035_290543a2\n1572 cargo_2035_308379bb\n1573 cargo_2035_2862260e\n1574 cargo_2035_29912f7a\n1575 cargo_2035_3083806a\n1576 cargo_2035_28107862\n1577 cargo_2035_29310e28\n1578 cargo_2035_29469d40\n1579 cargo_2035_241214f4\n1580 cargo_2035_2655351d\n1581 cargo_2035_27427d95\n1582 cargo_2035_27737270\n1583 cargo_2035_27924f1f\n1584 cargo_2035_28108922\n1585 cargo_2035_2862328e\n1586 cargo_2035_29223e84\n1587 cargo_2035_2931168f\n1588 cargo_2035_29913cd4\n1589 cargo_2035_24132a6a\n1590 cargo_2035_25755207\n1591 cargo_2035_25780e0d\n1592 cargo_2035_26144acb\n1593 cargo_2035_2656444a\n1594 cargo_2035_28624b3e\n1595 cargo_2035_30799c1b\n1596 cargo_2035_24146b8e\n1597 cargo_2035_2554852c\n1598 cargo_2035_25757bf8\n1599 cargo_2035_261468e1\n1600 cargo_2035_265798bd\n1601 cargo_2035_27739bda\n1602 cargo_2035_27958d1d\n1603 cargo_2035_290591ad\n1604 cargo_2035_29940d1e\n1605 cargo_2035_30801530\n1606 cargo_2035_24150215\n1607 cargo_2035_25761ae7\n1608 cargo_2035_261508ff\n1609 cargo_2035_26583e8d\n1610 cargo_2035_26609199\n1611 cargo_2035_286318e0\n1612 cargo_2035_29064064\n1613 cargo_2035_29944e3b\n1614 cargo_2035_30093db6\n1615 cargo_2035_241511c0\n1616 cargo_2035_24856b68\n1617 cargo_2035_25787307\n1618 cargo_2035_268330c1\n1619 cargo_2035_274479d0\n1620 cargo_2035_28125352\n1621 cargo_2035_28632d51\n1622 cargo_2035_2906513e\n1623 cargo_2035_29232da3\n1624 cargo_2035_293207ce\n1625 cargo_2035_30318bbf\n1626 cargo_2035_24122981\n1627 cargo_2035_244652fe\n1628 cargo_2035_256835ef\n1629 cargo_2035_2578886a\n1630 cargo_2035_2615277c\n1631 cargo_2035_26586681\n1632 cargo_2035_2796370e\n1633 cargo_2035_29066efb\n1634 cargo_2035_30096130\n1635 cargo_2035_30199635\n1636 cargo_2035_241269e5\n1637 cargo_2035_24219a45\n1638 cargo_2035_254246f7\n1639 cargo_2035_25769b01\n1640 cargo_2035_2620946e\n1641 cargo_2035_26368138\n1642 cargo_2035_2714742a\n1643 cargo_2035_28773d79\n1644 cargo_2035_290705ee\n1645 cargo_2035_29717ac4\n1646 cargo_2035_29887b26\n1647 cargo_2035_29952c94\n1648 cargo_2035_30103c5f\n1649 cargo_2035_3081214c\n1650 cargo_2035_30845f90\n1651 cargo_2035_24127d30\n1652 cargo_2035_24471037\n1653 cargo_2035_25660438\n1654 cargo_2035_25689431\n1655 cargo_2035_25795c03\n1656 cargo_2035_26558fad\n1657 cargo_2035_26592bb8\n1658 cargo_2035_27967431\n1659 cargo_2035_28640eae\n1660 cargo_2035_301042d8\n1661 cargo_2035_302059fc\n1662 cargo_2035_241280ea\n1663 cargo_2035_2422106f\n1664 cargo_2035_254260cd\n1665 cargo_2035_25520e56\n1666 cargo_2035_25770ada\n1667 cargo_2035_26160f54\n1668 cargo_2035_262121b0\n1669 cargo_2035_26370ccd\n1670 cargo_2035_2907380b\n1671 cargo_2035_2932897a\n1672 cargo_2035_29954aa6\n1673 cargo_2035_299798d3\n1674 cargo_2035_308148ab\n1675 cargo_2035_3084708e\n1676 cargo_2035_2412976e\n1677 cargo_2035_24865054\n1678 cargo_2035_25632fa6\n1679 cargo_2035_26161da5\n1680 cargo_2035_26560bcc\n1681 cargo_2035_26594e92\n1682 cargo_2035_30207536\n1683 cargo_2035_24130899\n1684 cargo_2035_24223357\n1685 cargo_2035_254280fa\n1686 cargo_2035_25643a47\n1687 cargo_2035_26372d91\n1688 cargo_2035_287521e0\n1689 cargo_2035_29721474\n1690 cargo_2035_299560f8\n1691 cargo_2035_30816b49\n1692 cargo_2035_30849fbd\n1693 cargo_2035_24131cae\n1694 cargo_2035_25651899\n1695 cargo_2035_2616336b\n1696 cargo_2035_265626a5\n1697 cargo_2035_24133ef7\n1698 cargo_2035_242266ae\n1699 cargo_2035_25430b47\n1700 cargo_2035_25525a53\n1701 cargo_2035_25652355\n1702 cargo_2035_26165f6e\n1703 cargo_2035_2637575d\n1704 cargo_2035_26908615\n1705 cargo_2035_29723c08\n1706 cargo_2035_29959023\n1707 cargo_2035_30818a31\n1708 cargo_2035_308529c9\n1709 cargo_2035_241344ef\n1710 cargo_2035_24870e51\n1711 cargo_2035_25653f4a\n1712 cargo_2035_261663a9\n1713 cargo_2035_26565127\n1714 cargo_2035_302112d3\n1715 cargo_2035_24136513\n1716 cargo_2035_2423012c\n1717 cargo_2035_25435394\n1718 cargo_2035_25656b65\n1719 cargo_2035_25706ccd\n1720 cargo_2035_261691ea\n1721 cargo_2035_26379235\n1722 cargo_2035_28780089\n1723 cargo_2035_29728efd\n1724 cargo_2035_298954bc\n1725 cargo_2035_29963de3\n1726 cargo_2035_30823571\n1727 cargo_2035_30856a1d\n1728 cargo_2035_28647e31\n1729 cargo_2035_245433f5\n1730 cargo_2035_25123e60\n1731 cargo_2035_29079438\n1732 cargo_2035_30223407\n1733 cargo_2035_24554063\n1734 cargo_2035_25134cf2\n1735 cargo_2035_29090f0a\n1736 cargo_2035_30234fbb\n1737 cargo_2035_28680d4c\n1738 cargo_2035_2870276c\n1739 cargo_2035_28724ad3\n1740 cargo_2035_28648cbc\n1741 cargo_2035_28650f97\n1742 cargo_2035_25116f98\n1743 cargo_2035_28651ab4\n1744 cargo_2035_286520b7\n1745 cargo_2035_286536a4\n1746 cargo_2035_30189d21\n1747 cargo_2035_28654b58\n1748 cargo_2035_27462513\n1749 cargo_2035_28655add\n1750 cargo_2035_288524c7\n1751 cargo_2035_29517afb\n1752 cargo_2035_295287df\n1753 cargo_2035_27473b2d\n1754 cargo_2035_2953917e\n1755 cargo_2035_295502ba\n1756 cargo_2035_2512671e\n1757 cargo_2035_29092d76\n1758 cargo_2035_29647b76\n1759 cargo_2035_2454600f\n1760 cargo_2035_27506c1b\n1761 cargo_2035_2866037f\n1762 cargo_2035_28859587\n1763 cargo_2035_302360cd\n1764 cargo_2035_2957261e\n1765 cargo_2035_27517c06\n1766 cargo_2035_24548c4d\n1767 cargo_2035_27528153\n1768 cargo_2035_28662db7\n1769 cargo_2035_2886138a\n1770 cargo_2035_30238ddd\n1771 cargo_2035_29583bc4\n1772 cargo_2035_2959173c\n1773 cargo_2035_27529881\n1774 cargo_2035_27452dad\n1775 cargo_2035_286643b0\n1776 cargo_2035_28863a72\n1777 cargo_2035_302406cd\n1778 cargo_2035_2455085d\n1779 cargo_2035_29592319\n1780 cargo_2035_2951802a\n1781 cargo_2035_274530c1\n1782 cargo_2035_27454b61\n1783 cargo_2035_28666f31\n1784 cargo_2035_28854837\n1785 cargo_2035_30242a00\n1786 cargo_2035_295193b5\n1787 cargo_2035_29520008\n1788 cargo_2035_2745588c\n1789 cargo_2035_27456e7c\n1790 cargo_2035_286686a3\n1791 cargo_2035_302446f7\n1792 cargo_2035_24170a8e\n1793 cargo_2035_24555461\n1794 cargo_2035_2910052f\n1795 cargo_2035_29521a22\n1796 cargo_2035_2417132a\n1797 cargo_2035_251363f8\n1798 cargo_2035_29522007\n1799 cargo_2035_241723f6\n1800 cargo_2035_2745721b\n1801 cargo_2035_24173837\n1802 cargo_2035_27458ed6\n1803 cargo_2035_28291134\n1804 cargo_2035_2867161c\n1805 cargo_2035_302473e1\n1806 cargo_2035_24175b01\n1807 cargo_2035_245573bc\n1808 cargo_2035_2417651e\n1809 cargo_2035_28292e0d\n1810 cargo_2035_24177b78\n1811 cargo_2035_27459289\n1812 cargo_2035_2952454b\n1813 cargo_2035_25301943\n1814 cargo_2035_28378cd4\n1815 cargo_2035_30996f0d\n1816 cargo_2035_25345a4d\n1817 cargo_2035_245637e4\n1818 cargo_2035_25144a7f\n1819 cargo_2035_25378b17\n1820 cargo_2035_2841160a\n1821 cargo_2035_28522ee6\n1822 cargo_2035_30554f50\n1823 cargo_2035_2668430f\n1824 cargo_2035_279782b2\n1825 cargo_2035_279807eb\n1826 cargo_2035_25151592\n1827 cargo_2035_2530371e\n1828 cargo_2035_283791dd\n1829 cargo_2035_28490882\n1830 cargo_2035_31028978\n1831 cargo_2035_25007c94\n1832 cargo_2035_252101d8\n1833 cargo_2035_25306a04\n1834 cargo_2035_274740f1\n1835 cargo_2035_2779177f\n1836 cargo_2035_28686ce7\n1837 cargo_2035_302621cf\n1838 cargo_2035_249530bf\n1839 cargo_2035_2521292f\n1840 cargo_2035_253101ac\n1841 cargo_2035_27476713\n1842 cargo_2035_28688c13\n1843 cargo_2035_30264231\n1844 cargo_2035_310354b0\n1845 cargo_2035_279937eb\n1846 cargo_2035_28563c2e\n1847 cargo_2035_2495734c\n1848 cargo_2035_25216707\n1849 cargo_2035_25319e85\n1850 cargo_2035_27480e07\n1851 cargo_2035_27797f51\n1852 cargo_2035_2869300d\n1853 cargo_2035_30269e2b\n1854 cargo_2035_249599d9\n1855 cargo_2035_252198b4\n1856 cargo_2035_25324213\n1857 cargo_2035_2748239a\n1858 cargo_2035_27800528\n1859 cargo_2035_2869555f\n1860 cargo_2035_3027143c\n1861 cargo_2035_25326fb5\n1862 cargo_2035_24638362\n1863 cargo_2035_25164694\n1864 cargo_2035_25329b7e\n1865 cargo_2035_28392774\n1866 cargo_2035_285031e4\n1867 cargo_2035_2912885d\n1868 cargo_2035_30920826\n1869 cargo_2035_31054481\n1870 cargo_2035_249644e4\n1871 cargo_2035_25223ff1\n1872 cargo_2035_253322d9\n1873 cargo_2035_274877d1\n1874 cargo_2035_27804dc7\n1875 cargo_2035_28699a97\n1876 cargo_2035_301324be\n1877 cargo_2035_30275487\n1878 cargo_2035_30923b59\n1879 cargo_2035_24769930\n1880 cargo_2035_267212e8\n1881 cargo_2035_29631c1f\n1882 cargo_2035_30927391\n1883 cargo_2035_25339394\n1884 cargo_2035_2464435d\n1885 cargo_2035_25171d8f\n1886 cargo_2035_25342c84\n1887 cargo_2035_28509ad8\n1888 cargo_2035_29135a5e\n1889 cargo_2035_29555cd8\n1890 cargo_2035_31067f54\n1891 cargo_2035_250908ba\n1892 cargo_2035_26328b54\n1893 cargo_2035_27085cdf\n1894 cargo_2035_27320b3a\n1895 cargo_2035_28459c0f\n1896 cargo_2035_303874a2\n1897 cargo_2035_249729d4\n1898 cargo_2035_2523252d\n1899 cargo_2035_25350145\n1900 cargo_2035_268049c1\n1901 cargo_2035_27496aac\n1902 cargo_2035_27813f49\n1903 cargo_2035_28708662\n1904 cargo_2035_30284b81\n1905 cargo_2035_2535247e\n1906 cargo_2035_292508f9\n1907 cargo_2035_246513cf\n1908 cargo_2035_251779bf\n1909 cargo_2035_25355a9b\n1910 cargo_2035_26251331\n1911 cargo_2035_2851637d\n1912 cargo_2035_29141b4f\n1913 cargo_2035_2956047c\n1914 cargo_2035_31080c9e\n1915 cargo_2035_24168c56\n1916 cargo_2035_24779f94\n1917 cargo_2035_24977d42\n1918 cargo_2035_25236525\n1919 cargo_2035_2535901c\n1920 cargo_2035_27500a7f\n1921 cargo_2035_27817e33\n1922 cargo_2035_28712877\n1923 cargo_2035_292552a0\n1924 cargo_2035_302882a4\n1925 cargo_2035_241693b6\n1926 cargo_2035_249790c7\n1927 cargo_2035_25181926\n1928 cargo_2035_252386b5\n1929 cargo_2035_25363a5a\n1930 cargo_2035_275028bb\n1931 cargo_2035_278194c4\n1932 cargo_2035_282651ed\n1933 cargo_2035_28715ac1\n1934 cargo_2035_30170a9f\n1935 cargo_2035_30291b57\n1936 cargo_2035_2415252a\n1937 cargo_2035_24751d63\n1938 cargo_2035_25364f7d\n1939 cargo_2035_262224d9\n1940 cargo_2035_285206ca\n1941 cargo_2035_291463fe\n1942 cargo_2035_29565069\n1943 cargo_2035_3108971c\n1944 cargo_2035_26933205\n1945 cargo_2035_281324f7\n1946 cargo_2035_29017850\n1947 cargo_2035_29789bcc\n1948 cargo_2035_30100a8f\n1949 cargo_2035_241637d4\n1950 cargo_2035_24602cbb\n1951 cargo_2035_24762824\n1952 cargo_2035_25183d41\n1953 cargo_2035_25366c72\n1954 cargo_2035_26223dfd\n1955 cargo_2035_285216a3\n1956 cargo_2035_29147803\n1957 cargo_2035_292625a7\n1958 cargo_2035_30907673\n1959 cargo_2035_31091ed9\n1960 cargo_2035_241740cd\n1961 cargo_2035_24773431\n1962 cargo_2035_24982ae9\n1963 cargo_2035_2871850f\n1964 cargo_2035_301731e6\n1965 cargo_2035_302940c8\n1966 cargo_2035_30713d84\n1967 cargo_2035_24179925\n1968 cargo_2035_24604736\n1969 cargo_2035_24782db3\n1970 cargo_2035_2518553e\n1971 cargo_2035_25371c1d\n1972 cargo_2035_26225563\n1973 cargo_2035_2852422a\n1974 cargo_2035_2914965f\n1975 cargo_2035_3071496d\n1976 cargo_2035_30929e8b\n1977 cargo_2035_310961da\n1978 cargo_2035_2555662d\n1979 cargo_2035_26211787\n1980 cargo_2035_2814013f\n1981 cargo_2035_2877517e\n1982 cargo_2035_2948675d\n1983 cargo_2035_3084607d\n1984 cargo_2035_24180e71\n1985 cargo_2035_24783c85\n1986 cargo_2035_24985491\n1987 cargo_2035_251865aa\n1988 cargo_2035_28720cb7\n1989 cargo_2035_301750ad\n1990 cargo_2035_30296869\n1991 cargo_2035_241810e3\n1992 cargo_2035_24606dc8\n1993 cargo_2035_25187836\n1994 cargo_2035_253754b2\n1995 cargo_2035_26227d1e\n1996 cargo_2035_282714e0\n1997 cargo_2035_28526fa6\n1998 cargo_2035_29151cf4\n1999 cargo_2035_30717901\n2000 cargo_2035_30951e9c\n2001 cargo_2035_31100fa8\n2002 cargo_2035_25521a67\n2003 cargo_2035_25557237\n2004 cargo_2035_265049c2\n2005 cargo_2035_27968e56\n2006 cargo_2035_28144e02\n2007 cargo_2035_29022113\n2008 cargo_2035_2998072a\n2009 cargo_2035_30848126\n2010 cargo_2035_24182ef5\n2011 cargo_2035_24987678\n2012 cargo_2035_2872244d\n2013 cargo_2035_301772a2\n2014 cargo_2035_30298048\n2015 cargo_2035_24183f03\n2016 cargo_2035_246086ea\n2017 cargo_2035_24785547\n2018 cargo_2035_251901b5\n2019 cargo_2035_253803a8\n2020 cargo_2035_26229d1c\n2021 cargo_2035_28275be0\n2022 cargo_2035_28528bcc\n2023 cargo_2035_291533e7\n2024 cargo_2035_30953045\n2025 cargo_2035_311053bb\n2026 cargo_2035_241844a4\n2027 cargo_2035_24786714\n2028 cargo_2035_24989440\n2029 cargo_2035_28725e9f\n2030 cargo_2035_30180de9\n2031 cargo_2035_30301071\n2032 cargo_2035_3072258f\n2033 cargo_2035_24153944\n2034 cargo_2035_246118a8\n2035 cargo_2035_25192f73\n2036 cargo_2035_2538457f\n2037 cargo_2035_26232d94\n2038 cargo_2035_2828097c\n2039 cargo_2035_285305c1\n2040 cargo_2035_29155b85\n2041 cargo_2035_3059672e\n2042 cargo_2035_30887f7e\n2043 cargo_2035_26214004\n2044 cargo_2035_2659848c\n2045 cargo_2035_269096bb\n2046 cargo_2035_27969133\n2047 cargo_2035_28153443\n2048 cargo_2035_2864256f\n2049 cargo_2035_24155978\n2050 cargo_2035_24613ae8\n2051 cargo_2035_24629e1c\n2052 cargo_2035_25388926\n2053 cargo_2035_26234a55\n2054 cargo_2035_2828446e\n2055 cargo_2035_2853242d\n2056 cargo_2035_29158708\n2057 cargo_2035_30598d85\n2058 cargo_2035_30889c75\n2059 cargo_2035_25528802\n2060 cargo_2035_262165d9\n2061 cargo_2035_26911f09\n2062 cargo_2035_28157fe2\n2063 cargo_2035_28644c31\n2064 cargo_2035_30855af5\n2065 cargo_2035_241565dd\n2066 cargo_2035_24630ccf\n2067 cargo_2035_24754e3d\n2068 cargo_2035_28729306\n2069 cargo_2035_2915970f\n2070 cargo_2035_30184f37\n2071 cargo_2035_303051d4\n2072 cargo_2035_30599d46\n2073 cargo_2035_3072860a\n2074 cargo_2035_2660128e\n2075 cargo_2035_2712040b\n2076 cargo_2035_27434b24\n2077 cargo_2035_27945cb3\n2078 cargo_2035_2815837b\n2079 cargo_2035_29029ab3\n2080 cargo_2035_29332682\n2081 cargo_2035_24157265\n2082 cargo_2035_246159a6\n2083 cargo_2035_24631851\n2084 cargo_2035_25196584\n2085 cargo_2035_25273954\n2086 cargo_2035_26236a59\n2087 cargo_2035_28288e49\n2088 cargo_2035_28421130\n2089 cargo_2035_285358b0\n2090 cargo_2035_30600c5c\n2091 cargo_2035_308916cf\n2092 cargo_2035_309981eb\n2093 cargo_2035_24205ad5\n2094 cargo_2035_26035cbf\n2095 cargo_2035_311367b9\n2096 cargo_2035_26038f0e\n2097 cargo_2035_3002057d\n2098 cargo_2035_30024917\n2099 cargo_2035_3002807b\n2100 cargo_2035_30877215\n2101 cargo_2035_26459649\n2102 cargo_2035_26461c00\n2103 cargo_2035_293881ea\n2104 cargo_2035_30604d4d\n2105 cargo_2035_2507818c\n2106 cargo_2035_2939020b\n2107 cargo_2035_3015300c\n2108 cargo_2035_2644186c\n2109 cargo_2035_29393e69\n2110 cargo_2035_2431298a\n2111 cargo_2035_25080e52\n2112 cargo_2035_29395e50\n2113 cargo_2035_2985567c\n2114 cargo_2035_3015569e\n2115 cargo_2035_303772d3\n2116 cargo_2035_26444022\n2117 cargo_2035_27091de7\n2118 cargo_2035_283297a8\n2119 cargo_2035_29397d1c\n2120 cargo_2035_2985743f\n2121 cargo_2035_26446716\n2122 cargo_2035_27095461\n2123 cargo_2035_2833446c\n2124 cargo_2035_29401bff\n2125 cargo_2035_2986287d\n2126 cargo_2035_3015895b\n2127 cargo_2035_24212926\n2128 cargo_2035_264485e7\n2129 cargo_2035_271002fa\n2130 cargo_2035_2833806b\n2131 cargo_2035_294064a6\n2132 cargo_2035_29866f8c\n2133 cargo_2035_30160fdd\n2134 cargo_2035_30780f4e\n2135 cargo_2035_2418652e\n2136 cargo_2035_24893301\n2137 cargo_2035_250876ae\n2138 cargo_2035_25450484\n2139 cargo_2035_28300de1\n2140 cargo_2035_28817762\n2141 cargo_2035_30384456\n2142 cargo_2035_24187721\n2143 cargo_2035_249151e5\n2144 cargo_2035_25575445\n2145 cargo_2035_270633eb\n2146 cargo_2035_27287ca2\n2147 cargo_2035_28311194\n2148 cargo_2035_28355240\n2149 cargo_2035_2882831f\n2150 cargo_2035_29837958\n2151 cargo_2035_2418866f\n2152 cargo_2035_24736c95\n2153 cargo_2035_250895c5\n2154 cargo_2035_25577e26\n2155 cargo_2035_28322c0e\n2156 cargo_2035_28839efb\n2157 cargo_2035_29757f75\n2158 cargo_2035_30386cd5\n2159 cargo_2035_30490926\n2160 cargo_2035_24189cae\n2161 cargo_2035_24948a7e\n2162 cargo_2035_28333e64\n2163 cargo_2035_28372f26\n2164 cargo_2035_298597fb\n2165 cargo_2035_24190e85\n2166 cargo_2035_2488330c\n2167 cargo_2035_25091711\n2168 cargo_2035_254808c1\n2169 cargo_2035_2591945e\n2170 cargo_2035_27605520\n2171 cargo_2035_2833924e\n2172 cargo_2035_28847e4a\n2173 cargo_2035_2986763f\n2174 cargo_2035_303885d1\n2175 cargo_2035_24191f4b\n2176 cargo_2035_24357c60\n2177 cargo_2035_250390fb\n2178 cargo_2035_25492057\n2179 cargo_2035_25920420\n2180 cargo_2035_26850d7c\n2181 cargo_2035_27547614\n2182 cargo_2035_276073f3\n2183 cargo_2035_28374b01\n2184 cargo_2035_29761789\n2185 cargo_2035_30438bc3\n2186 cargo_2035_3065574b\n2187 cargo_2035_241927a4\n2188 cargo_2035_24777367\n2189 cargo_2035_24887f7a\n2190 cargo_2035_25040146\n2191 cargo_2035_25094cb0\n2192 cargo_2035_25580746\n2193 cargo_2035_259227b1\n2194 cargo_2035_26004836\n2195 cargo_2035_28341adc\n2196 cargo_2035_288491dd\n2197 cargo_2035_30391c82\n2198 cargo_2035_2419446e\n2199 cargo_2035_24891edd\n2200 cargo_2035_2509676b\n2201 cargo_2035_25813d36\n2202 cargo_2035_28343c5d\n2203 cargo_2035_28851cd5\n2204 cargo_2035_30393df9\n2205 cargo_2035_24195202\n2206 cargo_2035_24489cfc\n2207 cargo_2035_248940fe\n2208 cargo_2035_258162f6\n2209 cargo_2035_26016dce\n2210 cargo_2035_28301f49\n2211 cargo_2035_28345590\n2212 cargo_2035_28818673\n2213 cargo_2035_296552f6\n2214 cargo_2035_298271b4\n2215 cargo_2035_241976c3\n2216 cargo_2035_24490319\n2217 cargo_2035_24896735\n2218 cargo_2035_25452681\n2219 cargo_2035_258182ea\n2220 cargo_2035_268619aa\n2221 cargo_2035_27251744\n2222 cargo_2035_28302a76\n2223 cargo_2035_28810ebb\n2224 cargo_2035_30395196\n2225 cargo_2035_308675c3\n2226 cargo_2035_241980ef\n2227 cargo_2035_244912ef\n2228 cargo_2035_2489871c\n2229 cargo_2035_25717a6d\n2230 cargo_2035_258200b2\n2231 cargo_2035_28303939\n2232 cargo_2035_283479c0\n2233 cargo_2035_28820904\n2234 cargo_2035_29829ab7\n2235 cargo_2035_24199833\n2236 cargo_2035_24492b79\n2237 cargo_2035_24900db8\n2238 cargo_2035_25100a96\n2239 cargo_2035_25454111\n2240 cargo_2035_25822a90\n2241 cargo_2035_2601943f\n2242 cargo_2035_2725356a\n2243 cargo_2035_2830458c\n2244 cargo_2035_28821e25\n2245 cargo_2035_30397fc7\n2246 cargo_2035_306628ab\n2247 cargo_2035_30869e77\n2248 cargo_2035_242006b2\n2249 cargo_2035_249026dc\n2250 cargo_2035_25722f31\n2251 cargo_2035_25824351\n2252 cargo_2035_260205b4\n2253 cargo_2035_27280625\n2254 cargo_2035_2830577a\n2255 cargo_2035_28349ab4\n2256 cargo_2035_28822575\n2257 cargo_2035_29831d3f\n2258 cargo_2035_242017e9\n2259 cargo_2035_24494587\n2260 cargo_2035_249054b0\n2261 cargo_2035_25102d34\n2262 cargo_2035_25586f4e\n2263 cargo_2035_2582761d\n2264 cargo_2035_264334c0\n2265 cargo_2035_27255be6\n2266 cargo_2035_28306069\n2267 cargo_2035_28823ab2\n2268 cargo_2035_303991bf\n2269 cargo_2035_3087102f\n2270 cargo_2035_24202ea3\n2271 cargo_2035_24246b56\n2272 cargo_2035_24495f43\n2273 cargo_2035_24907fba\n2274 cargo_2035_25829324\n2275 cargo_2035_28307b2f\n2276 cargo_2035_28351841\n2277 cargo_2035_28824db0\n2278 cargo_2035_24203172\n2279 cargo_2035_2449627a\n2280 cargo_2035_24909e7e\n2281 cargo_2035_25105ed0\n2282 cargo_2035_25931767\n2283 cargo_2035_272589e6\n2284 cargo_2035_28308a6a\n2285 cargo_2035_28825efc\n2286 cargo_2035_29834845\n2287 cargo_2035_3040263b\n2288 cargo_2035_308735fc\n2289 cargo_2035_27072f8c\n2290 cargo_2035_27290dcd\n2291 cargo_2035_284464f9\n2292 cargo_2035_30367d19\n2293 cargo_2035_270753d0\n2294 cargo_2035_272946d9\n2295 cargo_2035_2844962e\n2296 cargo_2035_30389d17\n2297 cargo_2035_24919c54\n2298 cargo_2035_25464169\n2299 cargo_2035_25839afd\n2300 cargo_2035_260293df\n2301 cargo_2035_27076a95\n2302 cargo_2035_2726272f\n2303 cargo_2035_27296778\n2304 cargo_2035_278946b7\n2305 cargo_2035_28450672\n2306 cargo_2035_25447a3b\n2307 cargo_2035_25390349\n2308 cargo_2035_25392443\n2309 cargo_2035_289740cc\n2310 cargo_2035_29040244\n2311 cargo_2035_292071fb\n2312 cargo_2035_30059ce0\n2313 cargo_2035_25394dd8\n2314 cargo_2035_28976077\n2315 cargo_2035_290426fc\n2316 cargo_2035_2920970d\n2317 cargo_2035_253962d4\n2318 cargo_2035_2566354d\n2319 cargo_2035_27156d7f\n2320 cargo_2035_27912d20\n2321 cargo_2035_28978035\n2322 cargo_2035_29044784\n2323 cargo_2035_29211799\n2324 cargo_2035_25398c54\n2325 cargo_2035_2569195a\n2326 cargo_2035_26819aec\n2327 cargo_2035_27914c15\n2328 cargo_2035_28980f52\n2329 cargo_2035_290463d9\n2330 cargo_2035_292130a4\n2331 cargo_2035_307973ab\n2332 cargo_2035_25646c6a\n2333 cargo_2035_256688f1\n2334 cargo_2035_26507219\n2335 cargo_2035_2773395b\n2336 cargo_2035_27917ddf\n2337 cargo_2035_28094373\n2338 cargo_2035_28616ab5\n2339 cargo_2035_28983493\n2340 cargo_2035_29216b09\n2341 cargo_2035_29305e15\n2342 cargo_2035_297778e2\n2343 cargo_2035_30073953\n2344 cargo_2035_254080de\n2345 cargo_2035_2575401e\n2346 cargo_2035_26362a1a\n2347 cargo_2035_2689565f\n2348 cargo_2035_28758400\n2349 cargo_2035_29056147\n2350 cargo_2035_29937dea\n2351 cargo_2035_300826bd\n2352 cargo_2035_307988bf\n2353 cargo_2035_25409c6b\n2354 cargo_2035_261957d0\n2355 cargo_2035_26373463\n2356 cargo_2035_27137373\n2357 cargo_2035_27925e32\n2358 cargo_2035_29057c56\n2359 cargo_2035_292241dd\n2360 cargo_2035_297032af\n2361 cargo_2035_298739bf\n2362 cargo_2035_2993838b\n2363 cargo_2035_25413456\n2364 cargo_2035_25758843\n2365 cargo_2035_26147a52\n2366 cargo_2035_26392bf9\n2367 cargo_2035_269250fd\n2368 cargo_2035_28762f2f\n2369 cargo_2035_29876c6c\n2370 cargo_2035_29916df1\n2371 cargo_2035_308023fd\n2372 cargo_2035_254145f6\n2373 cargo_2035_25550e4c\n2374 cargo_2035_26393f36\n2375 cargo_2035_271414fb\n2376 cargo_2035_28996660\n2377 cargo_2035_29229f82\n2378 cargo_2035_29877749\n2379 cargo_2035_29917f7e\n2380 cargo_2035_30090425\n2381 cargo_2035_25043736\n2382 cargo_2035_25417114\n2383 cargo_2035_25537446\n2384 cargo_2035_2576224d\n2385 cargo_2035_26151475\n2386 cargo_2035_263969de\n2387 cargo_2035_26929e8d\n2388 cargo_2035_28767f72\n2389 cargo_2035_29319bbd\n2390 cargo_2035_29710daf\n2391 cargo_2035_299454c0\n2392 cargo_2035_30805cfd\n2393 cargo_2035_242156fa\n2394 cargo_2035_25419db3\n2395 cargo_2035_25514ecd\n2396 cargo_2035_25765830\n2397 cargo_2035_261540db\n2398 cargo_2035_263644bc\n2399 cargo_2035_26897c00\n2400 cargo_2035_287696c2\n2401 cargo_2035_29712696\n2402 cargo_2035_29882219\n2403 cargo_2035_30097e83\n2404 cargo_2035_308071a3\n2405 cargo_2035_30841778\n2406 cargo_2035_24216888\n2407 cargo_2035_25420363\n2408 cargo_2035_26365bf8\n2409 cargo_2035_2683518b\n2410 cargo_2035_27145019\n2411 cargo_2035_29002d6d\n2412 cargo_2035_29016834\n2413 cargo_2035_2923548d\n2414 cargo_2035_2988461b\n2415 cargo_2035_30809b31\n2416 cargo_2035_24217795\n2417 cargo_2035_25421e17\n2418 cargo_2035_25516d73\n2419 cargo_2035_257670e0\n2420 cargo_2035_26156c45\n2421 cargo_2035_262071c0\n2422 cargo_2035_26366864\n2423 cargo_2035_287715ee\n2424 cargo_2035_29068909\n2425 cargo_2035_29885501\n2426 cargo_2035_29950719\n2427 cargo_2035_30101206\n2428 cargo_2035_308105ef\n2429 cargo_2035_30843d4f\n2430 cargo_2035_24218339\n2431 cargo_2035_25423857\n2432 cargo_2035_26367739\n2433 cargo_2035_2714637e\n2434 cargo_2035_274509d0\n2435 cargo_2035_27938d37\n2436 cargo_2035_290046e2\n2437 cargo_2035_29018e44\n2438 cargo_2035_292371a9\n2439 cargo_2035_295983d1\n2440 cargo_2035_29716bb8\n2441 cargo_2035_2979023a\n2442 cargo_2035_29886428\n2443 cargo_2035_299267e2\n2444 cargo_2035_2995196e\n2445 cargo_2035_30102afd\n2446 cargo_2035_30811cd2\n2447 cargo_2035_24222070\n2448 cargo_2035_254275a1\n2449 cargo_2035_261774e1\n2450 cargo_2035_28606e04\n2451 cargo_2035_29720a0b\n2452 cargo_2035_29955ea9\n2453 cargo_2035_30815fa3\n2454 cargo_2035_24225592\n2455 cargo_2035_254292df\n2456 cargo_2035_2552461d\n2457 cargo_2035_26374690\n2458 cargo_2035_2690704c\n2459 cargo_2035_28763dfd\n2460 cargo_2035_29957ae2\n2461 cargo_2035_30817c5a\n2462 cargo_2035_242287eb\n2463 cargo_2035_25432ecf\n2464 cargo_2035_25527058\n2465 cargo_2035_2565467f\n2466 cargo_2035_263777ac\n2467 cargo_2035_26910b88\n2468 cargo_2035_2877810c\n2469 cargo_2035_2972647f\n2470 cargo_2035_29961ae9\n2471 cargo_2035_302120cc\n2472 cargo_2035_30821ffc\n2473 cargo_2035_30854fc7\n2474 cargo_2035_27364275\n2475 cargo_2035_276799bc\n2476 cargo_2035_27408dab\n2477 cargo_2035_27771a6a\n2478 cargo_2035_27425936\n2479 cargo_2035_2763972f\n2480 cargo_2035_27774770\n2481 cargo_2035_27777176\n2482 cargo_2035_28961dcc\n2483 cargo_2035_28963403\n2484 cargo_2035_28908794\n2485 cargo_2035_27654690\n2486 cargo_2035_27658494\n2487 cargo_2035_30785cbb\n2488 cargo_2035_2432331f\n2489 cargo_2035_276661e4\n2490 cargo_2035_27381636\n2491 cargo_2035_27554b3f\n2492 cargo_2035_275566f2\n2493 cargo_2035_2755880b\n2494 cargo_2035_273858c4\n2495 cargo_2035_27560f09\n2496 cargo_2035_2756251f\n2497 cargo_2035_275696fd\n2498 cargo_2035_275712ec\n2499 cargo_2035_2941583e\n2500 cargo_2035_29742603\n2501 cargo_2035_30758cf7\n2502 cargo_2035_24309db6\n2503 cargo_2035_2467601d\n2504 cargo_2035_26306022\n2505 cargo_2035_26463a7e\n2506 cargo_2035_26955320\n2507 cargo_2035_27580a4a\n2508 cargo_2035_293437f4\n2509 cargo_2035_3118141a\n2510 cargo_2035_24797827\n2511 cargo_2035_27581f9f\n2512 cargo_2035_296832d5\n2513 cargo_2035_3064198a\n2514 cargo_2035_246792d0\n2515 cargo_2035_247981aa\n2516 cargo_2035_26311684\n2517 cargo_2035_26957bae\n2518 cargo_2035_27584f66\n2519 cargo_2035_29049393\n2520 cargo_2035_293459ec\n2521 cargo_2035_294215cb\n2522 cargo_2035_297499bc\n2523 cargo_2035_24680a0b\n2524 cargo_2035_2480008b\n2525 cargo_2035_2595120b\n2526 cargo_2035_26313c43\n2527 cargo_2035_26959cf1\n2528 cargo_2035_27394837\n2529 cargo_2035_27587fe5\n2530 cargo_2035_2817686c\n2531 cargo_2035_2934789a\n2532 cargo_2035_29423ea1\n2533 cargo_2035_30773848\n2534 cargo_2035_24681817\n2535 cargo_2035_24801096\n2536 cargo_2035_2595211e\n2537 cargo_2035_26960823\n2538 cargo_2035_27589fdc\n2539 cargo_2035_293484af\n2540 cargo_2035_29424596\n2541 cargo_2035_2975170a\n2542 cargo_2035_246833c0\n2543 cargo_2035_259147c0\n2544 cargo_2035_26318dde\n2545 cargo_2035_26962ebe\n2546 cargo_2035_2759395c\n2547 cargo_2035_29350a33\n2548 cargo_2035_29426993\n2549 cargo_2035_30778b86\n2550 cargo_2035_311936c4\n2551 cargo_2035_24684e93\n2552 cargo_2035_2480442e\n2553 cargo_2035_25597273\n2554 cargo_2035_26322822\n2555 cargo_2035_2696360b\n2556 cargo_2035_27595ed3\n2557 cargo_2035_28180409\n2558 cargo_2035_2935168d\n2559 cargo_2035_2942738f\n2560 cargo_2035_2434605b\n2561 cargo_2035_25008ef4\n2562 cargo_2035_25997ad3\n2563 cargo_2035_275967e6\n2564 cargo_2035_28903337\n2565 cargo_2035_30446083\n2566 cargo_2035_306499b4\n2567 cargo_2035_24348b57\n2568 cargo_2035_250198ca\n2569 cargo_2035_25488e7c\n2570 cargo_2035_263250f7\n2571 cargo_2035_27599f05\n2572 cargo_2035_30468f63\n2573 cargo_2035_306506f3\n2574 cargo_2035_24350bad\n2575 cargo_2035_25030adb\n2576 cargo_2035_2547263c\n2577 cargo_2035_254890ad\n2578 cargo_2035_25999d1a\n2579 cargo_2035_27541172\n2580 cargo_2035_27601dca\n2581 cargo_2035_30651f30\n2582 cargo_2035_2435287b\n2583 cargo_2035_25037eed\n2584 cargo_2035_25490343\n2585 cargo_2035_26329637\n2586 cargo_2035_27603b66\n2587 cargo_2035_28799499\n2588 cargo_2035_297592c3\n2589 cargo_2035_30498d83\n2590 cargo_2035_30652c13\n2591 cargo_2035_243543d4\n2592 cargo_2035_2480987a\n2593 cargo_2035_25038750\n2594 cargo_2035_26001ec5\n2595 cargo_2035_26331f8c\n2596 cargo_2035_26848d3b\n2597 cargo_2035_29760071\n2598 cargo_2035_3043656c\n2599 cargo_2035_30653d3a\n2600 cargo_2035_2436427e\n2601 cargo_2035_25606743\n2602 cargo_2035_25713158\n2603 cargo_2035_2592487d\n2604 cargo_2035_25965e5f\n2605 cargo_2035_26857c0c\n2606 cargo_2035_27355d69\n2607 cargo_2035_27404686\n2608 cargo_2035_27700fac\n2609 cargo_2035_289130b2\n2610 cargo_2035_29701a1e\n2611 cargo_2035_298251fc\n2612 cargo_2035_305281f3\n2613 cargo_2035_306592b5\n2614 cargo_2035_2437257d\n2615 cargo_2035_24444001\n2616 cargo_2035_25012e23\n2617 cargo_2035_257205f9\n2618 cargo_2035_25991370\n2619 cargo_2035_26349618\n2620 cargo_2035_27623ee3\n2621 cargo_2035_289166fd\n2622 cargo_2035_30413936\n2623 cargo_2035_30451ce5\n2624 cargo_2035_24376512\n2625 cargo_2035_24446788\n2626 cargo_2035_2501441c\n2627 cargo_2035_25456e6e\n2628 cargo_2035_2572416f\n2629 cargo_2035_2592948a\n2630 cargo_2035_268674a6\n2631 cargo_2035_276278c7\n2632 cargo_2035_28918c37\n2633 cargo_2035_304150fc\n2634 cargo_2035_3045572a\n2635 cargo_2035_3066427e\n2636 cargo_2035_242494c7\n2637 cargo_2035_24284e13\n2638 cargo_2035_26407a33\n2639 cargo_2035_288163f7\n2640 cargo_2035_298105b4\n2641 cargo_2035_30536eb6\n2642 cargo_2035_311646d8\n2643 cargo_2035_24251270\n2644 cargo_2035_24386404\n2645 cargo_2035_24414181\n2646 cargo_2035_24517490\n2647 cargo_2035_248396e1\n2648 cargo_2035_25617d8b\n2649 cargo_2035_257344e7\n2650 cargo_2035_25910e19\n2651 cargo_2035_2612743d\n2652 cargo_2035_2687780d\n2653 cargo_2035_289246b6\n2654 cargo_2035_29181680\n2655 cargo_2035_2966414c\n2656 cargo_2035_3046594a\n2657 cargo_2035_24253dc1\n2658 cargo_2035_243928ee\n2659 cargo_2035_246683e6\n2660 cargo_2035_24824023\n2661 cargo_2035_25022d69\n2662 cargo_2035_25739081\n2663 cargo_2035_26131de2\n2664 cargo_2035_26979781\n2665 cargo_2035_27263231\n2666 cargo_2035_27714827\n2667 cargo_2035_28785021\n2668 cargo_2035_29184872\n2669 cargo_2035_29667ac9\n2670 cargo_2035_30423a5d\n2671 cargo_2035_30471e77\n2672 cargo_2035_306687af\n2673 cargo_2035_2425453a\n2674 cargo_2035_24394a30\n2675 cargo_2035_2446072f\n2676 cargo_2035_24520425\n2677 cargo_2035_246699cd\n2678 cargo_2035_2482594a\n2679 cargo_2035_25023899\n2680 cargo_2035_25742017\n2681 cargo_2035_2629074c\n2682 cargo_2035_277631cd\n2683 cargo_2035_289279e2\n2684 cargo_2035_2895051d\n2685 cargo_2035_29450716\n2686 cargo_2035_304248b1\n2687 cargo_2035_30473cd2\n2688 cargo_2035_242556a3\n2689 cargo_2035_24395939\n2690 cargo_2035_24419c31\n2691 cargo_2035_245216c6\n2692 cargo_2035_248443c0\n2693 cargo_2035_25050772\n2694 cargo_2035_25622998\n2695 cargo_2035_25743efc\n2696 cargo_2035_26980d34\n2697 cargo_2035_2716044e\n2698 cargo_2035_27414728\n2699 cargo_2035_27896f85\n2700 cargo_2035_28928667\n2701 cargo_2035_298156ae\n2702 cargo_2035_2984278d\n2703 cargo_2035_30474038\n2704 cargo_2035_24256d41\n2705 cargo_2035_243329ea\n2706 cargo_2035_24398db8\n2707 cargo_2035_24462dc8\n2708 cargo_2035_245225f9\n2709 cargo_2035_248273c0\n2710 cargo_2035_2502591f\n2711 cargo_2035_259375f2\n2712 cargo_2035_2594512e\n2713 cargo_2035_26294398\n2714 cargo_2035_2688798e\n2715 cargo_2035_289292f2\n2716 cargo_2035_2984394c\n2717 cargo_2035_30426770\n2718 cargo_2035_304770c9\n2719 cargo_2035_30671c81\n2720 cargo_2035_26041244\n2721 cargo_2035_26281078\n2722 cargo_2035_29364bba\n2723 cargo_2035_250722fe\n2724 cargo_2035_2627117e\n2725 cargo_2035_29377e04\n2726 cargo_2035_242718b8\n2727 cargo_2035_25962811\n2728 cargo_2035_26335ad1\n2729 cargo_2035_27697d57\n2730 cargo_2035_296982ce\n2731 cargo_2035_30525224\n2732 cargo_2035_24273e66\n2733 cargo_2035_26635666\n2734 cargo_2035_271047fc\n2735 cargo_2035_27270447\n2736 cargo_2035_28469704\n2737 cargo_2035_24277072\n2738 cargo_2035_255840ad\n2739 cargo_2035_26256cbb\n2740 cargo_2035_26483436\n2741 cargo_2035_272780ff\n2742 cargo_2035_2788408b\n2743 cargo_2035_29496198\n2744 cargo_2035_30034fcb\n2745 cargo_2035_24290db0\n2746 cargo_2035_273032d0\n2747 cargo_2035_278978da\n2748 cargo_2035_28453f8a\n2749 cargo_2035_30406ccb\n2750 cargo_2035_27773f51\n2751 cargo_2035_27781f41\n2752 cargo_2035_289661e2\n2753 cargo_2035_28897646\n2754 cargo_2035_24318ce9\n2755 cargo_2035_24320406\n2756 cargo_2035_307817f9\n2757 cargo_2035_24325a30\n2758 cargo_2035_29196123\n2759 cargo_2035_30789188\n2760 cargo_2035_243278e6\n2761 cargo_2035_28873a60\n2762 cargo_2035_307923f8\n2763 cargo_2035_288810ba\n2764 cargo_2035_275748a6\n2765 cargo_2035_28892d68\n2766 cargo_2035_31176568\n2767 cargo_2035_25077210\n2768 cargo_2035_26302550\n2769 cargo_2035_27391972\n2770 cargo_2035_27681a11\n2771 cargo_2035_28170cdc\n2772 cargo_2035_288934b0\n2773 cargo_2035_294184e4\n2774 cargo_2035_30509b7e\n2775 cargo_2035_30763033\n2776 cargo_2035_2431415f\n2777 cargo_2035_24337a4d\n2778 cargo_2035_26314be8\n2779 cargo_2035_275887ca\n2780 cargo_2035_288993c3\n2781 cargo_2035_29690285\n2782 cargo_2035_30645f1a\n2783 cargo_2035_31189bb6\n2784 cargo_2035_24347ad9\n2785 cargo_2035_25461d27\n2786 cargo_2035_255981d1\n2787 cargo_2035_25916ad8\n2788 cargo_2035_25998908\n2789 cargo_2035_26324524\n2790 cargo_2035_27346b96\n2791 cargo_2035_27692095\n2792 cargo_2035_28904f1d\n2793 cargo_2035_28943dbc\n2794 cargo_2035_30343157\n2795 cargo_2035_3045764a\n2796 cargo_2035_3051925a\n2797 cargo_2035_243514c8\n2798 cargo_2035_25479eba\n2799 cargo_2035_256002bf\n2800 cargo_2035_2600012f\n2801 cargo_2035_273480fc\n2802 cargo_2035_2740052a\n2803 cargo_2035_27694013\n2804 cargo_2035_28906d38\n2805 cargo_2035_3049746e\n2806 cargo_2035_3052181f\n2807 cargo_2035_2435598d\n2808 cargo_2035_25481f51\n2809 cargo_2035_25602c3a\n2810 cargo_2035_260031a8\n2811 cargo_2035_263336c5\n2812 cargo_2035_2684910e\n2813 cargo_2035_273507c5\n2814 cargo_2035_27401842\n2815 cargo_2035_27696962\n2816 cargo_2035_2890936b\n2817 cargo_2035_28967131\n2818 cargo_2035_30037b14\n2819 cargo_2035_30437832\n2820 cargo_2035_30524b23\n2821 cargo_2035_2435997d\n2822 cargo_2035_2570957c\n2823 cargo_2035_259634f4\n2824 cargo_2035_2633663b\n2825 cargo_2035_26852c33\n2826 cargo_2035_27610861\n2827 cargo_2035_28910be2\n2828 cargo_2035_30440fb3\n2829 cargo_2035_306564ee\n2830 cargo_2035_2436859a\n2831 cargo_2035_2444256d\n2832 cargo_2035_248166c8\n2833 cargo_2035_250109ce\n2834 cargo_2035_2509822f\n2835 cargo_2035_257150d5\n2836 cargo_2035_25925d1c\n2837 cargo_2035_26008fc4\n2838 cargo_2035_276187fe\n2839 cargo_2035_28819786\n2840 cargo_2035_28971b18\n2841 cargo_2035_306606c7\n2842 cargo_2035_24373741\n2843 cargo_2035_2483333c\n2844 cargo_2035_25013a32\n2845 cargo_2035_2550193d\n2846 cargo_2035_256110f4\n2847 cargo_2035_25721b55\n2848 cargo_2035_25969e3c\n2849 cargo_2035_26121add\n2850 cargo_2035_263505ab\n2851 cargo_2035_26864880\n2852 cargo_2035_269584f3\n2853 cargo_2035_27351731\n2854 cargo_2035_28917d03\n2855 cargo_2035_28972b55\n2856 cargo_2035_29175c12\n2857 cargo_2035_29441e3f\n2858 cargo_2035_29658685\n2859 cargo_2035_29804fca\n2860 cargo_2035_30042f02\n2861 cargo_2035_30366564\n2862 cargo_2035_304526bb\n2863 cargo_2035_31159a6e\n2864 cargo_2035_2437902a\n2865 cargo_2035_24447a02\n2866 cargo_2035_250151e9\n2867 cargo_2035_255033bc\n2868 cargo_2035_25726386\n2869 cargo_2035_2635618b\n2870 cargo_2035_26870713\n2871 cargo_2035_27176465\n2872 cargo_2035_27629d4c\n2873 cargo_2035_27707ea0\n2874 cargo_2035_288138ab\n2875 cargo_2035_30044ebd\n2876 cargo_2035_30416fb5\n2877 cargo_2035_304589dc\n2878 cargo_2035_306664cd\n2879 cargo_2035_307454dc\n2880 cargo_2035_24381760\n2881 cargo_2035_24448c2a\n2882 cargo_2035_25016256\n2883 cargo_2035_25458da2\n2884 cargo_2035_25728f42\n2885 cargo_2035_25974a3e\n2886 cargo_2035_26872fb9\n2887 cargo_2035_2763212b\n2888 cargo_2035_2892178d\n2889 cargo_2035_304171fb\n2890 cargo_2035_3046053c\n2891 cargo_2035_30667047\n2892 cargo_2035_2429901f\n2893 cargo_2035_24430044\n2894 cargo_2035_24788b05\n2895 cargo_2035_25017837\n2896 cargo_2035_25616d3d\n2897 cargo_2035_26126f39\n2898 cargo_2035_26406ea6\n2899 cargo_2035_27177a3d\n2900 cargo_2035_27362be3\n2901 cargo_2035_2816107b\n2902 cargo_2035_29809ea4\n2903 cargo_2035_30632b33\n2904 cargo_2035_30979513\n2905 cargo_2035_243318e8\n2906 cargo_2035_2439600e\n2907 cargo_2035_244611c8\n2908 cargo_2035_246700d7\n2909 cargo_2035_24826203\n2910 cargo_2035_2502450d\n2911 cargo_2035_25744b77\n2912 cargo_2035_259435ad\n2913 cargo_2035_25983134\n2914 cargo_2035_26885262\n2915 cargo_2035_27537a81\n2916 cargo_2035_27716c6c\n2917 cargo_2035_291866db\n2918 cargo_2035_294511d6\n2919 cargo_2035_296690f0\n2920 cargo_2035_29816b56\n2921 cargo_2035_304255a8\n2922 cargo_2035_304751a1\n2923 cargo_2035_305057ea\n2924 cargo_2035_30670fc1\n2925 cargo_2035_30754541\n2926 cargo_2035_27424c6b\n2927 cargo_2035_27638692\n2928 cargo_2035_2736581e\n2929 cargo_2035_276426df\n2930 cargo_2035_28964cfc\n2931 cargo_2035_273681d8\n2932 cargo_2035_2765064f\n2933 cargo_2035_30783f4c\n2934 cargo_2035_2919150e\n2935 cargo_2035_307867bd\n2936 cargo_2035_27661966\n2937 cargo_2035_29197691\n2938 cargo_2035_2756351e\n2939 cargo_2035_2467357f\n2940 cargo_2035_262984ba\n2941 cargo_2035_263004db\n2942 cargo_2035_27390510\n2943 cargo_2035_275734cc\n2944 cargo_2035_29416264\n2945 cargo_2035_30510543\n2946 cargo_2035_31180d28\n2947 cargo_2035_2590832d\n2948 cargo_2035_25949f4a\n2949 cargo_2035_26309f47\n2950 cargo_2035_27583715\n2951 cargo_2035_2889644f\n2952 cargo_2035_2968597c\n2953 cargo_2035_30642e8d\n2954 cargo_2035_31184b29\n2955 cargo_2035_244035bc\n2956 cargo_2035_26621112\n2957 cargo_2035_276851a1\n2958 cargo_2035_28898249\n2959 cargo_2035_2968668a\n2960 cargo_2035_311854e6\n2961 cargo_2035_243358b3\n2962 cargo_2035_259095fa\n2963 cargo_2035_2631286e\n2964 cargo_2035_275856f2\n2965 cargo_2035_2968814c\n2966 cargo_2035_29750053\n2967 cargo_2035_30514eb7\n2968 cargo_2035_306447c1\n2969 cargo_2035_31186ea8\n2970 cargo_2035_24336d35\n2971 cargo_2035_29689907\n2972 cargo_2035_31187527\n2973 cargo_2035_24339294\n2974 cargo_2035_25912fcf\n2975 cargo_2035_275900e9\n2976 cargo_2035_296925fd\n2977 cargo_2035_29752b8a\n2978 cargo_2035_30776c88\n2979 cargo_2035_3119118e\n2980 cargo_2035_24340e90\n2981 cargo_2035_248031c8\n2982 cargo_2035_2595437b\n2983 cargo_2035_29693fd8\n2984 cargo_2035_3119237c\n2985 cargo_2035_24341472\n2986 cargo_2035_259956bf\n2987 cargo_2035_27592e9e\n2988 cargo_2035_28901011\n2989 cargo_2035_296949a1\n2990 cargo_2035_29753968\n2991 cargo_2035_30647e06\n2992 cargo_2035_243538de\n2993 cargo_2035_2943274e\n2994 cargo_2035_30499991\n2995 cargo_2035_2435809d\n2996 cargo_2035_26851535\n2997 cargo_2035_274020f7\n2998 cargo_2035_3043943d\n2999 cargo_2035_2436144d\n3000 cargo_2035_25494e4d\n3001 cargo_2035_25710a16\n3002 cargo_2035_259232cc\n3003 cargo_2035_2685480d\n3004 cargo_2035_27548e3e\n3005 cargo_2035_27612492\n3006 cargo_2035_28911839\n3007 cargo_2035_2976318f\n3008 cargo_2035_304426f1\n3009 cargo_2035_306576f5\n3010 cargo_2035_3079515f\n3011 cargo_2035_243623c9\n3012 cargo_2035_2504288d\n3013 cargo_2035_25711c52\n3014 cargo_2035_268555e0\n3015 cargo_2035_28969e6f\n3016 cargo_2035_30039d5a\n3017 cargo_2035_24365501\n3018 cargo_2035_244400eb\n3019 cargo_2035_2500969c\n3020 cargo_2035_2549786d\n3021 cargo_2035_26007d29\n3022 cargo_2035_2685924a\n3023 cargo_2035_27616be5\n3024 cargo_2035_2880824a\n3025 cargo_2035_2897078c\n3026 cargo_2035_29765f65\n3027 cargo_2035_30410dbd\n3028 cargo_2035_30445c4d\n3029 cargo_2035_30739a22\n3030 cargo_2035_2436666a\n3031 cargo_2035_24895628\n3032 cargo_2035_25583184\n3033 cargo_2035_25817c54\n3034 cargo_2035_2686085b\n3035 cargo_2035_24370c3b\n3036 cargo_2035_24443600\n3037 cargo_2035_25011181\n3038 cargo_2035_254994ba\n3039 cargo_2035_25968796\n3040 cargo_2035_259802dc\n3041 cargo_2035_26862c71\n3042 cargo_2035_271736b0\n3043 cargo_2035_2762171e\n3044 cargo_2035_27703053\n3045 cargo_2035_30412ea1\n3046 cargo_2035_30661d48\n3047 cargo_2035_30741521\n3048 cargo_2035_24371185\n3049 cargo_2035_2571805c\n3050 cargo_2035_25927761\n3051 cargo_2035_26863d75\n3052 cargo_2035_274065d1\n3053 cargo_2035_27704172\n3054 cargo_2035_30450009\n3055 cargo_2035_2437580d\n3056 cargo_2035_25723937\n3057 cargo_2035_2770686f\n3058 cargo_2035_289440af\n3059 cargo_2035_30043c3d\n3060 cargo_2035_30454d74\n3061 cargo_2035_2438071f\n3062 cargo_2035_25727e41\n3063 cargo_2035_26871f29\n3064 cargo_2035_277085d8\n3065 cargo_2035_30459683\n3066 cargo_2035_24391e74\n3067 cargo_2035_24417fcb\n3068 cargo_2035_24519a64\n3069 cargo_2035_24869511\n3070 cargo_2035_25620fa8\n3071 cargo_2035_25738e52\n3072 cargo_2035_259328a2\n3073 cargo_2035_26130914\n3074 cargo_2035_2688262f\n3075 cargo_2035_273311f1\n3076 cargo_2035_27413e55\n3077 cargo_2035_28926218\n3078 cargo_2035_29813085\n3079 cargo_2035_29814b2c\n3080 cargo_2035_30470e7f\n3081 cargo_2035_3075152b\n3082 cargo_2035_243938c2\n3083 cargo_2035_25740ed2\n3084 cargo_2035_25934959\n3085 cargo_2035_26883a06\n3086 cargo_2035_277156cc\n3087 cargo_2035_29027cd7\n3088 cargo_2035_304725ef\n3089 cargo_2035_24397c61\n3090 cargo_2035_24671903\n3091 cargo_2035_25936c93\n3092 cargo_2035_261335de\n3093 cargo_2035_26886ea0\n3094 cargo_2035_27415131\n3095 cargo_2035_277172c8\n3096 cargo_2035_29670e28\n3097 cargo_2035_304760cc\n3098 cargo_2035_27668ded\n3099 cargo_2035_2739773a\n3100 cargo_2035_27690ab3\n3101 cargo_2035_27712d33\n3102 cargo_2035_27419e0e\n3103 cargo_2035_276368a0\n3104 cargo_2035_27640d67\n3105 cargo_2035_27776cf7\n3106 cargo_2035_28960de6\n3107 cargo_2035_288779f1\n3108 cargo_2035_2441371f\n3109 cargo_2035_248380c0\n3110 cargo_2035_258998c6\n3111 cargo_2035_260123ec\n3112 cargo_2035_29663203\n3113 cargo_2035_31163f79\n3114 cargo_2035_24416295\n3115 cargo_2035_24841641\n3116 cargo_2035_26129e1a\n3117 cargo_2035_31165896\n3118 cargo_2035_24420b4e\n3119 cargo_2035_24845d58\n3120 cargo_2035_262935d5\n3121 cargo_2035_27162a72\n3122 cargo_2035_29339197\n3123 cargo_2035_294124db\n3124 cargo_2035_31170515\n3125 cargo_2035_27370eb6\n3126 cargo_2035_27651a0f\n3127 cargo_2035_289411a0\n3128 cargo_2035_2766785e\n3129 cargo_2035_296403b9\n3130 cargo_2035_2964583e\n3131 cargo_2035_28073c8d\n3132 cargo_2035_2809595e\n3133 cargo_2035_2812892d\n3134 cargo_2035_28065342\n3135 cargo_2035_28069dcc\n3136 cargo_2035_2807479d\n3137 cargo_2035_28078681\n3138 cargo_2035_25644d6f\n3139 cargo_2035_2618647d\n3140 cargo_2035_268207f7\n3141 cargo_2035_2773233d\n3142 cargo_2035_27915bd2\n3143 cargo_2035_28090be2\n3144 cargo_2035_29214bae\n3145 cargo_2035_24477419\n3146 cargo_2035_25404e85\n3147 cargo_2035_25671fe1\n3148 cargo_2035_2569701c\n3149 cargo_2035_27134dc7\n3150 cargo_2035_28754814\n3151 cargo_2035_29052155\n3152 cargo_2035_29909952\n3153 cargo_2035_30835473\n3154 cargo_2035_24143c1c\n3155 cargo_2035_25781e1e\n3156 cargo_2035_2792611c\n3157 cargo_2035_281127fd\n3158 cargo_2035_2862576f\n3159 cargo_2035_28992184\n3160 cargo_2035_29225316\n3161 cargo_2035_2931357b\n3162 cargo_2035_29782f1b\n3163 cargo_2035_29939451\n3164 cargo_2035_25759ce3\n3165 cargo_2035_257846b4\n3166 cargo_2035_26148d48\n3167 cargo_2035_265819d8\n3168 cargo_2035_26607807\n3169 cargo_2035_28629391\n3170 cargo_2035_29062cbb\n3171 cargo_2035_29942f58\n3172 cargo_2035_24467c13\n3173 cargo_2035_25685545\n3174 cargo_2035_25766383\n3175 cargo_2035_26155c19\n3176 cargo_2035_26588e8f\n3177 cargo_2035_2863581b\n3178 cargo_2035_30201c95\n3179 cargo_2035_24470784\n3180 cargo_2035_248628e8\n3181 cargo_2035_25068f83\n3182 cargo_2035_25688043\n3183 cargo_2035_257940f5\n3184 cargo_2035_26502a92\n3185 cargo_2035_26591afc\n3186 cargo_2035_27428e6d\n3187 cargo_2035_28138762\n3188 cargo_2035_29005d6e\n3189 cargo_2035_292382aa\n3190 cargo_2035_293275b6\n3191 cargo_2035_2979113e\n3192 cargo_2035_299784da\n3193 cargo_2035_302046ea\n3194 cargo_2035_30324068\n3195 cargo_2035_25434d71\n3196 cargo_2035_2637834f\n3197 cargo_2035_287793e7\n3198 cargo_2035_29727213\n3199 cargo_2035_2979556f\n3200 cargo_2035_29962710\n3201 cargo_2035_30822e94\n3202 cargo_2035_293664fd\n3203 cargo_2035_24885497\n3204 cargo_2035_2675144d\n3205 cargo_2035_28340ef5\n3206 cargo_2035_2884889b\n3207 cargo_2035_29868372\n3208 cargo_2035_24498d9d\n3209 cargo_2035_24913699\n3210 cargo_2035_26079865\n3211 cargo_2035_28310ad6\n3212 cargo_2035_28827a2f\n3213 cargo_2035_30980e29\n3214 cargo_2035_245009bf\n3215 cargo_2035_26436cce\n3216 cargo_2035_2753471b\n3217 cargo_2035_283124d4\n3218 cargo_2035_28356749\n3219 cargo_2035_28829543\n3220 cargo_2035_29838885\n3221 cargo_2035_3098264f\n3222 cargo_2035_24504749\n3223 cargo_2035_24924b2f\n3224 cargo_2035_2584468a\n3225 cargo_2035_26439237\n3226 cargo_2035_27192a4b\n3227 cargo_2035_272263ef\n3228 cargo_2035_283160d6\n3229 cargo_2035_288333ed\n3230 cargo_2035_24532325\n3231 cargo_2035_25112180\n3232 cargo_2035_24565818\n3233 cargo_2035_2514549b\n3234 cargo_2035_29101fc8\n3235 cargo_2035_30245bf4\n3236 cargo_2035_24576d01\n3237 cargo_2035_251563a4\n3238 cargo_2035_29112e93\n3239 cargo_2035_30256573\n3240 cargo_2035_24587d08\n3241 cargo_2035_2516764f\n3242 cargo_2035_29123af6\n3243 cargo_2035_30267a36\n3244 cargo_2035_24598596\n3245 cargo_2035_25178b01\n3246 cargo_2035_2913407d\n3247 cargo_2035_3027877d\n3248 cargo_2035_246093f8\n3249 cargo_2035_251899b1\n3250 cargo_2035_291450e6\n3251 cargo_2035_3028912f\n3252 cargo_2035_24620571\n3253 cargo_2035_25200753\n3254 cargo_2035_2915629f\n3255 cargo_2035_30300343\n3256 cargo_2035_24533e9d\n3257 cargo_2035_25113c59\n3258 cargo_2035_291676cc\n3259 cargo_2035_30311568\n3260 cargo_2035_24534089\n3261 cargo_2035_25114bf3\n3262 cargo_2035_29080d9a\n3263 cargo_2035_30224dfe\n3264 cargo_2035_24535535\n3265 cargo_2035_25115f55\n3266 cargo_2035_290812ba\n3267 cargo_2035_3022581b\n3268 cargo_2035_24536591\n3269 cargo_2035_29082fde\n3270 cargo_2035_30226817\n3271 cargo_2035_29642536\n3272 cargo_2035_2453789c\n3273 cargo_2035_251173df\n3274 cargo_2035_29083dbf\n3275 cargo_2035_30227230\n3276 cargo_2035_2453848f\n3277 cargo_2035_251187a2\n3278 cargo_2035_29084c59\n3279 cargo_2035_302288f9\n3280 cargo_2035_29644e84\n3281 cargo_2035_24539e5a\n3282 cargo_2035_2511982a\n3283 cargo_2035_29085fb1\n3284 cargo_2035_30229204\n3285 cargo_2035_2454042a\n3286 cargo_2035_2512069c\n3287 cargo_2035_29086eca\n3288 cargo_2035_30230137\n3289 cargo_2035_245417aa\n3290 cargo_2035_2512126b\n3291 cargo_2035_29087425\n3292 cargo_2035_30231f3f\n3293 cargo_2035_245426d1\n3294 cargo_2035_251229a9\n3295 cargo_2035_288561e6\n3296 cargo_2035_29088a8c\n3297 cargo_2035_24544d1b\n3298 cargo_2035_25124641\n3299 cargo_2035_290899d3\n3300 cargo_2035_2454550a\n3301 cargo_2035_286594e3\n3302 cargo_2035_30235517\n3303 cargo_2035_24547cba\n3304 cargo_2035_251275b8\n3305 cargo_2035_286611aa\n3306 cargo_2035_30237bcb\n3307 cargo_2035_24549aa1\n3308 cargo_2035_251309fa\n3309 cargo_2035_28251e90\n3310 cargo_2035_29096cf6\n3311 cargo_2035_24552e52\n3312 cargo_2035_251339c6\n3313 cargo_2035_26239af8\n3314 cargo_2035_2825490c\n3315 cargo_2035_288559cd\n3316 cargo_2035_24553cf4\n3317 cargo_2035_2513589e\n3318 cargo_2035_262407ce\n3319 cargo_2035_28255990\n3320 cargo_2035_24556d68\n3321 cargo_2035_251376fe\n3322 cargo_2035_26243d78\n3323 cargo_2035_282587c0\n3324 cargo_2035_29102c4e\n3325 cargo_2035_24558974\n3326 cargo_2035_251391b6\n3327 cargo_2035_262450d4\n3328 cargo_2035_28260acb\n3329 cargo_2035_291046ac\n3330 cargo_2035_30138cb4\n3331 cargo_2035_24559baf\n3332 cargo_2035_24560bf0\n3333 cargo_2035_24657e60\n3334 cargo_2035_251419c4\n3335 cargo_2035_25312985\n3336 cargo_2035_28489dfe\n3337 cargo_2035_29106837\n3338 cargo_2035_31027a06\n3339 cargo_2035_24561379\n3340 cargo_2035_24658c64\n3341 cargo_2035_29526fa2\n3342 cargo_2035_310389d2\n3343 cargo_2035_24562b52\n3344 cargo_2035_24951b0d\n3345 cargo_2035_25240f28\n3346 cargo_2035_253672f7\n3347 cargo_2035_27465d36\n3348 cargo_2035_27821b1c\n3349 cargo_2035_286771a1\n3350 cargo_2035_30253518\n3351 cargo_2035_245648fc\n3352 cargo_2035_25146e59\n3353 cargo_2035_25280ece\n3354 cargo_2035_28422587\n3355 cargo_2035_28533899\n3356 cargo_2035_2911095a\n3357 cargo_2035_30997d7e\n3358 cargo_2035_2813937d\n3359 cargo_2035_245664b5\n3360 cargo_2035_28433dc1\n3361 cargo_2035_29531c67\n3362 cargo_2035_3100879b\n3363 cargo_2035_2456752e\n3364 cargo_2035_251485d1\n3365 cargo_2035_25296d3c\n3366 cargo_2035_284343cb\n3367 cargo_2035_28547470\n3368 cargo_2035_2911340e\n3369 cargo_2035_31021bff\n3370 cargo_2035_28056c42\n3371 cargo_2035_24568664\n3372 cargo_2035_29533c68\n3373 cargo_2035_31022179\n3374 cargo_2035_24569c9b\n3375 cargo_2035_25150c7e\n3376 cargo_2035_25300f58\n3377 cargo_2035_2854906a\n3378 cargo_2035_291150e9\n3379 cargo_2035_31025385\n3380 cargo_2035_24570183\n3381 cargo_2035_2953570e\n3382 cargo_2035_31026d41\n3383 cargo_2035_28071c55\n3384 cargo_2035_245710da\n3385 cargo_2035_25152f02\n3386 cargo_2035_25305759\n3387 cargo_2035_28380511\n3388 cargo_2035_28491a13\n3389 cargo_2035_29117563\n3390 cargo_2035_31030cb2\n3391 cargo_2035_28072952\n3392 cargo_2035_29013df9\n3393 cargo_2035_2924636c\n3394 cargo_2035_30058c6c\n3395 cargo_2035_24572793\n3396 cargo_2035_28381a5c\n3397 cargo_2035_29537604\n3398 cargo_2035_31031585\n3399 cargo_2035_3103288d\n3400 cargo_2035_24573973\n3401 cargo_2035_2515430e\n3402 cargo_2035_253097c8\n3403 cargo_2035_284939f7\n3404 cargo_2035_291193e6\n3405 cargo_2035_31034f25\n3406 cargo_2035_24574eb5\n3407 cargo_2035_27793873\n3408 cargo_2035_295407c8\n3409 cargo_2035_280802ce\n3410 cargo_2035_29456fbe\n3411 cargo_2035_300636b1\n3412 cargo_2035_24575266\n3413 cargo_2035_25157a44\n3414 cargo_2035_25314e13\n3415 cargo_2035_28495b0c\n3416 cargo_2035_291213b0\n3417 cargo_2035_31039a47\n3418 cargo_2035_2457777f\n3419 cargo_2035_28385738\n3420 cargo_2035_2954235b\n3421 cargo_2035_310408c2\n3422 cargo_2035_24578ae0\n3423 cargo_2035_2515938f\n3424 cargo_2035_25318b67\n3425 cargo_2035_284978ac\n3426 cargo_2035_29124403\n3427 cargo_2035_31043083\n3428 cargo_2035_24579158\n3429 cargo_2035_28387b06\n3430 cargo_2035_295441ed\n3431 cargo_2035_31044b06\n3432 cargo_2035_24580b1b\n3433 cargo_2035_2463474f\n3434 cargo_2035_251619d9\n3435 cargo_2035_25322deb\n3436 cargo_2035_28388d87\n3437 cargo_2035_28499ed2\n3438 cargo_2035_29125452\n3439 cargo_2035_31047956\n3440 cargo_2035_24581970\n3441 cargo_2035_28390e99\n3442 cargo_2035_29546952\n3443 cargo_2035_306073eb\n3444 cargo_2035_31048be2\n3445 cargo_2035_310508e0\n3446 cargo_2035_24582d92\n3447 cargo_2035_24636403\n3448 cargo_2035_25163b6b\n3449 cargo_2035_253279d2\n3450 cargo_2035_285026b1\n3451 cargo_2035_291279ed\n3452 cargo_2035_3105225e\n3453 cargo_2035_24583736\n3454 cargo_2035_29548f48\n3455 cargo_2035_30130cc1\n3456 cargo_2035_31053df7\n3457 cargo_2035_24584c4b\n3458 cargo_2035_24639048\n3459 cargo_2035_2476692f\n3460 cargo_2035_25165610\n3461 cargo_2035_25331137\n3462 cargo_2035_28393dad\n3463 cargo_2035_2850493c\n3464 cargo_2035_29129b7d\n3465 cargo_2035_31056a34\n3466 cargo_2035_24585d02\n3467 cargo_2035_24767b97\n3468 cargo_2035_28394484\n3469 cargo_2035_29551e3b\n3470 cargo_2035_30611e58\n3471 cargo_2035_31057dce\n3472 cargo_2035_24586366\n3473 cargo_2035_24641f89\n3474 cargo_2035_251684f8\n3475 cargo_2035_253367e3\n3476 cargo_2035_28395ddc\n3477 cargo_2035_28506dd0\n3478 cargo_2035_29131538\n3479 cargo_2035_24588b67\n3480 cargo_2035_28396354\n3481 cargo_2035_295530bf\n3482 cargo_2035_30613613\n3483 cargo_2035_31062215\n3484 cargo_2035_245891bd\n3485 cargo_2035_246430d5\n3486 cargo_2035_25170e0d\n3487 cargo_2035_253405d8\n3488 cargo_2035_28508390\n3489 cargo_2035_291338ca\n3490 cargo_2035_309317ae\n3491 cargo_2035_31065cce\n3492 cargo_2035_24590b3e\n3493 cargo_2035_28398d0d\n3494 cargo_2035_31066a7c\n3495 cargo_2035_24591b8d\n3496 cargo_2035_24645417\n3497 cargo_2035_247721f4\n3498 cargo_2035_251720cb\n3499 cargo_2035_25344657\n3500 cargo_2035_28399239\n3501 cargo_2035_2851042d\n3502 cargo_2035_291364df\n3503 cargo_2035_309359c8\n3504 cargo_2035_310699b3\n3505 cargo_2035_245923da\n3506 cargo_2035_24774936\n3507 cargo_2035_29556a00\n3508 cargo_2035_31070bbb\n3509 cargo_2035_31072d52\n3510 cargo_2035_2619899c\n3511 cargo_2035_281159ae\n3512 cargo_2035_29314166\n3513 cargo_2035_2947357d\n3514 cargo_2035_24593a0e\n3515 cargo_2035_246470f6\n3516 cargo_2035_2517482e\n3517 cargo_2035_253493b5\n3518 cargo_2035_28513880\n3519 cargo_2035_291388e3\n3520 cargo_2035_29248646\n3521 cargo_2035_310742de\n3522 cargo_2035_24594dc3\n3523 cargo_2035_29249bf1\n3524 cargo_2035_306209aa\n3525 cargo_2035_31075478\n3526 cargo_2035_24595b88\n3527 cargo_2035_24650f4f\n3528 cargo_2035_251767f5\n3529 cargo_2035_25353f2b\n3530 cargo_2035_26250689\n3531 cargo_2035_2851579b\n3532 cargo_2035_29140f98\n3533 cargo_2035_29251730\n3534 cargo_2035_31078970\n3535 cargo_2035_25536380\n3536 cargo_2035_26202a6f\n3537 cargo_2035_26551be4\n3538 cargo_2035_26928cef\n3539 cargo_2035_2796180b\n3540 cargo_2035_28122897\n3541 cargo_2035_24596fc0\n3542 cargo_2035_28405eb1\n3543 cargo_2035_31079c7f\n3544 cargo_2035_2459771f\n3545 cargo_2035_2465232e\n3546 cargo_2035_25179673\n3547 cargo_2035_25358b93\n3548 cargo_2035_26252317\n3549 cargo_2035_28517b21\n3550 cargo_2035_29142cc8\n3551 cargo_2035_3108323d\n3552 cargo_2035_24599c63\n3553 cargo_2035_26808424\n3554 cargo_2035_28407ba4\n3555 cargo_2035_29256ec8\n3556 cargo_2035_306249e8\n3557 cargo_2035_310846aa\n3558 cargo_2035_24600e8d\n3559 cargo_2035_24654e34\n3560 cargo_2035_2536256f\n3561 cargo_2035_2622180d\n3562 cargo_2035_26809373\n3563 cargo_2035_28408fd3\n3564 cargo_2035_28519919\n3565 cargo_2035_29144fb6\n3566 cargo_2035_29259952\n3567 cargo_2035_3108726c\n3568 cargo_2035_2551555d\n3569 cargo_2035_25553a7e\n3570 cargo_2035_262066f7\n3571 cargo_2035_26898ada\n3572 cargo_2035_269329eb\n3573 cargo_2035_2813198d\n3574 cargo_2035_287708d6\n3575 cargo_2035_29481145\n3576 cargo_2035_308421f2\n3577 cargo_2035_2460180d\n3578 cargo_2035_267800ea\n3579 cargo_2035_28409049\n3580 cargo_2035_29260f62\n3581 cargo_2035_30885f28\n3582 cargo_2035_31088084\n3583 cargo_2035_2506569a\n3584 cargo_2035_26499a66\n3585 cargo_2035_28133c56\n3586 cargo_2035_29323224\n3587 cargo_2035_29482af8\n3588 cargo_2035_2997575e\n3589 cargo_2035_250666c1\n3590 cargo_2035_2551704b\n3591 cargo_2035_26900375\n3592 cargo_2035_26934195\n3593 cargo_2035_279654cc\n3594 cargo_2035_281357e4\n3595 cargo_2035_287720a7\n3596 cargo_2035_29483fb5\n3597 cargo_2035_308448a8\n3598 cargo_2035_246033c6\n3599 cargo_2035_26802e89\n3600 cargo_2035_28412984\n3601 cargo_2035_30712fed\n3602 cargo_2035_30918c5c\n3603 cargo_2035_310926f0\n3604 cargo_2035_310944c5\n3605 cargo_2035_2460534f\n3606 cargo_2035_26811552\n3607 cargo_2035_28299145\n3608 cargo_2035_28413b2b\n3609 cargo_2035_2926731d\n3610 cargo_2035_307150a5\n3611 cargo_2035_3094056e\n3612 cargo_2035_310975e4\n3613 cargo_2035_24607886\n3614 cargo_2035_2681345f\n3615 cargo_2035_28272702\n3616 cargo_2035_28415415\n3617 cargo_2035_29272144\n3618 cargo_2035_30952cdb\n3619 cargo_2035_31101a05\n3620 cargo_2035_26199927\n3621 cargo_2035_2795952c\n3622 cargo_2035_28148c12\n3623 cargo_2035_28628911\n3624 cargo_2035_294635f2\n3625 cargo_2035_29784f94\n3626 cargo_2035_308516a2\n3627 cargo_2035_24610616\n3628 cargo_2035_26815901\n3629 cargo_2035_282765da\n3630 cargo_2035_28417d7e\n3631 cargo_2035_2927637f\n3632 cargo_2035_308861d0\n3633 cargo_2035_2504813e\n3634 cargo_2035_2656385f\n3635 cargo_2035_271181c0\n3636 cargo_2035_27432c75\n3637 cargo_2035_281529b8\n3638 cargo_2035_29026b6b\n3639 cargo_2035_29474995\n3640 cargo_2035_29793543\n3641 cargo_2035_303311f0\n3642 cargo_2035_24612a55\n3643 cargo_2035_26782b0f\n3644 cargo_2035_28281c90\n3645 cargo_2035_30124e81\n3646 cargo_2035_308881d9\n3647 cargo_2035_24614314\n3648 cargo_2035_24992d21\n3649 cargo_2035_26784d55\n3650 cargo_2035_28285d0d\n3651 cargo_2035_28420500\n3652 cargo_2035_29283dd0\n3653 cargo_2035_3012623b\n3654 cargo_2035_30727de6\n3655 cargo_2035_30890ee1\n3656 cargo_2035_31113cd7\n3657 cargo_2035_27769102\n3658 cargo_2035_2763705c\n3659 cargo_2035_3079182e\n3660 cargo_2035_2467862b\n3661 cargo_2035_26307516\n3662 cargo_2035_26308d2b\n3663 cargo_2035_26956b11\n3664 cargo_2035_27582038\n3665 cargo_2035_281749ae\n3666 cargo_2035_29344fc5\n3667 cargo_2035_29420e39\n3668 cargo_2035_243885e7\n3669 cargo_2035_24667c13\n3670 cargo_2035_257360c1\n3671 cargo_2035_25921579\n3672 cargo_2035_2687977f\n3673 cargo_2035_27713e43\n3674 cargo_2035_28948cca\n3675 cargo_2035_26982160\n3676 cargo_2035_2699301a\n3677 cargo_2035_27038e62\n3678 cargo_2035_27057aaf\n3679 cargo_2035_269834c6\n3680 cargo_2035_305936cf\n3681 cargo_2035_26985dda\n3682 cargo_2035_30594fc6\n3683 cargo_2035_26673478\n3684 cargo_2035_269906db\n3685 cargo_2035_26992d5c\n3686 cargo_2035_26995df5\n3687 cargo_2035_26999a9c\n3688 cargo_2035_27000096\n3689 cargo_2035_30549dae\n3690 cargo_2035_2700842e\n3691 cargo_2035_305552bd\n3692 cargo_2035_279881cc\n3693 cargo_2035_26706236\n3694 cargo_2035_280027f9\n3695 cargo_2035_28212cc3\n3696 cargo_2035_28571890\n3697 cargo_2035_29617162\n3698 cargo_2035_30564fc0\n3699 cargo_2035_309159a7\n3700 cargo_2035_27026ccc\n3701 cargo_2035_30917ed4\n3702 cargo_2035_26669a27\n3703 cargo_2035_270294d8\n3704 cargo_2035_309251ce\n3705 cargo_2035_270324c8\n3706 cargo_2035_24703cd9\n3707 cargo_2035_26048d66\n3708 cargo_2035_26723d81\n3709 cargo_2035_2858548c\n3710 cargo_2035_24714139\n3711 cargo_2035_24770ef8\n3712 cargo_2035_2651961f\n3713 cargo_2035_28019053\n3714 cargo_2035_28586159\n3715 cargo_2035_24725994\n3716 cargo_2035_28022bfa\n3717 cargo_2035_2474683e\n3718 cargo_2035_261140fa\n3719 cargo_2035_267304f9\n3720 cargo_2035_27208c94\n3721 cargo_2035_280248e7\n3722 cargo_2035_28025623\n3723 cargo_2035_30570d47\n3724 cargo_2035_30702ff0\n3725 cargo_2035_30936853\n3726 cargo_2035_24747a78\n3727 cargo_2035_26547da1\n3728 cargo_2035_2474845c\n3729 cargo_2035_260499e6\n3730 cargo_2035_26733e36\n3731 cargo_2035_28027463\n3732 cargo_2035_285930ac\n3733 cargo_2035_30703c19\n3734 cargo_2035_24749505\n3735 cargo_2035_25855618\n3736 cargo_2035_26050585\n3737 cargo_2035_266487cd\n3738 cargo_2035_267341bb\n3739 cargo_2035_272100d7\n3740 cargo_2035_28262978\n3741 cargo_2035_30704d88\n3742 cargo_2035_2475032b\n3743 cargo_2035_25857b33\n3744 cargo_2035_26650415\n3745 cargo_2035_2703667d\n3746 cargo_2035_247048ed\n3747 cargo_2035_26053ca8\n3748 cargo_2035_26651916\n3749 cargo_2035_267387ea\n3750 cargo_2035_28032840\n3751 cargo_2035_28596198\n3752 cargo_2035_30621ebd\n3753 cargo_2035_30705138\n3754 cargo_2035_309426ac\n3755 cargo_2035_247064df\n3756 cargo_2035_25861071\n3757 cargo_2035_30945438\n3758 cargo_2035_24707a15\n3759 cargo_2035_25862dda\n3760 cargo_2035_25863643\n3761 cargo_2035_2655231c\n3762 cargo_2035_27039903\n3763 cargo_2035_30946e1b\n3764 cargo_2035_24709b09\n3765 cargo_2035_260613e8\n3766 cargo_2035_266612a3\n3767 cargo_2035_267458ff\n3768 cargo_2035_27215887\n3769 cargo_2035_28600c4b\n3770 cargo_2035_30575b08\n3771 cargo_2035_24712cac\n3772 cargo_2035_260664ae\n3773 cargo_2035_26764fa8\n3774 cargo_2035_27196c40\n3775 cargo_2035_278615ec\n3776 cargo_2035_28192da8\n3777 cargo_2035_306771d1\n3778 cargo_2035_31119aa3\n3779 cargo_2035_24715bf7\n3780 cargo_2035_25872639\n3781 cargo_2035_26704153\n3782 cargo_2035_282679c4\n3783 cargo_2035_247160ea\n3784 cargo_2035_26525f18\n3785 cargo_2035_27043007\n3786 cargo_2035_272188cc\n3787 cargo_2035_29599b73\n3788 cargo_2035_24717b08\n3789 cargo_2035_25874fb7\n3790 cargo_2035_260731b9\n3791 cargo_2035_26526c23\n3792 cargo_2035_27869087\n3793 cargo_2035_281950d9\n3794 cargo_2035_24718653\n3795 cargo_2035_260745ad\n3796 cargo_2035_3058093b\n3797 cargo_2035_247199e7\n3798 cargo_2035_2673793f\n3799 cargo_2035_27045b8b\n3800 cargo_2035_2722068b\n3801 cargo_2035_24720d71\n3802 cargo_2035_25879cb6\n3803 cargo_2035_26371891\n3804 cargo_2035_296028b0\n3805 cargo_2035_30581013\n3806 cargo_2035_24721efa\n3807 cargo_2035_26078732\n3808 cargo_2035_27222d62\n3809 cargo_2035_2823725b\n3810 cargo_2035_24723498\n3811 cargo_2035_2588356d\n3812 cargo_2035_29605e39\n3813 cargo_2035_247286ec\n3814 cargo_2035_26088002\n3815 cargo_2035_267790e5\n3816 cargo_2035_27852e31\n3817 cargo_2035_28472c10\n3818 cargo_2035_30688284\n3819 cargo_2035_31130f80\n3820 cargo_2035_24729dff\n3821 cargo_2035_258893cc\n3822 cargo_2035_2609033b\n3823 cargo_2035_26535180\n3824 cargo_2035_267529ba\n3825 cargo_2035_278534d4\n3826 cargo_2035_282047bd\n3827 cargo_2035_284739fe\n3828 cargo_2035_284742cd\n3829 cargo_2035_24730213\n3830 cargo_2035_266869df\n3831 cargo_2035_27053527\n3832 cargo_2035_28554029\n3833 cargo_2035_24731a1b\n3834 cargo_2035_25891a58\n3835 cargo_2035_2653673e\n3836 cargo_2035_26680697\n3837 cargo_2035_26687f9d\n3838 cargo_2035_26755d3e\n3839 cargo_2035_270544e2\n3840 cargo_2035_28555cd1\n3841 cargo_2035_29610b05\n3842 cargo_2035_305775cb\n3843 cargo_2035_25125f88\n3844 cargo_2035_288580d3\n3845 cargo_2035_2909135a\n3846 cargo_2035_28860e20\n3847 cargo_2035_2909369c\n3848 cargo_2035_25128e01\n3849 cargo_2035_29094c98\n3850 cargo_2035_25129f83\n3851 cargo_2035_28250510\n3852 cargo_2035_2886270f\n3853 cargo_2035_29095c7f\n3854 cargo_2035_25131c86\n3855 cargo_2035_282526cf\n3856 cargo_2035_28853a42\n3857 cargo_2035_29097b62\n3858 cargo_2035_24551570\n3859 cargo_2035_25132413\n3860 cargo_2035_262387c9\n3861 cargo_2035_28253551\n3862 cargo_2035_29098b12\n3863 cargo_2035_2624272c\n3864 cargo_2035_28257492\n3865 cargo_2035_251387eb\n3866 cargo_2035_2624482b\n3867 cargo_2035_28259ec2\n3868 cargo_2035_29523cae\n3869 cargo_2035_24655751\n3870 cargo_2035_251408e6\n3871 cargo_2035_252685d8\n3872 cargo_2035_26246ba6\n3873 cargo_2035_28261173\n3874 cargo_2035_26715230\n3875 cargo_2035_27982bab\n3876 cargo_2035_27983c11\n3877 cargo_2035_26520996\n3878 cargo_2035_2670544a\n3879 cargo_2035_28000476\n3880 cargo_2035_280014d5\n3881 cargo_2035_28211269\n3882 cargo_2035_28570aab\n3883 cargo_2035_296165e2\n3884 cargo_2035_26527462\n3885 cargo_2035_27024e87\n3886 cargo_2035_309133cc\n3887 cargo_2035_26709fdb\n3888 cargo_2035_280044d9\n3889 cargo_2035_2800569c\n3890 cargo_2035_282149f0\n3891 cargo_2035_28215b44\n3892 cargo_2035_28575ac9\n3893 cargo_2035_29620fcc\n3894 cargo_2035_2476579c\n3895 cargo_2035_26665296\n3896 cargo_2035_24768c2b\n3897 cargo_2035_26534830\n3898 cargo_2035_27031f7f\n3899 cargo_2035_280160af\n3900 cargo_2035_28226a35\n3901 cargo_2035_28583dac\n3902 cargo_2035_30926af9\n3903 cargo_2035_24771740\n3904 cargo_2035_260702ef\n3905 cargo_2035_267258a3\n3906 cargo_2035_28021b14\n3907 cargo_2035_2858710d\n3908 cargo_2035_305698a2\n3909 cargo_2035_30684b3c\n3910 cargo_2035_24775c13\n3911 cargo_2035_258987df\n3912 cargo_2035_26548206\n3913 cargo_2035_26647272\n3914 cargo_2035_270350bb\n3915 cargo_2035_30938db5\n3916 cargo_2035_247761a7\n3917 cargo_2035_25856dd4\n3918 cargo_2035_26051a77\n3919 cargo_2035_26549b15\n3920 cargo_2035_267359f4\n3921 cargo_2035_280288df\n3922 cargo_2035_28594ab5\n3923 cargo_2035_309397d3\n3924 cargo_2035_2478425c\n3925 cargo_2035_2498656c\n3926 cargo_2035_252452b7\n3927 cargo_2035_25376780\n3928 cargo_2035_275099e2\n3929 cargo_2035_27826228\n3930 cargo_2035_287212cf\n3931 cargo_2035_29271b24\n3932 cargo_2035_301764d8\n3933 cargo_2035_30297b64\n3934 cargo_2035_24787aaf\n3935 cargo_2035_24990028\n3936 cargo_2035_25249085\n3937 cargo_2035_25385a5e\n3938 cargo_2035_27513257\n3939 cargo_2035_2783053a\n3940 cargo_2035_28239aef\n3941 cargo_2035_287264b5\n3942 cargo_2035_2927965e\n3943 cargo_2035_30181bb3\n3944 cargo_2035_3030231d\n3945 cargo_2035_30724c68\n3946 cargo_2035_31109fa8\n3947 cargo_2035_2415421a\n3948 cargo_2035_24752d8d\n3949 cargo_2035_28727d5d\n3950 cargo_2035_30182a44\n3951 cargo_2035_303035eb\n3952 cargo_2035_305977f2\n3953 cargo_2035_307253e8\n3954 cargo_2035_2475323c\n3955 cargo_2035_2519433c\n3956 cargo_2035_25252198\n3957 cargo_2035_25270e83\n3958 cargo_2035_27515fae\n3959 cargo_2035_2783309b\n3960 cargo_2035_28240683\n3961 cargo_2035_28728bd7\n3962 cargo_2035_29282142\n3963 cargo_2035_30183ae6\n3964 cargo_2035_30304a6c\n3965 cargo_2035_3111290e\n3966 cargo_2035_28658af2\n3967 cargo_2035_3018810c\n3968 cargo_2035_27451b0f\n3969 cargo_2035_26994d63\n3970 cargo_2035_295617a2\n3971 cargo_2035_246562f8\n3972 cargo_2035_25207162\n3973 cargo_2035_27461954\n3974 cargo_2035_27788ead\n3975 cargo_2035_246609f6\n3976 cargo_2035_25334b9e\n3977 cargo_2035_28389049\n3978 cargo_2035_285009dc\n3979 cargo_2035_31049f79\n3980 cargo_2035_25143476\n3981 cargo_2035_25356cb8\n3982 cargo_2035_2840031c\n3983 cargo_2035_285118ad\n3984 cargo_2035_291085b0\n3985 cargo_2035_3107191d\n3986 cargo_2035_25298b39\n3987 cargo_2035_28435477\n3988 cargo_2035_2854828d\n3989 cargo_2035_310232ba\n3990 cargo_2035_28066b69\n3991 cargo_2035_2807091b\n3992 cargo_2035_251537fc\n3993 cargo_2035_25307872\n3994 cargo_2035_28492f55\n3995 cargo_2035_28075556\n3996 cargo_2035_25155243\n3997 cargo_2035_2531154d\n3998 cargo_2035_2838330c\n3999 cargo_2035_28494989\n4000 cargo_2035_31036a94\n4001 cargo_2035_28079623\n4002 cargo_2035_300629c9\n4003 cargo_2035_251585b7\n4004 cargo_2035_2531697a\n4005 cargo_2035_28496ea6\n4006 cargo_2035_310413a4\n4007 cargo_2035_2463308e\n4008 cargo_2035_25160cbd\n4009 cargo_2035_25320ede\n4010 cargo_2035_28498dcc\n4011 cargo_2035_31045175\n4012 cargo_2035_2463514c\n4013 cargo_2035_25162c77\n4014 cargo_2035_25325fbb\n4015 cargo_2035_28501030\n4016 cargo_2035_29126103\n4017 cargo_2035_2773423f\n4018 cargo_2035_28097bde\n4019 cargo_2035_25648081\n4020 cargo_2035_26509f1a\n4021 cargo_2035_28099adf\n4022 cargo_2035_28619cab\n4023 cargo_2035_289869a1\n4024 cargo_2035_29219965\n4025 cargo_2035_29307aa3\n4026 cargo_2035_30959c64\n4027 cargo_2035_2464089a\n4028 cargo_2035_251667de\n4029 cargo_2035_25333fed\n4030 cargo_2035_26796f15\n4031 cargo_2035_28505516\n4032 cargo_2035_291309f9\n4033 cargo_2035_30134eb2\n4034 cargo_2035_31058d76\n4035 cargo_2035_25407174\n4036 cargo_2035_25674e25\n4037 cargo_2035_25700195\n4038 cargo_2035_27136743\n4039 cargo_2035_27923e81\n4040 cargo_2035_28989e68\n4041 cargo_2035_29055cb1\n4042 cargo_2035_292220eb\n4043 cargo_2035_24642cab\n4044 cargo_2035_251691ce\n4045 cargo_2035_25338da8\n4046 cargo_2035_28507fcb\n4047 cargo_2035_29132922\n4048 cargo_2035_30928e53\n4049 cargo_2035_31063fbe\n4050 cargo_2035_2464627f\n4051 cargo_2035_25173ebe\n4052 cargo_2035_25347cd5\n4053 cargo_2035_28401e24\n4054 cargo_2035_28512999\n4055 cargo_2035_291379e0\n4056 cargo_2035_24649458\n4057 cargo_2035_25175d52\n4058 cargo_2035_25351d51\n4059 cargo_2035_28403b14\n4060 cargo_2035_2851434e\n4061 cargo_2035_29139f57\n4062 cargo_2035_2955871d\n4063 cargo_2035_31076def\n4064 cargo_2035_24653e4e\n4065 cargo_2035_25180a30\n4066 cargo_2035_25360915\n4067 cargo_2035_26220299\n4068 cargo_2035_285188d6\n4069 cargo_2035_291430ad\n4070 cargo_2035_29563229\n4071 cargo_2035_30948989\n4072 cargo_2035_31085392\n4073 cargo_2035_271481f4\n4074 cargo_2035_28141e9c\n4075 cargo_2035_27669b28\n4076 cargo_2035_27565c33\n4077 cargo_2035_24096e9c\n4078 cargo_2035_24279b99\n4079 cargo_2035_24819223\n4080 cargo_2035_26258fa4\n4081 cargo_2035_264850d0\n4082 cargo_2035_2728187d\n4083 cargo_2035_27886456\n4084 cargo_2035_294980f2\n4085 cargo_2035_27701110\n4086 cargo_2035_27641289\n4087 cargo_2035_27778be3\n4088 cargo_2035_26630594\n4089 cargo_2035_2754616c\n4090 cargo_2035_27695e0a\n4091 cargo_2035_29687240\n4092 cargo_2035_30523c2b\n4093 cargo_2035_263393bf\n4094 cargo_2035_2717130b\n4095 cargo_2035_27699b7e\n4096 cargo_2035_29436a50\n4097 cargo_2035_297006dc\n4098 cargo_2035_30527791\n4099 cargo_2035_24830604\n4100 cargo_2035_2576374a\n4101 cargo_2035_259663b0\n4102 cargo_2035_2611836a\n4103 cargo_2035_26344dec\n4104 cargo_2035_29172a4f\n4105 cargo_2035_29438ec0\n4106 cargo_2035_30529e66\n4107 cargo_2035_31156e4e\n4108 cargo_2035_248345bd\n4109 cargo_2035_25687f46\n4110 cargo_2035_25970a11\n4111 cargo_2035_260026f9\n4112 cargo_2035_261229a8\n4113 cargo_2035_2917602d\n4114 cargo_2035_294428b8\n4115 cargo_2035_296596b8\n4116 cargo_2035_31160a12\n4117 cargo_2035_29646776\n4118 cargo_2035_29649b9b\n4119 cargo_2035_29650857\n4120 cargo_2035_248615d0\n4121 cargo_2035_25768b4f\n4122 cargo_2035_25793fbf\n4123 cargo_2035_26157095\n4124 cargo_2035_2655634e\n4125 cargo_2035_26590374\n4126 cargo_2035_28637399\n4127 cargo_2035_2906937e\n4128 cargo_2035_30203441\n4129 cargo_2035_3002241c\n4130 cargo_2035_300260a9\n4131 cargo_2035_283303be\n4132 cargo_2035_29398e31\n4133 cargo_2035_29858978\n4134 cargo_2035_283356bc\n4135 cargo_2035_294020eb\n4136 cargo_2035_29863dcd\n4137 cargo_2035_249049aa\n4138 cargo_2035_250883d0\n4139 cargo_2035_28437317\n4140 cargo_2035_30385e81\n4141 cargo_2035_24926945\n4142 cargo_2035_24950c2b\n4143 cargo_2035_27096cbb\n4144 cargo_2035_27167a4e\n4145 cargo_2035_24886540\n4146 cargo_2035_30031b94\n4147 cargo_2035_248887ca\n4148 cargo_2035_25095618\n4149 cargo_2035_26479f36\n4150 cargo_2035_27103e73\n4151 cargo_2035_2846824e\n4152 cargo_2035_303924ee\n4153 cargo_2035_24890253\n4154 cargo_2035_258127bd\n4155 cargo_2035_2489229e\n4156 cargo_2035_25097cf5\n4157 cargo_2035_25582e91\n4158 cargo_2035_258149f2\n4159 cargo_2035_26341120\n4160 cargo_2035_268960c9\n4161 cargo_2035_27105f51\n4162 cargo_2035_27250292\n4163 cargo_2035_27272043\n4164 cargo_2035_284700fc\n4165 cargo_2035_30394d9b\n4166 cargo_2035_30866514\n4167 cargo_2035_248994de\n4168 cargo_2035_258217f3\n4169 cargo_2035_24901e53\n4170 cargo_2035_251011a8\n4171 cargo_2035_255858c8\n4172 cargo_2035_2582374f\n4173 cargo_2035_27067848\n4174 cargo_2035_27254eea\n4175 cargo_2035_284414b9\n4176 cargo_2035_30398aa7\n4177 cargo_2035_30870365\n4178 cargo_2035_24903504\n4179 cargo_2035_258259b1\n4180 cargo_2035_26403821\n4181 cargo_2035_26866b08\n4182 cargo_2035_293604e6\n4183 cargo_2035_249064db\n4184 cargo_2035_25104023\n4185 cargo_2035_25828070\n4186 cargo_2035_2602221a\n4187 cargo_2035_2706971d\n4188 cargo_2035_27257191\n4189 cargo_2035_272830a1\n4190 cargo_2035_284437b9\n4191 cargo_2035_304011fc\n4192 cargo_2035_30872552\n4193 cargo_2035_24908db7\n4194 cargo_2035_25830628\n4195 cargo_2035_24910fe6\n4196 cargo_2035_25589ca9\n4197 cargo_2035_26024f61\n4198 cargo_2035_27259fbe\n4199 cargo_2035_27288e8b\n4200 cargo_2035_284457c7\n4201 cargo_2035_29362122\n4202 cargo_2035_304038a7\n4203 cargo_2035_30874d9f\n4204 cargo_2035_249126e4\n4205 cargo_2035_257323b3\n4206 cargo_2035_258334f4\n4207 cargo_2035_260256c6\n4208 cargo_2035_27234101\n4209 cargo_2035_249144c2\n4210 cargo_2035_25835f67\n4211 cargo_2035_26027a5e\n4212 cargo_2035_2707320e\n4213 cargo_2035_27256a4d\n4214 cargo_2035_272927be\n4215 cargo_2035_28447775\n4216 cargo_2035_2491771b\n4217 cargo_2035_2583619d\n4218 cargo_2035_27260cb3\n4219 cargo_2035_3046743a\n4220 cargo_2035_23980ddb\n4221 cargo_2035_24918446\n4222 cargo_2035_254639fb\n4223 cargo_2035_2583810a\n4224 cargo_2035_260288d3\n4225 cargo_2035_26437bd1\n4226 cargo_2035_26881b70\n4227 cargo_2035_27261600\n4228 cargo_2035_283134ee\n4229 cargo_2035_28830df4\n4230 cargo_2035_300012b7\n4231 cargo_2035_3014726c\n4232 cargo_2035_249211b8\n4233 cargo_2035_25841300\n4234 cargo_2035_272641b7\n4235 cargo_2035_24925592\n4236 cargo_2035_25845b7f\n4237 cargo_2035_260321ed\n4238 cargo_2035_27079fe8\n4239 cargo_2035_27227813\n4240 cargo_2035_3054745a\n4241 cargo_2035_26984023\n4242 cargo_2035_26672e78\n4243 cargo_2035_2698869f\n4244 cargo_2035_27006851\n4245 cargo_2035_25229c36\n4246 cargo_2035_27464d5a\n4247 cargo_2035_27810437\n4248 cargo_2035_29527a36\n4249 cargo_2035_31060614\n4250 cargo_2035_24962b83\n4251 cargo_2035_28678dd7\n4252 cargo_2035_29109a9d\n4253 cargo_2035_30254ce1\n4254 cargo_2035_2497357e\n4255 cargo_2035_252624a2\n4256 cargo_2035_25291b11\n4257 cargo_2035_27467bc3\n4258 cargo_2035_27843d26\n4259 cargo_2035_286791f6\n4260 cargo_2035_3025500c\n4261 cargo_2035_249846ef\n4262 cargo_2035_28681870\n4263 cargo_2035_2911155d\n4264 cargo_2035_30257de4\n4265 cargo_2035_249954f8\n4266 cargo_2035_2526694d\n4267 cargo_2035_252979a2\n4268 cargo_2035_27469a17\n4269 cargo_2035_278479e2\n4270 cargo_2035_28682e4c\n4271 cargo_2035_30258620\n4272 cargo_2035_25004e40\n4273 cargo_2035_251492bf\n4274 cargo_2035_2868367c\n4275 cargo_2035_291143d7\n4276 cargo_2035_3025997f\n4277 cargo_2035_28067de6\n4278 cargo_2035_2500531d\n4279 cargo_2035_25208d8a\n4280 cargo_2035_253027d7\n4281 cargo_2035_27471938\n4282 cargo_2035_2778947a\n4283 cargo_2035_28684dc0\n4284 cargo_2035_30260350\n4285 cargo_2035_25006809\n4286 cargo_2035_286857c7\n4287 cargo_2035_29116502\n4288 cargo_2035_30261f0b\n4289 cargo_2035_2495237b\n4290 cargo_2035_28687d59\n4291 cargo_2035_29118079\n4292 cargo_2035_30263e22\n4293 cargo_2035_249545bd\n4294 cargo_2035_28689082\n4295 cargo_2035_29120663\n4296 cargo_2035_30265b44\n4297 cargo_2035_2495590b\n4298 cargo_2035_25214b24\n4299 cargo_2035_253157f8\n4300 cargo_2035_2747885b\n4301 cargo_2035_277951a7\n4302 cargo_2035_28690714\n4303 cargo_2035_30266ac0\n4304 cargo_2035_24956173\n4305 cargo_2035_28692fdd\n4306 cargo_2035_29122bbe\n4307 cargo_2035_3026839c\n4308 cargo_2035_249586eb\n4309 cargo_2035_28694036\n4310 cargo_2035_3027079e\n4311 cargo_2035_30912130\n4312 cargo_2035_249600fa\n4313 cargo_2035_28696b50\n4314 cargo_2035_302722fc\n4315 cargo_2035_30916888\n4316 cargo_2035_2496112e\n4317 cargo_2035_25221e81\n4318 cargo_2035_25328f66\n4319 cargo_2035_2748502e\n4320 cargo_2035_27802e52\n4321 cargo_2035_28697d72\n4322 cargo_2035_302733ff\n4323 cargo_2035_24963dcb\n4324 cargo_2035_28698f37\n4325 cargo_2035_3027437a\n4326 cargo_2035_24965df2\n4327 cargo_2035_28700e86\n4328 cargo_2035_302761f0\n4329 cargo_2035_24966eac\n4330 cargo_2035_2522591d\n4331 cargo_2035_25337827\n4332 cargo_2035_26797e7b\n4333 cargo_2035_27489a0c\n4334 cargo_2035_278065d4\n4335 cargo_2035_28701732\n4336 cargo_2035_301366ed\n4337 cargo_2035_30277d07\n4338 cargo_2035_24967a51\n4339 cargo_2035_267984e0\n4340 cargo_2035_28703c87\n4341 cargo_2035_30137503\n4342 cargo_2035_302797bb\n4343 cargo_2035_30930746\n4344 cargo_2035_24968b44\n4345 cargo_2035_252271b1\n4346 cargo_2035_25341bfe\n4347 cargo_2035_26799bee\n4348 cargo_2035_27491387\n4349 cargo_2035_27808a56\n4350 cargo_2035_2823497b\n4351 cargo_2035_28704e2b\n4352 cargo_2035_30280a1e\n4353 cargo_2035_30932ebf\n4354 cargo_2035_25546307\n4355 cargo_2035_26906f37\n4356 cargo_2035_27956e39\n4357 cargo_2035_281099ec\n4358 cargo_2035_28759679\n4359 cargo_2035_29470421\n4360 cargo_2035_297811c3\n4361 cargo_2035_300830e7\n4362 cargo_2035_24970172\n4363 cargo_2035_25230171\n4364 cargo_2035_253465e2\n4365 cargo_2035_268012e0\n4366 cargo_2035_27493b8c\n4367 cargo_2035_27811279\n4368 cargo_2035_28706be9\n4369 cargo_2035_30282a37\n4370 cargo_2035_249716bb\n4371 cargo_2035_26803f1b\n4372 cargo_2035_2870703a\n4373 cargo_2035_30283bb5\n4374 cargo_2035_3093725a\n4375 cargo_2035_24974146\n4376 cargo_2035_26805c8d\n4377 cargo_2035_287092a2\n4378 cargo_2035_30285a50\n4379 cargo_2035_24975494\n4380 cargo_2035_25234034\n4381 cargo_2035_253545ff\n4382 cargo_2035_268068c1\n4383 cargo_2035_274982b5\n4384 cargo_2035_278158ce\n4385 cargo_2035_28710f0a\n4386 cargo_2035_29252437\n4387 cargo_2035_30286bc9\n4388 cargo_2035_2497699d\n4389 cargo_2035_26807be2\n4390 cargo_2035_28711db6\n4391 cargo_2035_30287ee8\n4392 cargo_2035_24978bbb\n4393 cargo_2035_28714686\n4394 cargo_2035_30169e6e\n4395 cargo_2035_30290bfe\n4396 cargo_2035_3094919a\n4397 cargo_2035_24980adf\n4398 cargo_2035_25182f61\n4399 cargo_2035_287165aa\n4400 cargo_2035_3017173f\n4401 cargo_2035_302927d2\n4402 cargo_2035_30896070\n4403 cargo_2035_2498109b\n4404 cargo_2035_2524172f\n4405 cargo_2035_25368bed\n4406 cargo_2035_27504c74\n4407 cargo_2035_27822c33\n4408 cargo_2035_28717df1\n4409 cargo_2035_2926329b\n4410 cargo_2035_301728c4\n4411 cargo_2035_3029376e\n4412 cargo_2035_24983403\n4413 cargo_2035_25243b5b\n4414 cargo_2035_25372727\n4415 cargo_2035_27507939\n4416 cargo_2035_27824da1\n4417 cargo_2035_28235740\n4418 cargo_2035_28719e33\n4419 cargo_2035_29266f08\n4420 cargo_2035_301749e3\n4421 cargo_2035_30295d47\n4422 cargo_2035_249884c2\n4423 cargo_2035_25247eaf\n4424 cargo_2035_25381199\n4425 cargo_2035_275117eb\n4426 cargo_2035_27828ffa\n4427 cargo_2035_2872309a\n4428 cargo_2035_29275d67\n4429 cargo_2035_301785a9\n4430 cargo_2035_30299577\n4431 cargo_2035_30721d2e\n4432 cargo_2035_311066e6\n4433 cargo_2035_249913f3\n4434 cargo_2035_25387aec\n4435 cargo_2035_29281c64\n4436 cargo_2035_30125b3c\n4437 cargo_2035_2499386c\n4438 cargo_2035_252729bc\n4439 cargo_2035_2824165f\n4440 cargo_2035_292841fc\n4441 cargo_2035_30127d42\n4442 cargo_2035_276566d1\n4443 cargo_2035_27568e5d\n4444 cargo_2035_297418ee\n4445 cargo_2035_27572a45\n4446 cargo_2035_29743bb5\n4447 cargo_2035_307597e4\n4448 cargo_2035_30761fc6\n4449 cargo_2035_311757d0\n4450 cargo_2035_265337dc\n4451 cargo_2035_26718a11\n4452 cargo_2035_28224554\n4453 cargo_2035_27962f56\n4454 cargo_2035_28124c5b\n4455 cargo_2035_29478d1a\n4456 cargo_2035_300948ad\n4457 cargo_2035_2505467c\n4458 cargo_2035_2555214c\n4459 cargo_2035_262042bb\n4460 cargo_2035_264961b4\n4461 cargo_2035_28126af7\n4462 cargo_2035_28768aa2\n4463 cargo_2035_29479d60\n4464 cargo_2035_29787ff3\n4465 cargo_2035_308405ca\n4466 cargo_2035_25063b2c\n4467 cargo_2035_281299ad\n4468 cargo_2035_29321553\n4469 cargo_2035_2997353d\n4470 cargo_2035_30319583\n4471 cargo_2035_25067560\n4472 cargo_2035_26501425\n4473 cargo_2035_268370b6\n4474 cargo_2035_28137a66\n4475 cargo_2035_28194839\n4476 cargo_2035_293254ee\n4477 cargo_2035_29977fb8\n4478 cargo_2035_3032335e\n4479 cargo_2035_2506900e\n4480 cargo_2035_265032a9\n4481 cargo_2035_28142948\n4482 cargo_2035_3010513f\n4483 cargo_2035_30325e6f\n4484 cargo_2035_250456a2\n4485 cargo_2035_26188c73\n4486 cargo_2035_28146de9\n4487 cargo_2035_28617b11\n4488 cargo_2035_29981859\n4489 cargo_2035_30327dbc\n4490 cargo_2035_25047c63\n4491 cargo_2035_26210f98\n4492 cargo_2035_28151c14\n4493 cargo_2035_286392c8\n4494 cargo_2035_29984ffa\n4495 cargo_2035_2505143d\n4496 cargo_2035_26217c4e\n4497 cargo_2035_27154bd0\n4498 cargo_2035_28159dea\n4499 cargo_2035_28645f9d\n4500 cargo_2035_29011aab\n4501 cargo_2035_2998825e\n4502 cargo_2035_300559dc\n4503 cargo_2035_303342b5\n4504 cargo_2035_25079aad\n4505 cargo_2035_255698d7\n4506 cargo_2035_29391d21\n4507 cargo_2035_30376286\n4508 cargo_2035_25142d1d\n4509 cargo_2035_28676ac4\n4510 cargo_2035_29107662\n4511 cargo_2035_30252a42\n4512 cargo_2035_25147c9f\n4513 cargo_2035_2529486d\n4514 cargo_2035_28544ad8\n4515 cargo_2035_3101914e\n4516 cargo_2035_25405481\n4517 cargo_2035_25672507\n4518 cargo_2035_279215dc\n4519 cargo_2035_290536e9\n4520 cargo_2035_29220802\n4521 cargo_2035_2977952d\n4522 cargo_2035_2541043a\n4523 cargo_2035_25756033\n4524 cargo_2035_26145914\n4525 cargo_2035_26196fcf\n4526 cargo_2035_263845f1\n4527 cargo_2035_27138ada\n4528 cargo_2035_293121ae\n4529 cargo_2035_29874c8b\n4530 cargo_2035_29914f17\n4531 cargo_2035_30800b66\n4532 cargo_2035_26197540\n4533 cargo_2035_269247f2\n4534 cargo_2035_281138c1\n4535 cargo_2035_28761e71\n4536 cargo_2035_29472ee7\n4537 cargo_2035_251848e6\n4538 cargo_2035_25369512\n4539 cargo_2035_26224390\n4540 cargo_2035_28523192\n4541 cargo_2035_29148459\n4542 cargo_2035_29567bef\n4543 cargo_2035_251884aa\n4544 cargo_2035_253778c7\n4545 cargo_2035_262289cd\n4546 cargo_2035_2827366d\n4547 cargo_2035_28527f5a\n4548 cargo_2035_29152a8a\n4549 cargo_2035_29571903\n4550 cargo_2035_30718061\n4551 cargo_2035_3110239d\n4552 cargo_2035_2519114d\n4553 cargo_2035_253822af\n4554 cargo_2035_26231141\n4555 cargo_2035_28277bd0\n4556 cargo_2035_285297e3\n4557 cargo_2035_291541ba\n4558 cargo_2035_2957417d\n4559 cargo_2035_3110783e\n4560 cargo_2035_25193314\n4561 cargo_2035_253865fc\n4562 cargo_2035_26233af0\n4563 cargo_2035_28282a50\n4564 cargo_2035_284197c9\n4565 cargo_2035_2853151a\n4566 cargo_2035_291576ed\n4567 cargo_2035_29576332\n4568 cargo_2035_31110ab7\n4569 cargo_2035_26215757\n4570 cargo_2035_279708b8\n4571 cargo_2035_28155e2d\n4572 cargo_2035_28643282\n4573 cargo_2035_2998663e\n4574 cargo_2035_30332424\n4575 cargo_2035_25195f6c\n4576 cargo_2035_252717b1\n4577 cargo_2035_262353a8\n4578 cargo_2035_2828633e\n4579 cargo_2035_285348cd\n4580 cargo_2035_29578c30\n4581 cargo_2035_28656cb8\n4582 cargo_2035_30232b8e\n4583 cargo_2035_25218b47\n4584 cargo_2035_25323abd\n4585 cargo_2035_2746385a\n4586 cargo_2035_27799772\n4587 cargo_2035_2867577c\n4588 cargo_2035_30251c63\n4589 cargo_2035_2808436d\n4590 cargo_2035_25251ce8\n4591 cargo_2035_27466ccf\n4592 cargo_2035_27832bd7\n4593 cargo_2035_295301fc\n4594 cargo_2035_31104424\n4595 cargo_2035_252651bf\n4596 cargo_2035_27468581\n4597 cargo_2035_27846940\n4598 cargo_2035_29532ee9\n4599 cargo_2035_31020778\n4600 cargo_2035_25267308\n4601 cargo_2035_27470bb1\n4602 cargo_2035_27848e77\n4603 cargo_2035_28436303\n4604 cargo_2035_29534dc6\n4605 cargo_2035_310248b8\n4606 cargo_2035_25209607\n4607 cargo_2035_274729db\n4608 cargo_2035_27790895\n4609 cargo_2035_29536c79\n4610 cargo_2035_310297de\n4611 cargo_2035_28076174\n4612 cargo_2035_3006062b\n4613 cargo_2035_252118d9\n4614 cargo_2035_274754f6\n4615 cargo_2035_277920ff\n4616 cargo_2035_28382a65\n4617 cargo_2035_29538cf9\n4618 cargo_2035_31033cc7\n4619 cargo_2035_25213839\n4620 cargo_2035_274772f4\n4621 cargo_2035_27794891\n4622 cargo_2035_28384012\n4623 cargo_2035_29541590\n4624 cargo_2035_310370ab\n4625 cargo_2035_252159b4\n4626 cargo_2035_2747971a\n4627 cargo_2035_27796dec\n4628 cargo_2035_28386f11\n4629 cargo_2035_2954341c\n4630 cargo_2035_310428b5\n4631 cargo_2035_25217c5e\n4632 cargo_2035_274810ef\n4633 cargo_2035_277984ff\n4634 cargo_2035_295458e3\n4635 cargo_2035_306050d4\n4636 cargo_2035_31046133\n4637 cargo_2035_25220e0f\n4638 cargo_2035_27483b37\n4639 cargo_2035_27801a5e\n4640 cargo_2035_28391b4c\n4641 cargo_2035_29547e5a\n4642 cargo_2035_30129c95\n4643 cargo_2035_30608c5b\n4644 cargo_2035_31051dd0\n4645 cargo_2035_25222c51\n4646 cargo_2035_27486d56\n4647 cargo_2035_27803837\n4648 cargo_2035_29549fce\n4649 cargo_2035_3061099f\n4650 cargo_2035_31055ddb\n4651 cargo_2035_25224798\n4652 cargo_2035_27488a52\n4653 cargo_2035_27805373\n4654 cargo_2035_295529ea\n4655 cargo_2035_301354fe\n4656 cargo_2035_310598ab\n4657 cargo_2035_310613a3\n4658 cargo_2035_2522683a\n4659 cargo_2035_27490c6e\n4660 cargo_2035_278070bc\n4661 cargo_2035_28397f6c\n4662 cargo_2035_2955453b\n4663 cargo_2035_30614cc6\n4664 cargo_2035_31064a2a\n4665 cargo_2035_25228b0e\n4666 cargo_2035_274929b8\n4667 cargo_2035_278097a4\n4668 cargo_2035_31068235\n4669 cargo_2035_25231e91\n4670 cargo_2035_27494e07\n4671 cargo_2035_27812ae5\n4672 cargo_2035_284025d5\n4673 cargo_2035_29557a54\n4674 cargo_2035_30619620\n4675 cargo_2035_310739f8\n4676 cargo_2035_26831735\n4677 cargo_2035_2812071d\n4678 cargo_2035_29476027\n4679 cargo_2035_29994ca4\n4680 cargo_2035_30091058\n4681 cargo_2035_2523330f\n4682 cargo_2035_27497c8c\n4683 cargo_2035_27814dbb\n4684 cargo_2035_284041c4\n4685 cargo_2035_29559f10\n4686 cargo_2035_3107737f\n4687 cargo_2035_25235555\n4688 cargo_2035_27499723\n4689 cargo_2035_27816ab6\n4690 cargo_2035_2840690e\n4691 cargo_2035_2925494a\n4692 cargo_2035_2956231b\n4693 cargo_2035_30623c77\n4694 cargo_2035_31081ef9\n4695 cargo_2035_25237e08\n4696 cargo_2035_275010f4\n4697 cargo_2035_278184c3\n4698 cargo_2035_2956418d\n4699 cargo_2035_3062517d\n4700 cargo_2035_31086049\n4701 cargo_2035_252398e0\n4702 cargo_2035_267919c1\n4703 cargo_2035_27503ba2\n4704 cargo_2035_27820a1a\n4705 cargo_2035_2841006e\n4706 cargo_2035_295669f0\n4707 cargo_2035_31090b5f\n4708 cargo_2035_25242d7d\n4709 cargo_2035_268100f0\n4710 cargo_2035_275058b8\n4711 cargo_2035_27823265\n4712 cargo_2035_2926501f\n4713 cargo_2035_2956847e\n4714 cargo_2035_31095ee3\n4715 cargo_2035_25244ca0\n4716 cargo_2035_26812a5c\n4717 cargo_2035_27508c43\n4718 cargo_2035_27825827\n4719 cargo_2035_2827061f\n4720 cargo_2035_29270660\n4721 cargo_2035_29570c6c\n4722 cargo_2035_3109983b\n4723 cargo_2035_2524689b\n4724 cargo_2035_26814cb1\n4725 cargo_2035_27510f7a\n4726 cargo_2035_27827a16\n4727 cargo_2035_282747ea\n4728 cargo_2035_29274647\n4729 cargo_2035_295735c3\n4730 cargo_2035_3110356d\n4731 cargo_2035_25248641\n4732 cargo_2035_26781809\n4733 cargo_2035_275122f9\n4734 cargo_2035_27829110\n4735 cargo_2035_28278c6d\n4736 cargo_2035_284185cc\n4737 cargo_2035_2927880c\n4738 cargo_2035_29575ce1\n4739 cargo_2035_30723715\n4740 cargo_2035_31108bc0\n4741 cargo_2035_26599127\n4742 cargo_2035_281549bf\n4743 cargo_2035_2933034d\n4744 cargo_2035_294856a8\n4745 cargo_2035_29794f15\n4746 cargo_2035_25250f48\n4747 cargo_2035_26783e09\n4748 cargo_2035_27514970\n4749 cargo_2035_27831f8d\n4750 cargo_2035_28283adb\n4751 cargo_2035_29577c34\n4752 cargo_2035_3072632b\n4753 cargo_2035_31111793\n4754 cargo_2035_25253bfc\n4755 cargo_2035_267853ee\n4756 cargo_2035_27516bce\n4757 cargo_2035_27834e1b\n4758 cargo_2035_28287a92\n4759 cargo_2035_29285c16\n4760 cargo_2035_2957954d\n4761 cargo_2035_31114b72\n4762 cargo_2035_2525404e\n4763 cargo_2035_252749fb\n4764 cargo_2035_27518a5f\n4765 cargo_2035_27835938\n4766 cargo_2035_287302ea\n4767 cargo_2035_29160929\n4768 cargo_2035_292868ac\n4769 cargo_2035_30306105\n4770 cargo_2035_27495634\n4771 cargo_2035_286636ad\n4772 cargo_2035_30239f04\n4773 cargo_2035_28667e27\n4774 cargo_2035_29099faf\n4775 cargo_2035_302439a9\n4776 cargo_2035_28672bd1\n4777 cargo_2035_29103fc1\n4778 cargo_2035_30248744\n4779 cargo_2035_2672666b\n4780 cargo_2035_28106a99\n4781 cargo_2035_25269aed\n4782 cargo_2035_25295a57\n4783 cargo_2035_25304f66\n4784 cargo_2035_25308546\n4785 cargo_2035_25313694\n4786 cargo_2035_253179ba\n4787 cargo_2035_25321a14\n4788 cargo_2035_25403e01\n4789 cargo_2035_25670262\n4790 cargo_2035_25696b7e\n4791 cargo_2035_268220e6\n4792 cargo_2035_2713336b\n4793 cargo_2035_27919414\n4794 cargo_2035_28985350\n4795 cargo_2035_290510ce\n4796 cargo_2035_29218bc7\n4797 cargo_2035_30074147\n4798 cargo_2035_30958c6b\n4799 cargo_2035_25330c11\n4800 cargo_2035_301315a9\n4801 cargo_2035_27135850\n4802 cargo_2035_281018b5\n4803 cargo_2035_253351f8\n4804 cargo_2035_25343ba4\n4805 cargo_2035_28245cc8\n4806 cargo_2035_25348083\n4807 cargo_2035_28119e25\n4808 cargo_2035_297855d8\n4809 cargo_2035_2683480a\n4810 cargo_2035_26931386\n4811 cargo_2035_2714484d\n4812 cargo_2035_281277c7\n4813 cargo_2035_29015ee7\n4814 cargo_2035_2536168c\n4815 cargo_2035_292578d5\n4816 cargo_2035_25365154\n4817 cargo_2035_2926152c\n4818 cargo_2035_25370005\n4819 cargo_2035_29264a0f\n4820 cargo_2035_253730f6\n4821 cargo_2035_26226176\n4822 cargo_2035_2826989c\n4823 cargo_2035_28525077\n4824 cargo_2035_2915012f\n4825 cargo_2035_2956946a\n4826 cargo_2035_31098e2b\n4827 cargo_2035_25374fdc\n4828 cargo_2035_284142bf\n4829 cargo_2035_29268cf5\n4830 cargo_2035_3071603b\n4831 cargo_2035_253797f7\n4832 cargo_2035_284169b7\n4833 cargo_2035_29273505\n4834 cargo_2035_307200df\n4835 cargo_2035_25383f86\n4836 cargo_2035_29277841\n4837 cargo_2035_30123357\n4838 cargo_2035_25415e14\n4839 cargo_2035_2576051f\n4840 cargo_2035_26149c03\n4841 cargo_2035_26394084\n4842 cargo_2035_29317b43\n4843 cargo_2035_29708fc6\n4844 cargo_2035_29878db7\n4845 cargo_2035_29918a58\n4846 cargo_2035_30803011\n4847 cargo_2035_25416e22\n4848 cargo_2035_2555115c\n4849 cargo_2035_263956ce\n4850 cargo_2035_279329aa\n4851 cargo_2035_289985d3\n4852 cargo_2035_2970903d\n4853 cargo_2035_29879783\n4854 cargo_2035_2992047b\n4855 cargo_2035_30804be7\n4856 cargo_2035_27648c7b\n4857 cargo_2035_26671779\n4858 cargo_2035_26722ae5\n4859 cargo_2035_2801721a\n4860 cargo_2035_28018c74\n4861 cargo_2035_28227148\n4862 cargo_2035_28584c14\n4863 cargo_2035_27375e72\n4864 cargo_2035_27657b6c\n4865 cargo_2035_27723e32\n4866 cargo_2035_2755556c\n4867 cargo_2035_27559c28\n4868 cargo_2035_297372f5\n4869 cargo_2035_27682afc\n4870 cargo_2035_29638b61\n4871 cargo_2035_26200051\n4872 cargo_2035_27960276\n4873 cargo_2035_28118d3f\n4874 cargo_2035_28764fe7\n4875 cargo_2035_29475ea6\n4876 cargo_2035_2811700d\n4877 cargo_2035_2808294f\n4878 cargo_2035_294573cd\n4879 cargo_2035_30064693\n4880 cargo_2035_25539724\n4881 cargo_2035_28085edd\n4882 cargo_2035_25541209\n4883 cargo_2035_28091df5\n4884 cargo_2035_28750b60\n4885 cargo_2035_2946144a\n4886 cargo_2035_299051bd\n4887 cargo_2035_255701ce\n4888 cargo_2035_293944bd\n4889 cargo_2035_2557179a\n4890 cargo_2035_27092495\n4891 cargo_2035_295054bf\n4892 cargo_2035_25574502\n4893 cargo_2035_2950956c\n4894 cargo_2035_30013631\n4895 cargo_2035_2561922c\n4896 cargo_2035_26409d4c\n4897 cargo_2035_27412b96\n4898 cargo_2035_27761f29\n4899 cargo_2035_28181aca\n4900 cargo_2035_29812927\n4901 cargo_2035_28045f8a\n4902 cargo_2035_2565018d\n4903 cargo_2035_26511524\n4904 cargo_2035_27443ada\n4905 cargo_2035_28103c51\n4906 cargo_2035_286215e1\n4907 cargo_2035_28988f25\n4908 cargo_2035_29221f4e\n4909 cargo_2035_30960cb1\n4910 cargo_2035_25655326\n4911 cargo_2035_26168755\n4912 cargo_2035_2656781e\n4913 cargo_2035_268464f8\n4914 cargo_2035_279719b7\n4915 cargo_2035_2948814f\n4916 cargo_2035_29894038\n4917 cargo_2035_302134a9\n4918 cargo_2035_27948535\n4919 cargo_2035_28145c36\n4920 cargo_2035_29293f38\n4921 cargo_2035_294527c7\n4922 cargo_2035_29773128\n4923 cargo_2035_27673078\n4924 cargo_2035_276770f7\n4925 cargo_2035_25714117\n4926 cargo_2035_27172c1a\n4927 cargo_2035_27550617\n4928 cargo_2035_27702cb4\n4929 cargo_2035_3044768e\n4930 cargo_2035_257460e9\n4931 cargo_2035_2594625b\n4932 cargo_2035_2598494d\n4933 cargo_2035_26414e0c\n4934 cargo_2035_271635a9\n4935 cargo_2035_2818611e\n4936 cargo_2035_28788e42\n4937 cargo_2035_291877d4\n4938 cargo_2035_2934019a\n4939 cargo_2035_29413d7f\n4940 cargo_2035_29817c27\n4941 cargo_2035_30506221\n4942 cargo_2035_3075590a\n4943 cargo_2035_30987fc7\n4944 cargo_2035_31171e1b\n4945 cargo_2035_300178eb\n4946 cargo_2035_277307fe\n4947 cargo_2035_28083917\n4948 cargo_2035_30066ec9\n4949 cargo_2035_295026e5\n4950 cargo_2035_30154103\n4951 cargo_2035_307692d4\n4952 cargo_2035_2701256b\n4953 cargo_2035_27030e75\n4954 cargo_2035_26987021\n4955 cargo_2035_269896dd\n4956 cargo_2035_26675802\n4957 cargo_2035_27011b37\n4958 cargo_2035_279843af\n4959 cargo_2035_28559bda\n4960 cargo_2035_30560d6b\n4961 cargo_2035_2670122a\n4962 cargo_2035_2856701d\n4963 cargo_2035_296129e8\n4964 cargo_2035_26663623\n4965 cargo_2035_26710159\n4966 cargo_2035_27854918\n4967 cargo_2035_28006a7d\n4968 cargo_2035_282164f1\n4969 cargo_2035_29621aac\n4970 cargo_2035_267139b2\n4971 cargo_2035_280109ee\n4972 cargo_2035_282190c1\n4973 cargo_2035_29624926\n4974 cargo_2035_30609362\n4975 cargo_2035_2671490c\n4976 cargo_2035_2801156f\n4977 cargo_2035_2822008a\n4978 cargo_2035_2857892b\n4979 cargo_2035_29625ba9\n4980 cargo_2035_2801447b\n4981 cargo_2035_30924fc8\n4982 cargo_2035_2605955c\n4983 cargo_2035_26724729\n4984 cargo_2035_30673e13\n4985 cargo_2035_26541d47\n4986 cargo_2035_270334a9\n4987 cargo_2035_27034619\n4988 cargo_2035_2825633e\n4989 cargo_2035_258586a0\n4990 cargo_2035_26550dca\n4991 cargo_2035_26652ccd\n4992 cargo_2035_2703752e\n4993 cargo_2035_25859957\n4994 cargo_2035_26054371\n4995 cargo_2035_267398be\n4996 cargo_2035_272121e1\n4997 cargo_2035_27873d7d\n4998 cargo_2035_28597faa\n4999 cargo_2035_30573866\n5000 cargo_2035_30706a64\n5001 cargo_2035_30943975\n5002 cargo_2035_258607e2\n5003 cargo_2035_26654865\n5004 cargo_2035_28034622\n5005 cargo_2035_3094460c\n5006 cargo_2035_25864a99\n5007 cargo_2035_26660dcd\n5008 cargo_2035_27040656\n5009 cargo_2035_2586678b\n5010 cargo_2035_26062c3f\n5011 cargo_2035_26746742\n5012 cargo_2035_28039dda\n5013 cargo_2035_2819034a\n5014 cargo_2035_28602768\n5015 cargo_2035_3067552c\n5016 cargo_2035_30950599\n5017 cargo_2035_31117e26\n5018 cargo_2035_25868b7f\n5019 cargo_2035_26682f18\n5020 cargo_2035_26763f16\n5021 cargo_2035_295969f6\n5022 cargo_2035_30576666\n5023 cargo_2035_2586987c\n5024 cargo_2035_26693379\n5025 cargo_2035_29597134\n5026 cargo_2035_25870bc4\n5027 cargo_2035_260670b8\n5028 cargo_2035_30578cdb\n5029 cargo_2035_30678b81\n5030 cargo_2035_31120920\n5031 cargo_2035_25871c08\n5032 cargo_2035_267657c8\n5033 cargo_2035_267667cd\n5034 cargo_2035_25878c72\n5035 cargo_2035_2607609d\n5036 cargo_2035_26773511\n5037 cargo_2035_272210c7\n5038 cargo_2035_28236391\n5039 cargo_2035_28480eb0\n5040 cargo_2035_30682647\n5041 cargo_2035_311245dd\n5042 cargo_2035_25880141\n5043 cargo_2035_26529f80\n5044 cargo_2035_2674853e\n5045 cargo_2035_27048863\n5046 cargo_2035_2960318a\n5047 cargo_2035_258825f7\n5048 cargo_2035_26082ae6\n5049 cargo_2035_26531501\n5050 cargo_2035_2718772b\n5051 cargo_2035_27877bfa\n5052 cargo_2035_279873bb\n5053 cargo_2035_2820006a\n5054 cargo_2035_25884287\n5055 cargo_2035_2653201c\n5056 cargo_2035_26683e96\n5057 cargo_2035_27050989\n5058 cargo_2035_28551b28\n5059 cargo_2035_2960695b\n5060 cargo_2035_25886c22\n5061 cargo_2035_271890a9\n5062 cargo_2035_29607a5f\n5063 cargo_2035_27671ab8\n5064 cargo_2035_30508015\n5065 cargo_2035_2591107f\n5066 cargo_2035_266231e2\n5067 cargo_2035_276869b4\n5068 cargo_2035_30774ed6\n5069 cargo_2035_25935949\n5070 cargo_2035_25942655\n5071 cargo_2035_2598220f\n5072 cargo_2035_261328fc\n5073 cargo_2035_26291e82\n5074 cargo_2035_26412cd0\n5075 cargo_2035_27159476\n5076 cargo_2035_281846dc\n5077 cargo_2035_287866ed\n5078 cargo_2035_2918543e\n5079 cargo_2035_29338617\n5080 cargo_2035_30504feb\n5081 cargo_2035_30753949\n5082 cargo_2035_311693d8\n5083 cargo_2035_276630b4\n5084 cargo_2035_26034968\n5085 cargo_2035_26039a94\n5086 cargo_2035_30875d13\n5087 cargo_2035_27047822\n5088 cargo_2035_27991e2e\n5089 cargo_2035_28203854\n5090 cargo_2035_28562de2\n5091 cargo_2035_27995a4b\n5092 cargo_2035_28565bf4\n5093 cargo_2035_30905572\n5094 cargo_2035_270216fc\n5095 cargo_2035_309086e5\n5096 cargo_2035_26103907\n5097 cargo_2035_26729393\n5098 cargo_2035_285899d2\n5099 cargo_2035_30616c80\n5100 cargo_2035_30695596\n5101 cargo_2035_26057468\n5102 cargo_2035_26657127\n5103 cargo_2035_2674260e\n5104 cargo_2035_28036bdd\n5105 cargo_2035_307074f9\n5106 cargo_2035_26058365\n5107 cargo_2035_2665850e\n5108 cargo_2035_26743ba6\n5109 cargo_2035_26757fd7\n5110 cargo_2035_27214364\n5111 cargo_2035_28037a4c\n5112 cargo_2035_2826480c\n5113 cargo_2035_30574851\n5114 cargo_2035_3067488c\n5115 cargo_2035_30947435\n5116 cargo_2035_31116776\n5117 cargo_2035_26065727\n5118 cargo_2035_28266815\n5119 cargo_2035_2606999f\n5120 cargo_2035_27217104\n5121 cargo_2035_260711e8\n5122 cargo_2035_27867bb5\n5123 cargo_2035_3067986a\n5124 cargo_2035_31121366\n5125 cargo_2035_26083bfc\n5126 cargo_2035_260865e2\n5127 cargo_2035_27851415\n5128 cargo_2035_27998afe\n5129 cargo_2035_2820242d\n5130 cargo_2035_260872d9\n5131 cargo_2035_27190a75\n5132 cargo_2035_28009041\n5133 cargo_2035_26089b05\n5134 cargo_2035_30689de6\n5135 cargo_2035_3113160d\n5136 cargo_2035_26091da4\n5137 cargo_2035_2847562d\n5138 cargo_2035_26093694\n5139 cargo_2035_26754131\n5140 cargo_2035_271937d4\n5141 cargo_2035_282057f4\n5142 cargo_2035_28476074\n5143 cargo_2035_306906eb\n5144 cargo_2035_3113227e\n5145 cargo_2035_28150b10\n5146 cargo_2035_267077e8\n5147 cargo_2035_24092ad2\n5148 cargo_2035_26254355\n5149 cargo_2035_2648108f\n5150 cargo_2035_272735a5\n5151 cargo_2035_27882e60\n5152 cargo_2035_29494175\n5153 cargo_2035_30033354\n5154 cargo_2035_26438fae\n5155 cargo_2035_27077f91\n5156 cargo_2035_2729965c\n5157 cargo_2035_27895231\n5158 cargo_2035_28451608\n5159 cargo_2035_304048d2\n5160 cargo_2035_26317274\n5161 cargo_2035_27688cdf\n5162 cargo_2035_28178163\n5163 cargo_2035_30516e56\n5164 cargo_2035_23973732\n5165 cargo_2035_27064f1d\n5166 cargo_2035_27274caa\n5167 cargo_2035_28438e2a\n5168 cargo_2035_26434d33\n5169 cargo_2035_27070385\n5170 cargo_2035_27285603\n5171 cargo_2035_28444ecd\n5172 cargo_2035_26457b48\n5173 cargo_2035_29898851\n5174 cargo_2035_281110da\n5175 cargo_2035_29471c3c\n5176 cargo_2035_26986132\n5177 cargo_2035_27005cba\n5178 cargo_2035_279810c7\n5179 cargo_2035_279859e0\n5180 cargo_2035_2819675f\n5181 cargo_2035_2798901c\n5182 cargo_2035_26698828\n5183 cargo_2035_28564b8d\n5184 cargo_2035_26700cb6\n5185 cargo_2035_285667a0\n5186 cargo_2035_30602a7c\n5187 cargo_2035_26702c8c\n5188 cargo_2035_27997b33\n5189 cargo_2035_279996df\n5190 cargo_2035_28208d10\n5191 cargo_2035_28568f00\n5192 cargo_2035_2961347e\n5193 cargo_2035_30603eae\n5194 cargo_2035_267033e4\n5195 cargo_2035_28209177\n5196 cargo_2035_28569a20\n5197 cargo_2035_29614c5a\n5198 cargo_2035_3056326c\n5199 cargo_2035_30910b82\n5200 cargo_2035_2800334d\n5201 cargo_2035_28213a84\n5202 cargo_2035_28573e7d\n5203 cargo_2035_2961838e\n5204 cargo_2035_2671125c\n5205 cargo_2035_28007a33\n5206 cargo_2035_282179c7\n5207 cargo_2035_28577671\n5208 cargo_2035_2962221c\n5209 cargo_2035_26666bba\n5210 cargo_2035_26716532\n5211 cargo_2035_28222feb\n5212 cargo_2035_29627bb0\n5213 cargo_2035_26670d25\n5214 cargo_2035_26720a77\n5215 cargo_2035_296304d9\n5216 cargo_2035_306121c8\n5217 cargo_2035_276754d4\n5218 cargo_2035_266209c9\n5219 cargo_2035_2768406f\n5220 cargo_2035_27020f54\n5221 cargo_2035_270142da\n5222 cargo_2035_2701951c\n5223 cargo_2035_30903e68\n5224 cargo_2035_267690aa\n5225 cargo_2035_2721922a\n5226 cargo_2035_29600337\n5227 cargo_2035_27186030\n5228 cargo_2035_27875365\n5229 cargo_2035_28198c49\n5230 cargo_2035_3068317d\n5231 cargo_2035_31125ff0\n5232 cargo_2035_26749de1\n5233 cargo_2035_27049839\n5234 cargo_2035_28238364\n5235 cargo_2035_305429c3\n5236 cargo_2035_26719f2f\n5237 cargo_2035_28015cf9\n5238 cargo_2035_28225dc1\n5239 cargo_2035_2858132b\n5240 cargo_2035_296294a5\n5241 cargo_2035_30567289\n5242 cargo_2035_2701660a\n5243 cargo_2035_24969979\n5244 cargo_2035_26800b28\n5245 cargo_2035_28705cc9\n5246 cargo_2035_302813a9\n5247 cargo_2035_30934758\n5248 cargo_2035_296416b8\n5249 cargo_2035_26821344\n5250 cargo_2035_28092930\n5251 cargo_2035_28576686\n5252 cargo_2035_276800eb\n5253 cargo_2035_2769154b\n5254 cargo_2035_30518cdb\n5255 cargo_2035_2811483d\n5256 cargo_2035_30088fde\n5257 cargo_2035_27002201\n5258 cargo_2035_269978b8\n5259 cargo_2035_270175ec\n5260 cargo_2035_27023cb7\n5261 cargo_2035_27025135\n5262 cargo_2035_2709769d\n5263 cargo_2035_29507a68\n5264 cargo_2035_27376018\n5265 cargo_2035_276599dd\n5266 cargo_2035_29192c4a\n5267 cargo_2035_27384289\n5268 cargo_2035_27389cfa\n5269 cargo_2035_274843dc\n5270 cargo_2035_28657686\n5271 cargo_2035_288578f3\n5272 cargo_2035_30233d13\n5273 cargo_2035_24178a77\n5274 cargo_2035_274604b8\n5275 cargo_2035_28293025\n5276 cargo_2035_28673411\n5277 cargo_2035_30249c66\n5278 cargo_2035_2769311b\n5279 cargo_2035_305200c4\n5280 cargo_2035_28088a6e\n5281 cargo_2035_300695cb\n5282 cargo_2035_282286c2\n5283 cargo_2035_30568fd9\n5284 cargo_2035_252997d0\n5285 cargo_2035_2871369a\n5286 cargo_2035_28735ded\n5287 cargo_2035_3018758c\n5288 cargo_2035_29529cf6\n5289 cargo_2035_31082498\n5290 cargo_2035_310938e9\n5291 cargo_2035_2938995c\n5292 cargo_2035_286694a7\n5293 cargo_2035_28691976\n5294 cargo_2035_286499eb\n5295 cargo_2035_28665fc1\n5296 cargo_2035_3024190c\n5297 cargo_2035_28670d50\n5298 cargo_2035_30246083\n5299 cargo_2035_28674806\n5300 cargo_2035_29105e81\n5301 cargo_2035_295257da\n5302 cargo_2035_301396b8\n5303 cargo_2035_30250919\n5304 cargo_2035_3018660b\n5305 cargo_2035_30191324\n5306 cargo_2035_25357642\n5307 cargo_2035_29253538\n\n\n\nid1 &lt;- vessel_location_match  %&gt;% \n  select(vessel_hr) %&gt;% \n  rename(id = vessel_hr) \n\nid2 &lt;- vessel_location_match  %&gt;% \n  select(cargo) %&gt;% \n  rename(id = cargo)\n\ncargo_vessel_nodes &lt;- rbind(id1,id2) %&gt;% \n  distinct() \n\ncargo_vessel_edges &lt;- vessel_location_match %&gt;% \n  select(vessel_hr,cargo) %&gt;% \n  distinct() %&gt;%\n  group_by(vessel_hr, cargo) %&gt;%\n  rename(source = vessel_hr, target = cargo)%&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\ncargo_vessel_graph &lt;- tbl_graph(nodes = cargo_vessel_nodes,\n                       edges = cargo_vessel_edges,\n                       directed = FALSE)\n\n\ncargo_vessel_graph %&gt;%\n  ggraph(layout = 'nicely') +\n  geom_edge_link() +\n  geom_node_point() + \n  theme_graph()\n\nFinding anomalies in vessel movement by comparing end time (calculated by dwell) with next time (the next time the vessel is detected at the next location).\n\nab_vessel_mvmt &lt;- vessel_location %&gt;%\n  mutate(time = ymd_hms(time)) %&gt;% \n  mutate(next_time = ymd_hms(next_time)) %&gt;% \n  mutate(end_time = ymd_hms(end_time)) %&gt;% \n  filter(end_time != next_time) \n\nab_vessel_mvmt_agg &lt;- ab_vessel_mvmt %&gt;% \n  distinct() %&gt;% \n  group_by(source) %&gt;% \n  summarise(weights = n()) %&gt;%\n  arrange(desc(weights))\nab_vessel_mvmt_agg\n\n# A tibble: 19 × 2\n   source                  weights\n   &lt;chr&gt;                     &lt;int&gt;\n 1 City of Paackland          2816\n 2 City of Lomark             2357\n 3 City of South Paackland    2183\n 4 City of Himark             1555\n 5 City of Haacklee           1287\n 6 Cod Table                  1016\n 7 Nav C                       707\n 8 Exit East                   643\n 9 Wrasse Beds                 588\n10 Nav 2                       515\n11 Tuna Shelf                  505\n12 Nemo Reef                   461\n13 Ghoti Preserve              262\n14 Nav 1                       161\n15 Nav 3                       149\n16 Nav D                       108\n17 Nav A                        53\n18 Nav E                        28\n19 Nav B                        22\n\n\nOverview of Harbor Report\n\ndistinct_harbor_report &lt;- harbor_report_edges %&gt;% \n  select(source,target,date) %&gt;% \n  filter(source %in% unlist(fishing_vessel_list)) %&gt;%\n  distinct() %&gt;% \n  arrange(source, date) %&gt;%\n  mutate(target = fct_infreq(target))\n\n\nggplot(distinct_harbor_report) +\n  geom_bar(aes(x = target))\n\n\n\n\n\n\n\n\nOverview of Vessels Location by Transponder Ping\n\ntransponder_location &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;%\n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  select(source, target, time) %&gt;%\n  mutate(source = fct_infreq(source))\n\nggplot(transponder_location) +\n  geom_bar(aes(x = source))\n\n\n\n\n\n\n\n\nA quick comparison between the two bar chart, we can conclude that port activities for fishing vessels are highest at City of Paackland and least at City of Himark. Also, there is no fishing vessels that visits City of Port Grove.\n\n\n\nWe examine the cargo_list and realised that there are some records that shows negative tonnage for their cargoes. This is abnormal as all cargoes should have positive qty_tons value.\n\nnegative_ton_cargo_by_city &lt;- cargo_list %&gt;% \n  filter(qty_tons &lt;= 0) %&gt;% \n  arrange(qty_tons) %&gt;% \n  group_by(city) %&gt;% \n  summarise(total_qty_ton_neg = sum(qty_tons)) %&gt;% \n  arrange(total_qty_ton_neg)\n\npositive_ton_cargo_by_city &lt;- cargo_list %&gt;% \n  filter(qty_tons &gt; 0) %&gt;% \n  arrange(qty_tons) %&gt;% \n  group_by(city) %&gt;% \n  summarise(total_qty_ton_pos = sum(qty_tons)) %&gt;% \n  arrange(desc(total_qty_ton_pos))\n\nnegative_ton_cargo_by_city \n\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  &lt;chr&gt;                               &lt;dbl&gt;\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n\npositive_ton_cargo_by_city\n\n# A tibble: 5 × 2\n  city                    total_qty_ton_pos\n  &lt;chr&gt;                               &lt;dbl&gt;\n1 City of Paackland                  34653.\n2 City of Himark                     32839.\n3 City of Lomark                     23721.\n4 City of South Paackland            20790.\n5 City of Haacklee                   14988.\n\n\n\npositive_ton_cargo_by_city$city &lt;- factor(positive_ton_cargo_by_city$city, \n                                           levels = rev(positive_ton_cargo_by_city$city[order(positive_ton_cargo_by_city$total_qty_ton_pos)]))\n\nggplot(positive_ton_cargo_by_city, aes(x = city)) +\n  geom_bar(aes(y = total_qty_ton_pos), \n           stat = \"identity\", \n           position = \"dodge\", fill = \"blue\", alpha = 0.6) +  # Positive quantities\n  labs(title = \"Quantities by City\",\n       x = \"\",\n       y = \"Total Quantity (tons)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThere seems to be suspicious activities going on at each cities when we look at the negative values in qty_ton.\n\nnegative_ton_cargo_by_city\n\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  &lt;chr&gt;                               &lt;dbl&gt;\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n\n\nNext, we will remove the negative quantity and then find the aggregated value by the type of fish, the city, and the date of transaction.\n\nfish_by_port_agg &lt;- cargo_list %&gt;%\n  distinct() %&gt;%\n  filter(qty_tons &gt; 0) %&gt;% \n  group_by(name, city, date) %&gt;%\n  summarise(total_qty_ton = sum(qty_tons)) %&gt;%\n  ungroup() %&gt;% \n  mutate(month = month(date, \n                       label = TRUE, \n                       abbr = TRUE))\n\nSecondly, when we observe the heatmap, we also realised that the data only covers the month from Feb to Nov in year 2035.\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;%\n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n# Function to create a calendar heat map\ncreate_heatmap &lt;- function(data, city, f) {\n  ggplot(data, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n\n\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nregion_fish_species &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"Region\") %&gt;% \n  select(Name, fish_species_present, Activities, kind)\n\n\nword_list &lt;- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"species\", 1:max_elements) \n\nword_df &lt;- as_tibble(word_df) %&gt;% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %&gt;% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %&gt;% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %&gt;% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %&gt;% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %&gt;%\n  mutate_at(vars(species1:species5), trimws)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nregion_fish_species &lt;- region_fish_species %&gt;%\n  cbind(word_df) \n  \nregion_fish_species\n\n                 Name\n1           Cod Table\n2      Ghoti Preserve\n3         Wrasse Beds\n4           Nemo Reef\n5 Don Limpet Preserve\n6          Tuna Shelf\n                                                                                                  fish_species_present\n1                                             Cod/Gadus n.specificatae, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n2                       Wrasse/Labridae n.refert, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Offidiaa/Piscis osseus\n3                                             Wrasse/Labridae n.refert, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n4 Wrasse/Labridae n.refert, Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis\n5  Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Sockfish/Pisces foetida\n6                         Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Harland/Piscis sapidum\n                         Activities                kind species1 species2\n1                Commercial fishing      Fishing Ground      Cod Birdseye\n2     Research, Tourism, Recreation Ecological Preserve   Wrasse Beauvoir\n3                Commercial fishing      Fishing Ground   Wrasse Birdseye\n4               Recreation, Tourism Ecological Preserve   Wrasse     Tuna\n5               Recreation, Tourism Ecological Preserve     Tuna Birdseye\n6 Commercial fishing, Sport fishing      Fishing Ground     Tuna Birdseye\n  species3 species4 species5\n1 Beauvoir     &lt;NA&gt;     &lt;NA&gt;\n2  Helenaa Offidiaa     &lt;NA&gt;\n3 Beauvoir     &lt;NA&gt;     &lt;NA&gt;\n4 Birdseye Beauvoir  Helenaa\n5 Beauvoir  Helenaa Sockfish\n6 Beauvoir  Harland     &lt;NA&gt;\n\n\n\n# Convert data to long format\nregion_fish_species_long &lt;- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long &lt;- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %&gt;% \n  na.omit() %&gt;%\n  mutate_at(vars(Presence), trimws)\n\nVisualising the Species presence in each Region\n\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nFrom the above visualisation, we can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species would have fished illegal. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c) %&gt;% \n    filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\"))\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;% \n  filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\")) %&gt;% \n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton))\n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\nFrom this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively.\nProbable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish.\n\n\n\nDevelop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n\n\nSouthSeafood Express Corp operates two fishing vessels by the id of “snappersnatcher7be” and “roachrobberdb6”.\n\ntransponder_ping_edge &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\")\n\n\ntransponder_ping_edge_agg &lt;-\n  transponder_ping_edge %&gt;%\n  distinct() %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\n\ntransponder_ping_edge_agg %&gt;% \n  filter(target %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %&gt;%\n  group_by(target) %&gt;% \n  ggplot(aes(x=target, y=source,\n             size = weights)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nsouthseafood_edge &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;% \n  filter(target %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %&gt;% \n  arrange(target,time)\n\n\nssf_edges_agg &lt;-\n  southseafood_edge %&gt;%\n  distinct() %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\n\nid1 &lt;- ssf_edges_agg %&gt;% \n  select(source) %&gt;% \n  rename(id = source) \n\nid2 &lt;- ssf_edges_agg %&gt;% \n  select(target) %&gt;% \n  rename(id = target)\n\nmc2_nodes1 &lt;- rbind(id1,id2) %&gt;% \n  distinct() \n\n\nssf_graph &lt;- tbl_graph(nodes = mc2_nodes1,\n                       edges = ssf_edges_agg,\n                       directed = TRUE)\n\n\n# Add a color column to nodes\nssf_graph &lt;- ssf_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(color = case_when(\n    id %in% c(\"snappersnatcher7be\", \"roachrobberdb6\") ~ \"Vessel\",\n    TRUE ~ \"Location\"\n  ))\n\n# Create the plot\nssf_graph %&gt;% \n  activate(edges) %&gt;%\n  arrange(desc(weights)) %&gt;% \n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(color = \"\", \n                     linewidth = weights)) +\n  geom_node_point(aes(color = color, size = 10)) + \n  theme_graph() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    text = element_text(color = \"black\"))+\n  geom_node_text(aes(label = id), \n                 repel = TRUE, \n                 vjust = 1, \n                 hjust = 1,\n                 size = 3)\n\n\n\n\n\n\n\n\n\n\nSince only Snapper Snatcher appears to be operating in Ghoti Preserve, we will examine this fishing vessel more closely.\n\nsnapper_activities &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;% \n  filter(target %in% c(\"snappersnatcher7be\")) %&gt;% \n  filter(source == \"Ghoti Preserve\") %&gt;% \n  arrange(target,time) %&gt;% \n  mutate(end_time = time + dwell) %&gt;% \n  select(time, dwell, end_time)\nsnapper_activities\n\n                 time      dwell            end_time\n1 2035-02-02 05:39:59 282000.853 2035-02-05 12:00:00\n2 2035-02-09 05:49:11 281448.765 2035-02-12 12:00:00\n3 2035-02-16 07:02:09 277070.841 2035-02-19 12:00:00\n4 2035-03-15 05:46:02   6410.348 2035-03-15 07:32:52\n\n\nThere three instances (2,9 and 16 Feb) where Snapper Snatcher stayed at the Ghoti Preserve for over 3 days. These are the instances where SouthSeafood Express Corp’s Snapper Snatcher conducted IUU Fishing in Ghoti Preserve.\n\n\n\n\nThe Questions:\n\nHow did fishing activity change after SouthSeafood Express Corp was caught?\nWhat new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\nIn order to understand the change in fishing activities, we first have to determine the date where SouthSeafood Express Corp was caught. We will use this timeline as the\nThe final activities of SouthSeafood’s vessels are on 2035-05-16 (snappersnatcher7be) and 2035-05-16 (roachrobberdb6) according to the transponder pings. Hence, we can conclude that the SouthSeafood is caught for illegal fishing, and had ceased operating its fishing vessels since 2035-05-16.\n\n\n\nFirstly, we take a look at the species caught across the months (Feb to Nov 2035).\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;%\n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\noceanus_heatmap &lt;- ggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal() +\n  geom_vline(xintercept = \"May\",color = 'red', linetype = 'dashed') +\n  annotate(\"text\", x = \"May\" , y = \"Offidiaa\", label = \"SouthSeafood caught\", angle = 90, vjust = -0.5, hjust = 0.5, color = \"red\")\n\n\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nspecies_plot &lt;-ggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\noceanus_heatmap / species_plot\n\n\n\n\n\n\n\n\nFor recapitulation, we know that Sockfish, Offidiaa, and Helenaa are fish species that are unique to the three Preserves. From the two plots above, we can derive initial conclusion that there is an usual increase in Sockfish catch after SouthSeafood was caught in mid-May. We also see a minor increase in Helenaa between Jun to Aug, and later in Oct to Nov. The spike in Offidiaa catch begins in Sep and grows gradually to Nov. \nCombining the information above, we can make the following two hypothesis about the changes in fishing activities in Oceanus after SouthSeafood was caught:\n\nThe fishing vessels switched to Don Limpet Preserve for IUU fishing. Tell tale sign is the increase in Sockfish catch, which is species unique to Don Limpet Preserve. This also explains the slight increase in Helena catch from Jun. \nThe fishing vessels moved into Ghoti Preserves from Sep onwards for IUU fishing. Tell tale sign is the increase in Offidia catch from Sep, which is species unique to Ghoti Preserve.\n\nFor confirmation, we take a look at the changes to OVLS Transponder Ping, comparing the total pings to various Fishing Grounds and Preserves month by month.\n\ntransponder_ping_edge_long &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(source, target, month) %&gt;% \n  group_by(source, month) %&gt;% \n  summarize(n = n()) \n\n\ntransponder_ping_edge_long %&gt;% \n  mutate(month = as.factor(month)) %&gt;% \n  newggslopegraph(month,n, source,\n                Title = \"Changes in Visit Frequency\",\n                SubTitle = \"across Feb to Nov 2035\",\n                Caption = \"Prepared by: Liang Xiuhao\")\n\n\n\n\n\n\n\n\nIn the line graph below, we observe that the overall fishing vessels activities in the fishing ground and preserves dropped.\n\naverage &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;%\n  mutate(month = month(time)) %&gt;% \n  summarise(average = (n()/10))\n\ntransponder_ping_edge %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  group_by(month) %&gt;% \n  summarise(n = as.numeric(n())) %&gt;%\n  ggplot(aes(x = month, y = n)) + \n  geom_line(color = \"blue\") +  \n  geom_point(size = 4, color = \"blue\") +\n  geom_text(aes(label = n), \n            vjust = -1,\n            size = 3) +\n  labs(title = \"Visit Frequency to All Fishing Grounds and Preserves by Month\",\n       x = \"Month\",\n       y = \"Frequency\") +\n  geom_hline(average, \n             yintercept = as.numeric(average), \n             color=\"black\",\n             linetype = 6) +\n  geom_point(x = 5, y = 13366,\n             size = 4, color = \"red\") +\n  geom_text(aes(x = 5, y = 13366, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = -0.2,\n            size = 3) +\n  geom_text(aes(x = 4.5, y = 12000, label = \"Monthly Average = 11854\"),\n            color = \"black\",\n            size = 3) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nDerive monthly transponder ping:\n\nmonthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(source, target, month) %&gt;% \n  group_by(source, month) %&gt;% \n  summarize(n = n()) \n\n\nmonthly_transponder_ping$month &lt;- factor(monthly_transponder_ping$month)\nmonthly_transponder_ping$source &lt;- factor(monthly_transponder_ping$source,\n                                             levels = c(\"Ghoti Preserve\", \n                                                        \"Nemo Reef\",\n                                                        \"Don Limpet Preserve\",\n                                                        \"Cod Table\",\n                                                        \"Wrasse Beds\",\n                                                        \"Tuna Shelf\"))\n\nhline.data &lt;- monthly_transponder_ping %&gt;% \n  group_by(source) %&gt;%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_transponder_ping , aes(x = month, \n                                      y = n, \n                                      group = source, \n                                      color = source)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ source, scales = \"free_y\") +  # Facet by 'source'\n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"SouthSeafood caught\"), \n            hjust = 1.5, vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2)\n\n\n\n\n\n\n\n\nFrom the plot above, we can see that after SouthSeafood was caught in mid-May, there is a drop in activities for all the fishing grounds and preserves immediately after mid-May, except for the increase in Don Limpet Preserve, from 1 in Mar and Jun to 2 observations in Aug. \nLet’s observe for month to month if the dwell time increase for Don Limpet Preserve.\n\ndon_monthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, dwell, time) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  filter(source == \"Don Limpet Preserve\") %&gt;%\n  group_by(month) %&gt;% \n  summarise(dwell_total = sum(dwell)) %&gt;%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Don Limpet by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 6, y = 7500, \n            angle = 15,\n            hjust = -0.3, vjust = -1.5, \n            color = \"black\", size = 4)\n\n\nnemo_monthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, dwell, time) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  filter(source == \"Nemo Reef\") %&gt;%\n  group_by(month) %&gt;% \n  summarise(dwell_total = sum(dwell)) %&gt;%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Nemo Reef by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 5, y = 12500000, \n            angle = -15,\n            hjust = 0.3, \n            color = \"black\", size = 4)\n\n\nghoti_monthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, dwell, time) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  filter(source == \"Ghoti Preserve\") %&gt;%\n  group_by(month) %&gt;% \n  summarise(dwell_total = sum(dwell)) %&gt;%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Ghoti by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 8, y = 5000000, \n            angle = -5, \n            color = \"black\", size = 4)\n\n\nnemo_monthly_transponder_ping/ghoti_monthly_transponder_ping\n\n\n\n\n\n\n\n\nFrom the above plots, we observe that for Nemo Reef and Ghoti Preserve, the trend is downards for the amount of time spent by the fishing vessels.\n\nfishing_vessels_in_don &lt;- transponder_ping_edge %&gt;% \n  filter(source == \"Don Limpet Preserve\") %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(target, dwell, date_added, time) %&gt;% \n  mutate(end_time = dwell + time) %&gt;% \n  arrange(time)\nfishing_vessels_in_don\n\n                   target    dwell          date_added                time\n1    yellowperchpiratec59 7413.772 2035-03-04 16:50:54 2035-03-03 16:50:54\n2 arcticgraylingangler094 5037.287 2035-06-20 06:00:00 2035-06-18 06:00:00\n3    whitefishwrangler7df 6149.014 2035-06-20 06:00:00 2035-08-18 06:00:00\n4       bluegillbandita5f 4571.235 2035-08-29 06:00:00 2035-08-27 06:00:00\n             end_time\n1 2035-03-03 18:54:28\n2 2035-06-18 07:23:57\n3 2035-08-18 07:42:29\n4 2035-08-27 07:16:11\n\n\nThere are only 4 records of visits through the OVLS to Don Limpet, once in Mar and Jun, for about 1.5 to 2hrs each, and another 2 in Aug, for about 1.25 to 1.75 hrs each. These record is high inconguent to the growing number of Sockfish that are found in the delivery report from May onwards."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#mini-challenge-2-creating-signatures-for-geo-temporal-patterns",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#mini-challenge-2-creating-signatures-for-geo-temporal-patterns",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Mini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\nThe details of the mini challenge can be found here."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#tasks-and-questions",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#tasks-and-questions",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "FishEye analysts need your help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. Your task is to develop new visual analytics tools and workflows that can be used to discover and understand signatures of different types of behavior. Can you use your tool to visualize a signature of SouthSeafood Express Corp’s illegal behavior? FishEye needs your help to develop a workflow to find other instances of illegal behavior.\n\nFishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\nDevelop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\nTo support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\nHow did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf,\n               patchwork, CGPfunctions,\n               ggHoriPlot)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-the-data",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#loading-the-data",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Loading the .json data using jsonlite package.\n\nmc2_data &lt;- fromJSON(\"data/MC2/mc2.json\")\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\noceanus_map &lt;- read_sf(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\")\n\nLoading the oceanus map:\n\nggplot(oceanus_map) +\n  geom_sf(color = \"black\",\n          ) +\n  theme_void() +\n  geom_sf_text(aes(label = Name), size = 2,\n               vjust = 1.5)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#extracting-the-tibbles-for-nodes-and-links",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#extracting-the-tibbles-for-nodes-and-links",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "mc2_nodes_raw &lt;- as_tibble(mc2_data$nodes)\n\n\nmc2_edges_raw &lt;- as_tibble(mc2_data$links)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#checking-for-missing-values-in-data",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#checking-for-missing-values-in-data",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "colSums(is.na(mc2_nodes_raw))\n\n                type      _last_edited_by          _date_added \n                   0                    0                    0 \n   _last_edited_date          _raw_source           _algorithm \n                   0                    0                    0 \n                name                   id                 Name \n                5627                    0                 5317 \n         Description           Activities                 kind \n                5623                    0                 5613 \n            qty_tons                 date         flag_country \n                 330                  330                 5341 \n             company              tonnage       length_overall \n                5458                 5359                 5354 \n               style fish_species_present \n                5635                    0 \n\n\n\ncolSums(is.na(mc2_edges_raw))\n\n             type              time             dwell   _last_edited_by \n                0             13101             13101                 0 \n      _date_added _last_edited_date       _raw_source        _algorithm \n                0                 0                 0                 0 \n           source            target               key              date \n                0                 0                 0            258542 \n      data_author          aphorism  holiday_greeting            wisdom \n           269156            269669            270639            269719 \nsaying of the sea \n           269750"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#parsing-the-time-with-lubridate",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#parsing-the-time-with-lubridate",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "As the _date_added and _last_edited_date contains a mixture of format, we first extract the date in “yyyy-mm-dd” format using substr.\n\nmc2_nodes_raw &lt;- mc2_nodes_raw |&gt; \n  mutate(`_date_added` = substr(`_date_added`,1,10)) |&gt; \n  mutate(`_date_added` = ymd(`_date_added`)) |&gt; \n  mutate(`_last_edited_date` = substr(`_last_edited_date`,1,10)) |&gt; \n  mutate(`_last_edited_date` = ymd(`_last_edited_date`)) |&gt; \n  mutate(date = ymd(date))\n\n\nmc2_edges_raw &lt;- mc2_edges_raw %&gt;% \n  mutate(`_date_added` = substr(`_date_added`,1,10)) %&gt;% \n  mutate(`_date_added` = ymd(`_date_added`)) %&gt;% \n  mutate(`_last_edited_date`= substr(`_last_edited_date`,1,10)) %&gt;% \n  mutate(`_last_edited_date` = ymd(`_last_edited_date`)) %&gt;% \n  mutate(time = ymd_hms(time))\n\nUnderstanding the Data\n\nunique_nodes_type &lt;- mc2_nodes_raw |&gt;  distinct(type)\nunique_nodes_type\n\n# A tibble: 12 × 1\n   type                          \n   &lt;chr&gt;                         \n 1 Entity.Commodity.Fish         \n 2 Entity.Location.City          \n 3 Entity.Document.DeliveryReport\n 4 Entity.Vessel.FishingVessel   \n 5 Entity.Vessel.Other           \n 6 Entity.Vessel.Ferry.Passenger \n 7 Entity.Vessel.CargoVessel     \n 8 Entity.Vessel.Ferry.Cargo     \n 9 Entity.Vessel.Research        \n10 Entity.Vessel.Tour            \n11 Entity.Location.Point         \n12 Entity.Location.Region        \n\n\n\nunique_edges_type &lt;- mc2_edges_raw |&gt;  distinct(type)\nunique_edges_type\n\n# A tibble: 3 × 1\n  type                                \n  &lt;chr&gt;                               \n1 Event.TransportEvent.TransponderPing\n2 Event.Transaction                   \n3 Event.HarborReport"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#extracting-the-required-columns-for-each-graph",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#extracting-the-required-columns-for-each-graph",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this section, we will extract the required column for the following graphs:\n\nVessel Movements\nHarbor Reports\nHarbor Import Records\n\n\n\nVessel Movements: Oceanus is outfitted with a transponder/ping system named the Oceanus Vessel Locator System (OVLS).  Vessels are outfitted with a transponder and periodic ‘pings’ from base-stations results in a report of vessel locations at any time.  The raw ping granularity is at the minute-level but post-processing has converted it into visit/dwell times. OVLS is generally reliable, though vessel records may be missing for a variety of reasons.\nNode/Edge types and properties present\n\nEntity.Vessel: Description of the vessel\nEntity.Location: Description of a geographic location\nEvent.TransponderPing: Links a vessel to a location\n\nFirst, we will extract the relevant nodes, namely the vessels and locations from mc2_nodes. As we are only concerned about the fishing vessels, we will only extract values matching “Vessel” in entity2 column and values matching “FishingVessel” in entity3 column. For locations, we will match values of “Location” in entity2 column, and match values of “City”, “Point” and “Region” in entity3 column.\n\nvessel_mvmt_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 %in% c(\"Vessel\",\"Location\")) %&gt;% \n  filter(entity3 %in% c(\"FishingVessel\",\"City\",\"Point\",\"Region\"))\n\nNext, we will extract the vessel movement edges from mc2_edges, by filtering the “TransponderPing” from event3 column.\n\nvessel_mvmt_edges &lt;- mc2_edges %&gt;% \n  filter(event3 %in% c(\"TransponderPing\"))\n\n\n\n\nHarbor Reports: Harbor masters regularly report the vessels found in their purview anytime during the day.  This data is derived from a different system than OVLS (see “Vessel Movements”), though the data overlaps.  Harbor Reports are provided on a different schedule from different harbors. Since no harbor reports every day, this data has lower temporal granularity than vessel movement data. Additionally, the Harbor Master is also responsible for proximate navigational beacon(s), so this data has lower spatial granularity as well.  However, the list of vessels observed is considered canonical.\nNode/edge types present:\n\nEntity.Vessel\nEntity.location\nEvent.HarborReport\n\nSince the node type are the same as the vessel movements, we will make a copy of the node from vessel movement nodes.\n\nharbor_report_nodes &lt;- vessel_mvmt_nodes\n\nNext, we will extract the harbor report edges from mc2_edges, by filtering the “HarborReport” from event3 column.\n\nharbor_report_edges &lt;- mc2_edges %&gt;% \n  filter(event2 %in% c(\"HarborReport\"))\n\n\n\n\nHarbor Import Records: Vessels deliver cargo to the ports, and that cargo is brought into Oceanus.  These records reflect the goods that *leave* the harbor to go to businesses in Oceanus or to be exported.  It was filtered pre-ingest to focus on the delivery of raw fish.  Because it is raw, fish leave the port quickly (generally one day after delivery).  Due to clerical error, the records purchased by FishEye do not include the vessel that delivered the cargo.\nNode/Edge types present:\n\nEntity.location\nEntity.Commodity.Fish\nEntity.Document.DeliveryReport\nEvent.Transaction\n\nFirst, we will extract the relevant nodes, namely the location, commodity.fish and document.delivery report from mc2_nodes.\n\nharbor_import_records_nodes &lt;- mc2_nodes %&gt;% \n  filter(entity2 %in% c(\"Location\",\"Commodity\",\"Document\"))\n\nNext, we will extract harbor import records edges, by filtering the event2 with value of “Transaction”.\n\nharbor_import_records_edges &lt;- mc2_edges %&gt;% \n  filter(event2 == \"Transaction\")\n\nBefore we move on to exploring the data, we will save the 3 sources edges and nodes tibble data frame as R rds format in the data/rds folder:\n\nwrite_rds(vessel_mvmt_nodes, \"data/rds/vessel_mvmt_nodes.rds\")\nwrite_rds(vessel_mvmt_edges, \"data/rds/vessel_mvmt_edges.rds\")\nwrite_rds(harbor_report_nodes, \"data/rds/harbor_report_nodes.rds\")\nwrite_rds(harbor_report_edges, \"data/rds/harbor_report_edges.rds\")\nwrite_rds(harbor_import_records_nodes, \"data/rds/harbor_import_records_nodes.rds\")\nwrite_rds(harbor_import_records_edges, \"data/rds/harbor_import_records_edges.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#flow-of-fishing-vessels",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#flow-of-fishing-vessels",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports.\n\ntransaction_edges &lt;- mc2_edges_raw %&gt;% \n  filter(type == \"Event.Transaction\")\n\n\ntransaction_edges_agg &lt;-\n  transaction_edges  %&gt;%\n  distinct() %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\n\nfishing_vessels_nodes &lt;- mc2_nodes_raw %&gt;% \n  filter(type == \"Entity.Vessel.FishingVessel\")\nfishing_vessels_nodes \n\n# A tibble: 178 × 20\n   type        `_last_edited_by` `_date_added` `_last_edited_date` `_raw_source`\n   &lt;chr&gt;       &lt;chr&gt;             &lt;date&gt;        &lt;date&gt;              &lt;chr&gt;        \n 1 Entity.Ves… Olokun Daramola   2034-05-18    2034-09-20          Oceanus Vess…\n 2 Entity.Ves… Harvey Janus      2034-01-03    2034-05-19          Oceanus Vess…\n 3 Entity.Ves… Harvey Janus      2034-12-22    2035-03-29          Oceanus Vess…\n 4 Entity.Ves… Harvey Janus      2034-03-11    2034-07-23          Oceanus Vess…\n 5 Entity.Ves… Junior Shurdlu    2034-08-15    2034-11-01          Oceanus Vess…\n 6 Entity.Ves… Junior Shurdlu    2033-10-14    2034-02-28          Oceanus Vess…\n 7 Entity.Ves… Harvey Janus      2033-06-14    2033-09-10          Oceanus Vess…\n 8 Entity.Ves… Harvey Janus      2033-11-15    2034-01-16          Oceanus Vess…\n 9 Entity.Ves… Jack Inch         2033-08-01    2033-08-16          Oceanus Vess…\n10 Entity.Ves… Jack Inch         2034-04-09    2034-06-11          Oceanus Vess…\n# ℹ 168 more rows\n# ℹ 15 more variables: `_algorithm` &lt;chr&gt;, name &lt;chr&gt;, id &lt;chr&gt;, Name &lt;chr&gt;,\n#   Description &lt;chr&gt;, Activities &lt;list&gt;, kind &lt;chr&gt;, qty_tons &lt;dbl&gt;,\n#   date &lt;date&gt;, flag_country &lt;chr&gt;, company &lt;chr&gt;, tonnage &lt;int&gt;,\n#   length_overall &lt;int&gt;, style &lt;chr&gt;, fish_species_present &lt;list&gt;\n\n\nThere is a total of 178 Fishing vessels in Oceanus."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#fishing-ground-locations",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#fishing-ground-locations",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "fishing_ground &lt;- mc2_nodes_raw %&gt;% \n  filter(kind == \"Fishing Ground\") \n\n\nnon_fishing_ground &lt;- mc2_nodes_raw %&gt;%  \n  filter(kind == \"Ecological Preserve\") \n\nThere are three fishing grounds:\n1. Cod Table\n2. Wrasse Beds\n3. Tuna Shelf\nFishing outside these fishing grounds are considered illegal fishing.\n\ncargo_vessels &lt;- mc2_nodes_raw %&gt;%  \n  filter(type == \"Entity.Vessel.CargoVessel\") %&gt;% \n  arrange(desc(tonnage))\ncargo_vessels\n\n# A tibble: 100 × 20\n   type        `_last_edited_by` `_date_added` `_last_edited_date` `_raw_source`\n   &lt;chr&gt;       &lt;chr&gt;             &lt;date&gt;        &lt;date&gt;              &lt;chr&gt;        \n 1 Entity.Ves… Melinda Manning   2035-02-01    2035-02-17          Oceanus Vess…\n 2 Entity.Ves… Harvey Janus      2034-12-02    2034-12-22          Oceanus Vess…\n 3 Entity.Ves… Olokun Daramola   2035-02-13    2035-03-02          Oceanus Vess…\n 4 Entity.Ves… Harvey Janus      2034-12-03    2034-12-15          Oceanus Vess…\n 5 Entity.Ves… Harvey Janus      2035-02-20    2035-03-03          Oceanus Vess…\n 6 Entity.Ves… Harvey Janus      2035-01-06    2035-01-21          Oceanus Vess…\n 7 Entity.Ves… Jack Inch         2035-02-01    2035-02-20          Oceanus Vess…\n 8 Entity.Ves… Jack Inch         2034-11-08    2034-11-21          Oceanus Vess…\n 9 Entity.Ves… Jack Inch         2034-12-12    2034-12-28          Oceanus Vess…\n10 Entity.Ves… Jack Inch         2034-12-31    2035-01-12          Oceanus Vess…\n# ℹ 90 more rows\n# ℹ 15 more variables: `_algorithm` &lt;chr&gt;, name &lt;chr&gt;, id &lt;chr&gt;, Name &lt;chr&gt;,\n#   Description &lt;chr&gt;, Activities &lt;list&gt;, kind &lt;chr&gt;, qty_tons &lt;dbl&gt;,\n#   date &lt;date&gt;, flag_country &lt;chr&gt;, company &lt;chr&gt;, tonnage &lt;int&gt;,\n#   length_overall &lt;int&gt;, style &lt;chr&gt;, fish_species_present &lt;list&gt;\n\n\nThere are 100 cargo vessels, with tonnage ranging from 2,100 to 76,300."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#which-fishing-vessels-frequent-the-fishing-sites",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#which-fishing-vessels-frequent-the-fishing-sites",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "mc2_edges_raw |&gt; \n  filter(source %in% c(\"Cod Table\",\"Wrasse Beds\",\"Tuna Shelf\")) |&gt; \n  group_by(target, source) |&gt; \n  summarise(n = n()) |&gt; \n  arrange(desc(n))\n\n# A tibble: 557 × 3\n# Groups:   target [287]\n   target                    source          n\n   &lt;chr&gt;                     &lt;chr&gt;       &lt;int&gt;\n 1 saltyskippera9e           Wrasse Beds  1460\n 2 rainbowtroutraider4d0     Wrasse Beds  1413\n 3 europeanperchpirated9b    Tuna Shelf   1265\n 4 pinksalmonpirate2a3       Wrasse Beds  1256\n 5 tenchtaker595             Wrasse Beds  1183\n 6 pollockpirate212          Wrasse Beds  1147\n 7 fishtracker03e            Wrasse Beds  1115\n 8 yellowfintunataker08b     Tuna Shelf   1079\n 9 halibuthero9b9            Tuna Shelf   1059\n10 tigermuskellungemaster012 Wrasse Beds  1048\n# ℹ 547 more rows"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#which-fishing-vessels-frequent-the-non-fishing-sites",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#which-fishing-vessels-frequent-the-non-fishing-sites",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "mc2_edges_raw  %&gt;%  \n  filter(source %in% c(\"Ghoti Preserve\",\"Nemo Reef\", \"Don Limpet Preserve\")) %&gt;% \n  group_by(target, source) %&gt;%  \n  summarise(n = n()) %&gt;% \n  arrange(desc(n))\n\n# A tibble: 248 × 3\n# Groups:   target [219]\n   target                 source                  n\n   &lt;chr&gt;                  &lt;chr&gt;               &lt;int&gt;\n 1 europeanperchpirated9b Nemo Reef            1040\n 2 manatee17ea            Don Limpet Preserve   884\n 3 yellowfintunataker08b  Nemo Reef             863\n 4 anchovyassaulterb1c    Nemo Reef             843\n 5 halibuthero9b9         Nemo Reef             833\n 6 bluefishbandit8ec      Nemo Reef             782\n 7 herringharpooner843    Nemo Reef             763\n 8 pacificcodcapturer81c  Nemo Reef             719\n 9 welscatfishwrangler6ae Nemo Reef             613\n10 pompanoplunderere5d    Nemo Reef             596\n# ℹ 238 more rows"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Ex 01",
    "section": "",
    "text": "For the identification of sub-market, you can navigate straight to 2.3.3 Identifying the sub-market\nFor the final product, you can navigate straight to 3.0 Data Visualisation.\nIf not, you can proceed to enjoy reading the step by step thought process for this visualisation.\n\n\n\n\nThere are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n\nAssuming the role of a graphical editor of a media company, you are requested to prepare minimum two and maximum three data visualisation to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.\n\n\n\n\n\n\nT he pac::p_load() function to load the required R packages in the working environment. The following packages are used in this set up:\n\nggthemes: Extra themes, geoms, and scales for ggplot2.\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\ncolorspace:\nggiraph: for making ‘ggplot’ graphics interactive.\nplotly: R library for plotting interactive statistical graphs.\npatchwork: specially designed for combining separate ggplot2 graphs into a single figure.\nlubridate: for easy and fast parsing of Date / Time\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggdist: a ggplot2 extension specially design for visualising distribution and uncertainty\n\n\n# load tidyverse from pacman\npacman::p_load(tidyverse,dplyr,ggridges,\n               ggthemes,colorspace,ggiraph,\n               plotly,patchwork,lubridate, \n               ggrepel,ggdist)\n\n\n\n\nFive sets of data are provided for this exercise:\n\n2023 Quarter 1 Residential Transaction: ResidentialTransaction20240308160536.csv\n2023 Quarter 2 Residential Transaction: ResidentialTransaction20240308160736.csv\n2023 Quarter 3 Residential Transaction: ResidentialTransaction20240308161009.csv\n2023 Quarter 4 Residential Transaction: ResidentialTransaction20240308161109.csv\n2024 Quarter 1 Residential Transaction: ResidentialTransaction20240414220633.csv\n\nAll five sets of data consists of past transactions between Q1 of 2023 to Q1 of 2024, with 21 variables that will be explored in detail after the data sets are imported.\n\n# load transaction data using readr, part of tidyverse package\ndata.23Q1 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\ndata.23Q2 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\ndata.23Q3 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\ndata.23Q4 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\ndata.24Q1 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\nTo add new column Quarter into each of the csv file.\n\ndata.23Q1$Quarter &lt;- rep('23Q1',nrow(data.23Q1))\ndata.23Q2$Quarter &lt;- rep('23Q2',nrow(data.23Q2))\ndata.23Q3$Quarter &lt;- rep('23Q3',nrow(data.23Q3))\ndata.23Q4$Quarter &lt;- rep('23Q4',nrow(data.23Q4))\ndata.24Q1$Quarter &lt;- rep('24Q1',nrow(data.24Q1))\n\nCombining all the data set into one\n\ndf &lt;- rbind(data.23Q1,data.23Q2,data.23Q3,data.23Q4,data.24Q1)\n\nTo have a basic understanding of all 22 variables, glimpse() is used with 2024 Q1 data. We can see that there are 21 columns, with the following data types:\n\ndoubles: Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM), Unit Price ($ PSM), Number of Units\ncharacters: the rest of the 16 variables, including Quarter\n\nInterestingly, Nett Price is classified as characters, as it contains - character, although the rest of the columns should return doubles like Transacted Price ($)\n\nThe CodeThe Output\n\n\n\n# have a basic understanding for all 22 variables\nglimpse(df)\n\n\n\n\n\nRows: 26,806\nColumns: 22\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n$ Quarter                       &lt;chr&gt; \"23Q1\", \"23Q1\", \"23Q1\", \"23Q1\", \"23Q1\", …\n\n\n\n\n\n\n\n\nOn top of the data types that is automatically assigned by R to help the program know how to process it, we can split the data into 4 types of data category to help ourselves for future analytics application. You can refer to the FAQ, Data Dictionary and Methodology in URA website.\n\n\n\n\n\n\n\n\n\nVariable\nType\nAppropriate Scale\nRemarks\n\n\n\n\nProject Name\nQualitative / Nominal\nDiscrete\n\n\n\nTransacted Price ($)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nArea (SQFT)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nUnit Price ($ PSF)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nSales Date\nDate / Ordinal\nDiscrete\n\n\n\nAddress\nQualitative / Nominal\nDiscrete\n\n\n\nType of Sale\nQualitative / Nominal\nDiscrete\n\n\n\nType of Area\nQualitative / Nominal\nDiscrete\n\n\n\nArea (SQM)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nUnit Price ($ PSF)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nNett Price($)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nProperty Type\nQualitative/ Nominal\nDiscrete\n\n\n\nNumber of Units\nQuantitative/ Numerical Discrete\nDiscrete\n\n\n\nTenure\nNominal + Date / Ordinal\nNone + Discrete\nMixture of remaining lease date and tenure type and duration\n\n\nCompletion Date\nNominal + Date / Ordinal\nNone + Discrete\nMixture of “Uncomplete” status and completion date.\n\n\nPurchaser Address Indicator\nQualitative / Nominal\nDiscrete\n\n\n\nPostal Code\nQualitative / Nominal\nDiscrete\n\n\n\nPostal District\nQualitative / Nominal\nDiscrete\n\n\n\nPostal Sector\nQualitative / Nominal\nDiscrete\n\n\n\nPlanning Region\nQualitative / Nominal\nDiscrete\n\n\n\nPlanning Area\nQualitative / Nominal\nDiscrete\n\n\n\nQuarter\nDate / Ordinal\nDiscrete\nCreated for ease of data analysis\n\n\n\nNotes\n\nContextually, some of the variables could be classified under ordinal. For example, I can choose to fill in the order for Purchaser Address Indicator as Private category is higher order than HDB category. The context is purchaser that address is Private is likely to be a person with higher Social Economic Status (SES) compared to a purchaser with HDB as address. Same could be applied to Postal Code, Postal District, Postal Sector, Planning Region and Planning Area.\nSpecial Case: Tenure is still a character data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this. Tenure date could also be classified under continuous data for more granularity. This variable will be a mixture of nominal data type with categories like “Freehold”, and also quantitative data type using its Tenure date.\nNett Price($) is still a character data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this.\nSpecial Case: Completion Date is classified as character, but a quick look at the data df, we will realise that this variable is a mix of quantitative and qualitative data type of Uncomplete and actual date of completion, which could be converted and analyse as doubles.\n\nFor simplicity of data analysis\n1. Transacted Price ($) and Nett Price($) are similar. In this analysis, we will use Transacted Price ($) for simplicity, as Nett Price($) has fair amount of missing data, and it is prices after deducting the value of the indirect discounts or benefits, and not representative for all transactions.\n\nArea (SQFT) and Area (SQM), and Unit Price ($ PSF) and Unit Price ($ PSM) are similar measures in different unit. We will use Area (SQFT) and Unit Price ($ PSF)\n\nNext we look at the basic statistics of the current data using summary()\n\nThe OutputThe Code\n\n\n\n\n Project Name       Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)\n Length:26806       Min.   :   440000    Min.   :   322.9   Min.   : 138      \n Class :character   1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384      \n Mode  :character   Median :  1660000    Median :   990.3   Median :1762      \n                    Mean   :  2143286    Mean   :  1191.6   Mean   :1852      \n                    3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260      \n                    Max.   :392180000    Max.   :144883.4   Max.   :5756      \n                                                                              \n  Sale Date           Address          Type of Sale       Type of Area      \n Length:26806       Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   Area (SQM)      Unit Price ($ PSM) Nett Price($)      Property Type     \n Min.   :   30.0   Min.   : 1484      Length:26806       Length:26806      \n 1st Qu.:   67.0   1st Qu.:14893      Class :character   Class :character  \n Median :   92.0   Median :18966      Mode  :character   Mode  :character  \n Mean   :  110.5   Mean   :19930                                           \n 3rd Qu.:  121.0   3rd Qu.:24327                                           \n Max.   :13460.0   Max.   :61962                                           \n NA's   :6                                                                 \n Number of Units     Tenure          Completion Date   \n Min.   : 1.000   Length:26806       Length:26806      \n 1st Qu.: 1.000   Class :character   Class :character  \n Median : 1.000   Mode  :character   Mode  :character  \n Mean   : 1.005                                        \n 3rd Qu.: 1.000                                        \n Max.   :60.000                                        \n                                                       \n Purchaser Address Indicator Postal Code        Postal District   \n Length:26806                Length:26806       Length:26806      \n Class :character            Class :character   Class :character  \n Mode  :character            Mode  :character   Mode  :character  \n                                                                  \n                                                                  \n                                                                  \n                                                                  \n Postal Sector      Planning Region    Planning Area        Quarter         \n Length:26806       Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n\n\n\n\n\n# data summary\nsummary(df)\n\n\n\n\nFrom the continuous data above, we can conclude that there is a possibility of extreme outliers. The Number of Units has a max of 60, while the 3rd Quartile is 1.000. Let’s examine the data by sorting it in descending order using arrange(desc()) and take a look at data with Number of Units, as it greatly affect the analysis of Transaction Price ($).\n\ndf %&gt;%\n  filter(`Number of Units` &gt; 1) %&gt;%\n  arrange(desc(`Number of Units`)) \n\n# A tibble: 12 × 22\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n   &lt;chr&gt;                                &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n 1 MEYER PARK                       392180000       144883.                 2707\n 2 BAGNALL COURT                    115280000        68491.                 1683\n 3 KEW LODGE                         66800000        25177                  2653\n 4 KARTAR APARTMENTS                 18000000         6964.                 2585\n 5 MONDO MANSION BUIL…                6280000         5490.                 1144\n 6 N.A.                              10600000         6747.                 1571\n 7 N.A.                              61080008        32149.                 1900\n 8 N.A.                              32200000        14123.                 2280\n 9 N.A.                               6150000         4342.                 1416\n10 EAST VIEW GARDEN                   6100000         8338.                  732\n11 N.A.                               8000000         3659.                 2187\n12 CLAYMORE PLAZA                     7000000         4209.                 1663\n# ℹ 18 more variables: `Sale Date` &lt;chr&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;, Quarter &lt;chr&gt;\n\n\nWe have 12 rows that have transactions containing more than 1 unit sold, and a check on the Address shows that there are 5 sales that are en bloc cases which should be remove from the analysis. These en bloc cases are likely sales to companies for purpose of redevelopment rather than individual purchasers. See this link on the Meyer Park en bloc transaction. Otherwise, those 7 cases of transactions with more than one unit sold should be included as are likely the cases of purchase of multiple units or the purchase of multiple adjacent plots of land.\n\n\n\nFor the follow code chunk, we aim to remove all the enbloc sales, including the 5 transactions that we have found in section 2.3. While we have no idea if there are more than 5 cases of en bloc sales, the follow code chunk will effectively remove all the rows with the string “ENBLOC” in Address column.\n\ndf.c &lt;- df %&gt;%\n  filter(!grepl('ENBLOC', df$Address))\ndf.c\n\n# A tibble: 26,801 × 22\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n   &lt;chr&gt;                                &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n 1 THE REEF AT KING'S…                2317000          883.                 2625\n 2 URBAN TREASURES                    1823500          883.                 2066\n 3 NORTH GAIA                         1421112         1076.                 1320\n 4 NORTH GAIA                         1258112         1033.                 1218\n 5 PARC BOTANNIA                      1280000          872.                 1468\n 6 NANYANG PARK                       5870000         3323.                 1767\n 7 PALMS @ SIXTH AVEN…                4950000         4521.                 1095\n 8 N.A.                               3260000         1555.                 2096\n 9 WHISTLER GRAND                      850000          441.                 1926\n10 NORTHOAKS                          1268000         1604.                  791\n# ℹ 26,791 more rows\n# ℹ 18 more variables: `Sale Date` &lt;chr&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;, Quarter &lt;chr&gt;\n\n\nIn the df.c tibble, it showed that 5 rows had been removed. Now there is only 26,801 rows instead of the original 26,806 rows in the initial df. This confirm that there are only 5 en bloc sales in the data frame.\n\n\n\nAfter removing the 5 en bloc sales, we are still left with 7 transactions that has between 2 to 4 units sold per transaction. This has caused the Transacted Price ($) to be greatly inflated. In dealing with this, we can (1) choose to divide the Transacted Price ($) by the number of units sold, or (2) remove them from the analysis. In this analysis, we will be using method (2), to remove these transactions from the data set for further analysis. The reason to do so is that we cannot determine at this stage that each unit in the sales are equally priced, or whether each unit has the same Area size.\n\ndf.c &lt;- df.c %&gt;%\n  filter(`Number of Units` &lt;= 1)\n\n\n\n\nLand vs. Strata\nTo lend some background context, you can refer to this link: Landed vs. Strata Landed Basically, Strata means you only owns the property build on this land, but do not own the land itself. Land means you own the land and have more freedom and responsibility in terms of the constructions etc. The application of this knowledge for analysis is that Strata and Land classification can be identify as the sub-markets as owning a piece of land is likely to be more expensive for the purchaser compared to Strata title.\nThe plot below shows the 10 sub-markets in Singapore private housing market.\nLand\n\nApartment\nDetached House\nSemi-Detached House\nTerrace House\n\nStrata\n\nApartment\nCondominium\nDetached House\nExecutive Condominium\nSemi-Detached House\nTerrace House\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.c %&gt;%\n  select(`Transacted Price ($)`, `Type of Area`, `Property Type`) %&gt;%\n  group_by(`Property Type`, `Type of Area`) %&gt;%\n  summarise(`Median Transaction Price ($)` = median(`Transacted Price ($)`, .groups = 'drop')) %&gt;%\n  ggplot(aes(x = `Property Type`, \n             y = `Median Transaction Price ($)`, \n             color = `Type of Area`)) +  # Adding color aesthetic based on Type of Area\n  geom_point() +\n  theme_economist() +\n  theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust=1)) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(color = \"Type of Area\")\n\n\n\n\nConclusion\nFrom the Median Transacted Price plot above, we observe that the 10 sub-markets are distinct in pricing, with Land Type of Area generally priced a lot higher than Strata, especially in the Apartment and Detached House categories.\n\n\n\n\n\n\nIn this section, we would want to focus on the Apartment(Strata) Condominium and Executive Condominium sub-market in Singapore, out of the 10 sub-markets identified in section 2.3.3. As stated in section 1.1 Setting the scene, for families with monthly household income more than S$14,000, they need to turn to the private residential market. However, due limited number of plots to be shown, we will take Condominium as example for the illustrations\nAssumptions and considerations for the selecting the sub-markets to visualise:\n\nAffordability - According to the this article, apartment(Strata), Executive Condominium and Condominium are the next most affordable type of private housing if the family is not eligible to purchase public housing. This corroborate with the Median Transaction Price plot above.\nTarget Audience - The target audience for this graphics will be the public who would like to consider housing option in the private residential market. The target audience are those who’s family household are above the limits and would like to look for relatively affordable housing option in the private residential market as mentioned above in point 1.\nInformation Required - Pricing, Location, Types of Sales, Unit Price, Size of Property\n\n\n\n\n\n\n\nPlot 1: Pricing for non-freehold Condominium\nThis first plot focus on Condominium that are not of Freehold Tenure. Compared to freehold property, these non-freehold Condominiums are relatively lower price. The plot below shows the distribution of Transacted Price ($) in the five Planning Region in Singapore, and reveal the median price of each region varies from 1 to 2 million, with North Region with a tighter spread at a lower price than the other four regions. The Central Region has the highest median at 2 million, with a widest spread. The 4th quantile of the Central Region consists of Transacted Price ($) between 2.5 to just after 9 million. This shows that the Condominiums with Lease are more affordable in the North and East Region in Singapore, with North East and West Region next, and finally the most expensive Condominium would be the ones found in Central Region.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.c %&gt;%\n  filter(`Type of Area` == 'Strata',`Property Type` == 'Condominium', `Quarter` == '24Q1', `Tenure`!= 'Freehold') %&gt;%\n  ggplot(aes(x = `Transacted Price ($)`,\n           y = `Planning Region`,\n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\",\n                       option = \"A\") +\n  scale_x_continuous(name = \"Transacted Price in million ($)\",\n    labels = c(0,1,2,3,4,5,6,7,8,9,10), \n    breaks = c(0,1000000,2000000,3000000,4000000,5000000,6000000,7000000,8000000,9000000,10000000)) +\n  theme_economist() + \n  ggtitle(\"24Q1 Non-Freehold Condo Transacted Price by Planning Region\") +\n  theme(plot.title = element_text(size=12))\n\n\n\n\n\n\n\nPlot 2: Mean and Median Unit Price for non-freehold Condominium\nPlot 2 focus on the mean and median Unit Price ($ PSF) for the non-freehold Condominium in the Central Region. The Mean Unit Price ($ PSF) is represented by the red dot in each of the violin plot and boxplot. While we see a slight rise in the mean and median Unit Price ($ PSF) in 23Q2, where there are more transactions with Unit Price ($ PSF) in the $2,500 range, represented by the bulge at the top of the violin plot. For the rest of the quarters, the mean and median Unit Price ($ PSF) hovers around the range of $2,000. Despite the mean and median are at $2,000 for the 24Q1, there is also a sizable transaction of Unit Price ($ PSF) of $3,000 happening in 24Q1, as represented by the slight bulge at the top of the violin plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarter_means &lt;- df.c %&gt;%\n  filter(`Property Type` == 'Condominium',`Planning Region` == \"Central Region\", `Tenure`!= 'Freehold') %&gt;%\n  group_by(Quarter) %&gt;%\n  summarise(mean_uprice = mean(`Unit Price ($ PSF)`))\n\ndf.c %&gt;%\n  filter(`Property Type` == 'Condominium', `Planning Region` == \"Central Region\",`Tenure`!= 'Freehold') %&gt;%\n  ggplot(aes(y=`Unit Price ($ PSF)`,\n           x=`Quarter`)\n       )+\n  geom_violin() +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  geom_point(data = quarter_means, \n             aes(y = mean_uprice), \n             color = \"red\", \n             size = 3) +\n    scale_y_continuous(labels = scales::comma) +\n  theme_economist() +\n  ggtitle(\"Condominium Unit Price ($ PSF) for Central Region\") \n\n\n\n\n\n\n\nPlot 3: Purchaser Address Indicator for non-freehold Condominium\nPlot 3 focus on the top and bottom 5% of the different types of purchasers for non-freehold Condominium in the Central Region. We assume that the N.A type are purchasers who do not own any property in Singapore. The top 5% of the Private category purchase units priced at $4.5-$9 million. For HDB and N.A categories, the top 5% are purchasing units that is priced between $3 to 4 million. Both bottom 5% Private and HDB categories purchase unit of $1 million, while the bottom 5% N.A category are buying unit just above $1 million. The plausible reason is that purchaser in N.A. category may want to buy a unit for their own stay since they do not own any other properties. Hence, they are paying slightly more for a larger unit relative to other two types of purchasers, who might be buying studio units for rental income.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.c %&gt;%\n  filter(`Property Type` == 'Condominium', `Quarter` == '24Q1', `Planning Region` == \"Central Region\", `Tenure` != 'Freehold') %&gt;%\n  ggplot(aes(x = `Transacted Price ($)`, \n           y = `Purchaser Address Indicator`, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.05, 0.95)\n    ) +\n  scale_fill_manual(\n    name = \"Percentage of Total\",\n    values = c(\"#FF00FFA0\", \"#FFE4E1A0\", \"#0000ffA0\"),\n    labels = c(\"Bottom 5%\", \"5-95%\", \"Top 5%\")\n  ) +\n  theme_ridges()+\n  theme_economist() +\n  theme(plot.title = element_text(size=12)) +\n  scale_x_continuous(name = \"Transacted Price in million ($)\",\n    labels = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), \n    breaks = c(0,1000000,2000000,3000000,4000000,5000000,6000000,7000000,8000000,9000000,10000000,11000000, 12000000, 13000000, 14000000, 15000000)) + \n  ggtitle(\"Central Region Condominium: Purchaser Address Indicator 24Q1\")\n\n\n\n\n\n\n\n\n1. T.S. Kam, R for Visual Analytics Chapter 9 for visualisation of Ridgeline plots with quantile lines.\n2. Claus O. Wilke, Fundamentals of Data Visualization Chapter 2 for understanding and classification of variables.\n3. Stack Overflow, “Filter rows which contain a certain string” for removing en bloc sales from the data frame."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home Ex 01",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n\nAssuming the role of a graphical editor of a media company, you are requested to prepare minimum two and maximum three data visualisation to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#set-up",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#set-up",
    "title": "Take-home Ex 01",
    "section": "",
    "text": "T he pac::p_load() function to load the required R packages in the working environment. The following packages are used in this set up:\n\nggthemes: Extra themes, geoms, and scales for ggplot2.\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\ncolorspace:\nggiraph: for making ‘ggplot’ graphics interactive.\nplotly: R library for plotting interactive statistical graphs.\npatchwork: specially designed for combining separate ggplot2 graphs into a single figure.\nlubridate: for easy and fast parsing of Date / Time\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggdist: a ggplot2 extension specially design for visualising distribution and uncertainty\n\n\n# load tidyverse from pacman\npacman::p_load(tidyverse,dplyr,ggridges,\n               ggthemes,colorspace,ggiraph,\n               plotly,patchwork,lubridate, \n               ggrepel,ggdist)\n\n\n\n\nFive sets of data are provided for this exercise:\n\n2023 Quarter 1 Residential Transaction: ResidentialTransaction20240308160536.csv\n2023 Quarter 2 Residential Transaction: ResidentialTransaction20240308160736.csv\n2023 Quarter 3 Residential Transaction: ResidentialTransaction20240308161009.csv\n2023 Quarter 4 Residential Transaction: ResidentialTransaction20240308161109.csv\n2024 Quarter 1 Residential Transaction: ResidentialTransaction20240414220633.csv\n\nAll five sets of data consists of past transactions between Q1 of 2023 to Q1 of 2024, with 21 variables that will be explored in detail after the data sets are imported.\n\n# load transaction data using readr, part of tidyverse package\ndata.23Q1 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\ndata.23Q2 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\ndata.23Q3 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\ndata.23Q4 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\ndata.24Q1 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\nTo add new column Quarter into each of the csv file.\n\ndata.23Q1$Quarter &lt;- rep('23Q1',nrow(data.23Q1))\ndata.23Q2$Quarter &lt;- rep('23Q2',nrow(data.23Q2))\ndata.23Q3$Quarter &lt;- rep('23Q3',nrow(data.23Q3))\ndata.23Q4$Quarter &lt;- rep('23Q4',nrow(data.23Q4))\ndata.24Q1$Quarter &lt;- rep('24Q1',nrow(data.24Q1))\n\nCombining all the data set into one\n\ndf &lt;- rbind(data.23Q1,data.23Q2,data.23Q3,data.23Q4,data.24Q1)\n\nTo have a basic understanding of all 22 variables, glimpse() is used with 2024 Q1 data. We can see that there are 21 columns, with the following data types:\n\ndoubles: Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM), Unit Price ($ PSM), Number of Units\ncharacters: the rest of the 16 variables, including Quarter\n\nInterestingly, Nett Price is classified as characters, as it contains - character, although the rest of the columns should return doubles like Transacted Price ($)\n\nThe CodeThe Output\n\n\n\n# have a basic understanding for all 22 variables\nglimpse(df)\n\n\n\n\n\nRows: 26,806\nColumns: 22\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n$ Quarter                       &lt;chr&gt; \"23Q1\", \"23Q1\", \"23Q1\", \"23Q1\", \"23Q1\", …\n\n\n\n\n\n\n\n\nOn top of the data types that is automatically assigned by R to help the program know how to process it, we can split the data into 4 types of data category to help ourselves for future analytics application. You can refer to the FAQ, Data Dictionary and Methodology in URA website.\n\n\n\n\n\n\n\n\n\nVariable\nType\nAppropriate Scale\nRemarks\n\n\n\n\nProject Name\nQualitative / Nominal\nDiscrete\n\n\n\nTransacted Price ($)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nArea (SQFT)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nUnit Price ($ PSF)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nSales Date\nDate / Ordinal\nDiscrete\n\n\n\nAddress\nQualitative / Nominal\nDiscrete\n\n\n\nType of Sale\nQualitative / Nominal\nDiscrete\n\n\n\nType of Area\nQualitative / Nominal\nDiscrete\n\n\n\nArea (SQM)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nUnit Price ($ PSF)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nNett Price($)\nQuantitative/ Numerical Continuous\nContinuous\n\n\n\nProperty Type\nQualitative/ Nominal\nDiscrete\n\n\n\nNumber of Units\nQuantitative/ Numerical Discrete\nDiscrete\n\n\n\nTenure\nNominal + Date / Ordinal\nNone + Discrete\nMixture of remaining lease date and tenure type and duration\n\n\nCompletion Date\nNominal + Date / Ordinal\nNone + Discrete\nMixture of “Uncomplete” status and completion date.\n\n\nPurchaser Address Indicator\nQualitative / Nominal\nDiscrete\n\n\n\nPostal Code\nQualitative / Nominal\nDiscrete\n\n\n\nPostal District\nQualitative / Nominal\nDiscrete\n\n\n\nPostal Sector\nQualitative / Nominal\nDiscrete\n\n\n\nPlanning Region\nQualitative / Nominal\nDiscrete\n\n\n\nPlanning Area\nQualitative / Nominal\nDiscrete\n\n\n\nQuarter\nDate / Ordinal\nDiscrete\nCreated for ease of data analysis\n\n\n\nNotes\n\nContextually, some of the variables could be classified under ordinal. For example, I can choose to fill in the order for Purchaser Address Indicator as Private category is higher order than HDB category. The context is purchaser that address is Private is likely to be a person with higher Social Economic Status (SES) compared to a purchaser with HDB as address. Same could be applied to Postal Code, Postal District, Postal Sector, Planning Region and Planning Area.\nSpecial Case: Tenure is still a character data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this. Tenure date could also be classified under continuous data for more granularity. This variable will be a mixture of nominal data type with categories like “Freehold”, and also quantitative data type using its Tenure date.\nNett Price($) is still a character data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this.\nSpecial Case: Completion Date is classified as character, but a quick look at the data df, we will realise that this variable is a mix of quantitative and qualitative data type of Uncomplete and actual date of completion, which could be converted and analyse as doubles.\n\nFor simplicity of data analysis\n1. Transacted Price ($) and Nett Price($) are similar. In this analysis, we will use Transacted Price ($) for simplicity, as Nett Price($) has fair amount of missing data, and it is prices after deducting the value of the indirect discounts or benefits, and not representative for all transactions.\n\nArea (SQFT) and Area (SQM), and Unit Price ($ PSF) and Unit Price ($ PSM) are similar measures in different unit. We will use Area (SQFT) and Unit Price ($ PSF)\n\nNext we look at the basic statistics of the current data using summary()\n\nThe OutputThe Code\n\n\n\n\n Project Name       Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)\n Length:26806       Min.   :   440000    Min.   :   322.9   Min.   : 138      \n Class :character   1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384      \n Mode  :character   Median :  1660000    Median :   990.3   Median :1762      \n                    Mean   :  2143286    Mean   :  1191.6   Mean   :1852      \n                    3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260      \n                    Max.   :392180000    Max.   :144883.4   Max.   :5756      \n                                                                              \n  Sale Date           Address          Type of Sale       Type of Area      \n Length:26806       Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   Area (SQM)      Unit Price ($ PSM) Nett Price($)      Property Type     \n Min.   :   30.0   Min.   : 1484      Length:26806       Length:26806      \n 1st Qu.:   67.0   1st Qu.:14893      Class :character   Class :character  \n Median :   92.0   Median :18966      Mode  :character   Mode  :character  \n Mean   :  110.5   Mean   :19930                                           \n 3rd Qu.:  121.0   3rd Qu.:24327                                           \n Max.   :13460.0   Max.   :61962                                           \n NA's   :6                                                                 \n Number of Units     Tenure          Completion Date   \n Min.   : 1.000   Length:26806       Length:26806      \n 1st Qu.: 1.000   Class :character   Class :character  \n Median : 1.000   Mode  :character   Mode  :character  \n Mean   : 1.005                                        \n 3rd Qu.: 1.000                                        \n Max.   :60.000                                        \n                                                       \n Purchaser Address Indicator Postal Code        Postal District   \n Length:26806                Length:26806       Length:26806      \n Class :character            Class :character   Class :character  \n Mode  :character            Mode  :character   Mode  :character  \n                                                                  \n                                                                  \n                                                                  \n                                                                  \n Postal Sector      Planning Region    Planning Area        Quarter         \n Length:26806       Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n\n\n\n\n\n# data summary\nsummary(df)\n\n\n\n\nFrom the continuous data above, we can conclude that there is a possibility of extreme outliers. The Number of Units has a max of 60, while the 3rd Quartile is 1.000. Let’s examine the data by sorting it in descending order using arrange(desc()) and take a look at data with Number of Units, as it greatly affect the analysis of Transaction Price ($).\n\ndf %&gt;%\n  filter(`Number of Units` &gt; 1) %&gt;%\n  arrange(desc(`Number of Units`)) \n\n# A tibble: 12 × 22\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n   &lt;chr&gt;                                &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n 1 MEYER PARK                       392180000       144883.                 2707\n 2 BAGNALL COURT                    115280000        68491.                 1683\n 3 KEW LODGE                         66800000        25177                  2653\n 4 KARTAR APARTMENTS                 18000000         6964.                 2585\n 5 MONDO MANSION BUIL…                6280000         5490.                 1144\n 6 N.A.                              10600000         6747.                 1571\n 7 N.A.                              61080008        32149.                 1900\n 8 N.A.                              32200000        14123.                 2280\n 9 N.A.                               6150000         4342.                 1416\n10 EAST VIEW GARDEN                   6100000         8338.                  732\n11 N.A.                               8000000         3659.                 2187\n12 CLAYMORE PLAZA                     7000000         4209.                 1663\n# ℹ 18 more variables: `Sale Date` &lt;chr&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;, Quarter &lt;chr&gt;\n\n\nWe have 12 rows that have transactions containing more than 1 unit sold, and a check on the Address shows that there are 5 sales that are en bloc cases which should be remove from the analysis. These en bloc cases are likely sales to companies for purpose of redevelopment rather than individual purchasers. See this link on the Meyer Park en bloc transaction. Otherwise, those 7 cases of transactions with more than one unit sold should be included as are likely the cases of purchase of multiple units or the purchase of multiple adjacent plots of land.\n\n\n\nFor the follow code chunk, we aim to remove all the enbloc sales, including the 5 transactions that we have found in section 2.3. While we have no idea if there are more than 5 cases of en bloc sales, the follow code chunk will effectively remove all the rows with the string “ENBLOC” in Address column.\n\ndf.c &lt;- df %&gt;%\n  filter(!grepl('ENBLOC', df$Address))\ndf.c\n\n# A tibble: 26,801 × 22\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n   &lt;chr&gt;                                &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n 1 THE REEF AT KING'S…                2317000          883.                 2625\n 2 URBAN TREASURES                    1823500          883.                 2066\n 3 NORTH GAIA                         1421112         1076.                 1320\n 4 NORTH GAIA                         1258112         1033.                 1218\n 5 PARC BOTANNIA                      1280000          872.                 1468\n 6 NANYANG PARK                       5870000         3323.                 1767\n 7 PALMS @ SIXTH AVEN…                4950000         4521.                 1095\n 8 N.A.                               3260000         1555.                 2096\n 9 WHISTLER GRAND                      850000          441.                 1926\n10 NORTHOAKS                          1268000         1604.                  791\n# ℹ 26,791 more rows\n# ℹ 18 more variables: `Sale Date` &lt;chr&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;, Quarter &lt;chr&gt;\n\n\nIn the df.c tibble, it showed that 5 rows had been removed. Now there is only 26,801 rows instead of the original 26,806 rows in the initial df. This confirm that there are only 5 en bloc sales in the data frame.\n\n\n\nAfter removing the 5 en bloc sales, we are still left with 7 transactions that has between 2 to 4 units sold per transaction. This has caused the Transacted Price ($) to be greatly inflated. In dealing with this, we can (1) choose to divide the Transacted Price ($) by the number of units sold, or (2) remove them from the analysis. In this analysis, we will be using method (2), to remove these transactions from the data set for further analysis. The reason to do so is that we cannot determine at this stage that each unit in the sales are equally priced, or whether each unit has the same Area size.\n\ndf.c &lt;- df.c %&gt;%\n  filter(`Number of Units` &lt;= 1)\n\n\n\n\nLand vs. Strata\nTo lend some background context, you can refer to this link: Landed vs. Strata Landed Basically, Strata means you only owns the property build on this land, but do not own the land itself. Land means you own the land and have more freedom and responsibility in terms of the constructions etc. The application of this knowledge for analysis is that Strata and Land classification can be identify as the sub-markets as owning a piece of land is likely to be more expensive for the purchaser compared to Strata title.\nThe plot below shows the 10 sub-markets in Singapore private housing market.\nLand\n\nApartment\nDetached House\nSemi-Detached House\nTerrace House\n\nStrata\n\nApartment\nCondominium\nDetached House\nExecutive Condominium\nSemi-Detached House\nTerrace House\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.c %&gt;%\n  select(`Transacted Price ($)`, `Type of Area`, `Property Type`) %&gt;%\n  group_by(`Property Type`, `Type of Area`) %&gt;%\n  summarise(`Median Transaction Price ($)` = median(`Transacted Price ($)`, .groups = 'drop')) %&gt;%\n  ggplot(aes(x = `Property Type`, \n             y = `Median Transaction Price ($)`, \n             color = `Type of Area`)) +  # Adding color aesthetic based on Type of Area\n  geom_point() +\n  theme_economist() +\n  theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust=1)) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(color = \"Type of Area\")\n\n\n\n\nConclusion\nFrom the Median Transacted Price plot above, we observe that the 10 sub-markets are distinct in pricing, with Land Type of Area generally priced a lot higher than Strata, especially in the Apartment and Detached House categories."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#data-visualisation",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#data-visualisation",
    "title": "Take-home Ex 01",
    "section": "",
    "text": "In this section, we would want to focus on the Apartment(Strata) Condominium and Executive Condominium sub-market in Singapore, out of the 10 sub-markets identified in section 2.3.3. As stated in section 1.1 Setting the scene, for families with monthly household income more than S$14,000, they need to turn to the private residential market. However, due limited number of plots to be shown, we will take Condominium as example for the illustrations\nAssumptions and considerations for the selecting the sub-markets to visualise:\n\nAffordability - According to the this article, apartment(Strata), Executive Condominium and Condominium are the next most affordable type of private housing if the family is not eligible to purchase public housing. This corroborate with the Median Transaction Price plot above.\nTarget Audience - The target audience for this graphics will be the public who would like to consider housing option in the private residential market. The target audience are those who’s family household are above the limits and would like to look for relatively affordable housing option in the private residential market as mentioned above in point 1.\nInformation Required - Pricing, Location, Types of Sales, Unit Price, Size of Property"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#the-plots",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#the-plots",
    "title": "Take-home Ex 01",
    "section": "",
    "text": "Plot 1: Pricing for non-freehold Condominium\nThis first plot focus on Condominium that are not of Freehold Tenure. Compared to freehold property, these non-freehold Condominiums are relatively lower price. The plot below shows the distribution of Transacted Price ($) in the five Planning Region in Singapore, and reveal the median price of each region varies from 1 to 2 million, with North Region with a tighter spread at a lower price than the other four regions. The Central Region has the highest median at 2 million, with a widest spread. The 4th quantile of the Central Region consists of Transacted Price ($) between 2.5 to just after 9 million. This shows that the Condominiums with Lease are more affordable in the North and East Region in Singapore, with North East and West Region next, and finally the most expensive Condominium would be the ones found in Central Region.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.c %&gt;%\n  filter(`Type of Area` == 'Strata',`Property Type` == 'Condominium', `Quarter` == '24Q1', `Tenure`!= 'Freehold') %&gt;%\n  ggplot(aes(x = `Transacted Price ($)`,\n           y = `Planning Region`,\n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\",\n                       option = \"A\") +\n  scale_x_continuous(name = \"Transacted Price in million ($)\",\n    labels = c(0,1,2,3,4,5,6,7,8,9,10), \n    breaks = c(0,1000000,2000000,3000000,4000000,5000000,6000000,7000000,8000000,9000000,10000000)) +\n  theme_economist() + \n  ggtitle(\"24Q1 Non-Freehold Condo Transacted Price by Planning Region\") +\n  theme(plot.title = element_text(size=12))\n\n\n\n\n\n\n\nPlot 2: Mean and Median Unit Price for non-freehold Condominium\nPlot 2 focus on the mean and median Unit Price ($ PSF) for the non-freehold Condominium in the Central Region. The Mean Unit Price ($ PSF) is represented by the red dot in each of the violin plot and boxplot. While we see a slight rise in the mean and median Unit Price ($ PSF) in 23Q2, where there are more transactions with Unit Price ($ PSF) in the $2,500 range, represented by the bulge at the top of the violin plot. For the rest of the quarters, the mean and median Unit Price ($ PSF) hovers around the range of $2,000. Despite the mean and median are at $2,000 for the 24Q1, there is also a sizable transaction of Unit Price ($ PSF) of $3,000 happening in 24Q1, as represented by the slight bulge at the top of the violin plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarter_means &lt;- df.c %&gt;%\n  filter(`Property Type` == 'Condominium',`Planning Region` == \"Central Region\", `Tenure`!= 'Freehold') %&gt;%\n  group_by(Quarter) %&gt;%\n  summarise(mean_uprice = mean(`Unit Price ($ PSF)`))\n\ndf.c %&gt;%\n  filter(`Property Type` == 'Condominium', `Planning Region` == \"Central Region\",`Tenure`!= 'Freehold') %&gt;%\n  ggplot(aes(y=`Unit Price ($ PSF)`,\n           x=`Quarter`)\n       )+\n  geom_violin() +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  geom_point(data = quarter_means, \n             aes(y = mean_uprice), \n             color = \"red\", \n             size = 3) +\n    scale_y_continuous(labels = scales::comma) +\n  theme_economist() +\n  ggtitle(\"Condominium Unit Price ($ PSF) for Central Region\") \n\n\n\n\n\n\n\nPlot 3: Purchaser Address Indicator for non-freehold Condominium\nPlot 3 focus on the top and bottom 5% of the different types of purchasers for non-freehold Condominium in the Central Region. We assume that the N.A type are purchasers who do not own any property in Singapore. The top 5% of the Private category purchase units priced at $4.5-$9 million. For HDB and N.A categories, the top 5% are purchasing units that is priced between $3 to 4 million. Both bottom 5% Private and HDB categories purchase unit of $1 million, while the bottom 5% N.A category are buying unit just above $1 million. The plausible reason is that purchaser in N.A. category may want to buy a unit for their own stay since they do not own any other properties. Hence, they are paying slightly more for a larger unit relative to other two types of purchasers, who might be buying studio units for rental income.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.c %&gt;%\n  filter(`Property Type` == 'Condominium', `Quarter` == '24Q1', `Planning Region` == \"Central Region\", `Tenure` != 'Freehold') %&gt;%\n  ggplot(aes(x = `Transacted Price ($)`, \n           y = `Purchaser Address Indicator`, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.05, 0.95)\n    ) +\n  scale_fill_manual(\n    name = \"Percentage of Total\",\n    values = c(\"#FF00FFA0\", \"#FFE4E1A0\", \"#0000ffA0\"),\n    labels = c(\"Bottom 5%\", \"5-95%\", \"Top 5%\")\n  ) +\n  theme_ridges()+\n  theme_economist() +\n  theme(plot.title = element_text(size=12)) +\n  scale_x_continuous(name = \"Transacted Price in million ($)\",\n    labels = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), \n    breaks = c(0,1000000,2000000,3000000,4000000,5000000,6000000,7000000,8000000,9000000,10000000,11000000, 12000000, 13000000, 14000000, 15000000)) + \n  ggtitle(\"Central Region Condominium: Purchaser Address Indicator 24Q1\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#references",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#references",
    "title": "Take-home Ex 01",
    "section": "",
    "text": "1. T.S. Kam, R for Visual Analytics Chapter 9 for visualisation of Ridgeline plots with quantile lines.\n2. Claus O. Wilke, Fundamentals of Data Visualization Chapter 2 for understanding and classification of variables.\n3. Stack Overflow, “Filter rows which contain a certain string” for removing en bloc sales from the data frame."
  },
  {
    "objectID": "Self-Practice/Self-Practice_03/Self-Practice_03.html",
    "href": "Self-Practice/Self-Practice_03/Self-Practice_03.html",
    "title": "Self Practice 3: R for Data Science",
    "section": "",
    "text": "library(tidyverse)\n\n\n\n\nThe principles of tidy data might seem so obvious that you wonder if you’ll ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data is untidy. There are two main reasons:\n\nData is often organized to facilitate some goal other than analysis. For example, it’s common for data to be structured to make data entry, not analysis, easy.\nMost people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.\n\nThis means that most real analyses will require at least a little tidying. You’ll begin by figuring out what the underlying variables and observations are. Sometimes this is easy; other times you’ll need to consult with the people who originally generated the data. Next, you’ll pivot your data into a tidy form, with variables in the columns and observations in the rows.\ntidyr provides two functions for pivoting data: pivot_longer() and pivot_wider(). We’ll first start with pivot_longer() because it’s the most common case. Let’s dive into some examples.\n\n\nThe billboard dataset records the billboard rank of songs in the year 2000:\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …\n\n\nIn this dataset, each observation is a song. The first three columns (artist, track and date.entered) are variables that describe the song. Then we have 76 columns (wk1-wk76) that describe the rank of the song in each week1. Here, the column names are one variable (the week) and the cell values are another (the rank).\nTo tidy this data, we’ll use pivot_longer():\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\"\n  )\n\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows\n\n\nAfter the data, there are three key arguments:\n\ncols specifies which columns need to be pivoted, i.e. which columns aren’t variables. This argument uses the same syntax as select() so here we could use !c(artist, track, date.entered) or starts_with(\"wk\").\nnames_to names the variable stored in the column names, we named that variable week.\nvalues_to names the variable stored in the cell values, we named that variable rank.\n\nNote that in the code \"week\" and \"rank\" are quoted because those are new variables we’re creating, they don’t yet exist in the data when we run the pivot_longer() call.\nNow let’s turn our attention to the resulting, longer data frame. What happens if a song is in the top 100 for less than 76 weeks? Take 2 Pac’s “Baby Don’t Cry”, for example. The above output suggests that it was only in the top 100 for 7 weeks, and all the remaining weeks are filled in with missing values. These NAs don’t really represent unknown observations; they were forced to exist by the structure of the dataset2, so we can ask pivot_longer() to get rid of them by setting values_drop_na = TRUE:\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n\n\nThe number of rows is now much lower, indicating that many rows with NAs were dropped.\nYou might also wonder what happens if a song is in the top 100 for more than 76 weeks? We can’t tell from this data, but you might guess that additional columns wk77, wk78, … would be added to the dataset.\nThis data is now tidy, but we could make future computation a bit easier by converting values of week from character strings to numbers using mutate() and readr::parse_number(). parse_number() is a handy function that will extract the first number from a string, ignoring all other text.\n\nbillboard_longer &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) |&gt; \n  mutate(\n    week = parse_number(week)\n  )\n\nNow that we have all the week numbers in one variable and all the rank values in another, we’re in a good position to visualize how song ranks vary over time. The code is shown below and the result is in Figure 5.2. We can see that very few songs stay in the top 100 for more than 20 weeks.\n\nbillboard_longer |&gt; \n  ggplot(aes(x = week, y = rank, group = track)) + \n  geom_line(alpha = 0.25) + \n  scale_y_reverse()\n\n\n\n\n\n\n\n\n\n\n\nNow that you’ve seen how we can use pivoting to reshape our data, let’s take a little time to gain some intuition about what pivoting does to the data. Let’s start with a very simple dataset to make it easier to see what’s happening. Suppose we have three patients with ids A, B, and C, and we take two blood pressure measurements on each patient. We’ll create the data with tribble(), a handy function for constructing small tibbles by hand:\n\ndf &lt;- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\n\nWe want our new dataset to have three variables: id (already exists), measurement (the column names), and value (the cell values). To achieve this, we need to pivot df longer:\n\ndf_longer &lt;- df |&gt; \n  pivot_longer(\n    cols = starts_with(\"bp\"),\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n\nHow does the reshaping work? It’s easier to see if we think about it column by column. As shown in Figure 5.3, the values in a column that was already a variable in the original dataset (id) need to be repeated, once for each column that is pivoted.\n\nThe column names become values in a new variable, whose name is defined by names_to, as shown in Figure 5.4. They need to be repeated once for each row in the original dataset.\n\nThe cell values also become values in a new variable, with a name defined by values_to. They are unwound row by row. Figure 5.5 illustrates the process.\n\n\n\n\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables. For example, take the who2 dataset, the source of table1 and friends that you saw above:\n\nwho2\n\n# A tibble: 7,240 × 58\n   country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554 sp_m_5564\n   &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan  1980       NA        NA        NA        NA        NA        NA\n 2 Afghanistan  1981       NA        NA        NA        NA        NA        NA\n 3 Afghanistan  1982       NA        NA        NA        NA        NA        NA\n 4 Afghanistan  1983       NA        NA        NA        NA        NA        NA\n 5 Afghanistan  1984       NA        NA        NA        NA        NA        NA\n 6 Afghanistan  1985       NA        NA        NA        NA        NA        NA\n 7 Afghanistan  1986       NA        NA        NA        NA        NA        NA\n 8 Afghanistan  1987       NA        NA        NA        NA        NA        NA\n 9 Afghanistan  1988       NA        NA        NA        NA        NA        NA\n10 Afghanistan  1989       NA        NA        NA        NA        NA        NA\n# ℹ 7,230 more rows\n# ℹ 50 more variables: sp_m_65 &lt;dbl&gt;, sp_f_014 &lt;dbl&gt;, sp_f_1524 &lt;dbl&gt;,\n#   sp_f_2534 &lt;dbl&gt;, sp_f_3544 &lt;dbl&gt;, sp_f_4554 &lt;dbl&gt;, sp_f_5564 &lt;dbl&gt;,\n#   sp_f_65 &lt;dbl&gt;, sn_m_014 &lt;dbl&gt;, sn_m_1524 &lt;dbl&gt;, sn_m_2534 &lt;dbl&gt;,\n#   sn_m_3544 &lt;dbl&gt;, sn_m_4554 &lt;dbl&gt;, sn_m_5564 &lt;dbl&gt;, sn_m_65 &lt;dbl&gt;,\n#   sn_f_014 &lt;dbl&gt;, sn_f_1524 &lt;dbl&gt;, sn_f_2534 &lt;dbl&gt;, sn_f_3544 &lt;dbl&gt;,\n#   sn_f_4554 &lt;dbl&gt;, sn_f_5564 &lt;dbl&gt;, sn_f_65 &lt;dbl&gt;, ep_m_014 &lt;dbl&gt;, …\n\n\nThis dataset, collected by the World Health Organisation, records information about tuberculosis diagnoses. There are two columns that are already variables and are easy to interpret: country and year. They are followed by 56 columns like sp_m_014, ep_m_4554, and rel_m_3544. If you stare at these columns for long enough, you’ll notice there’s a pattern. Each column name is made up of three pieces separated by _. The first piece, sp/rel/ep, describes the method used for the diagnosis, the second piece, m/f is the gender (coded as a binary variable in this dataset), and the third piece, 014/1524/2534/3544/4554/5564/65 is the age range (014 represents 0-14, for example).\nSo in this case we have six pieces of information recorded in who2: the country and the year (already columns); the method of diagnosis, the gender category, and the age range category (contained in the other column names); and the count of patients in that category (cell values). To organize these six pieces of information in six separate columns, we use pivot_longer() with a vector of column names for names_to and instructors for splitting the original variable names into pieces for names_sep as well as a column name for values_to:\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 76,046 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1997 sp        m      014       0\n 2 Afghanistan  1997 sp        m      1524     10\n 3 Afghanistan  1997 sp        m      2534      6\n 4 Afghanistan  1997 sp        m      3544      3\n 5 Afghanistan  1997 sp        m      4554      5\n 6 Afghanistan  1997 sp        m      5564      2\n 7 Afghanistan  1997 sp        m      65        0\n 8 Afghanistan  1997 sp        f      014       5\n 9 Afghanistan  1997 sp        f      1524     38\n10 Afghanistan  1997 sp        f      2534     36\n# ℹ 76,036 more rows\n\n\n\n\n\nThe next step up in complexity is when the column names include a mix of variable values and variable names. For example, take the household dataset:\n\nhousehold\n\n# A tibble: 5 × 5\n  family dob_child1 dob_child2 name_child1 name_child2\n   &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;      \n1      1 1998-11-26 2000-01-29 Susan       Jose       \n2      2 1996-06-22 NA         Mark        &lt;NA&gt;       \n3      3 2002-07-11 2004-04-05 Sam         Seth       \n4      4 2004-10-10 2009-08-27 Craig       Khai       \n5      5 2000-12-05 2005-02-28 Parker      Gracie     \n\n\nThis dataset contains data about five families, with the names and dates of birth of up to two children. The new challenge in this dataset is that the column names contain the names of two variables (dob, name) and the values of another (child, with values 1 or 2). To solve this problem we again need to supply a vector to names_to but this time we use the special \".value\" sentinel; this isn’t the name of a variable but a unique value that tells pivot_longer() to do something different. This overrides the usual values_to argument to use the first component of the pivoted column name as a variable name in the output.\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n    names_to = c(\".value\", \"child\"), \n    names_sep = \"_\", \n    values_drop_na = TRUE\n  )\n\n# A tibble: 9 × 4\n  family child  dob        name  \n   &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n\n\nWe again use values_drop_na = TRUE, since the shape of the input forces the creation of explicit missing variables (e.g., for families with only one child).\nFigure 5.7 illustrates the basic idea with a simpler example. When you use \".value\" in names_to, the column names in the input contribute to both values and variable names in the output.\n\n\n\n\n\nSo far we’ve used pivot_longer() to solve the common class of problems where values have ended up in column names. Next we’ll pivot (HA HA) to pivot_wider(), which makes datasets wider by increasing columns and reducing rows and helps when one observation is spread across multiple rows. This seems to arise less commonly in the wild, but it does seem to crop up a lot when dealing with governmental data.\nWe’ll start by looking at cms_patient_experience, a dataset from the Centers of Medicare and Medicaid services that collects data about patient experiences:\n\ncms_patient_experience\n\n# A tibble: 500 × 5\n   org_pac_id org_nm                           measure_cd measure_title prf_rate\n   &lt;chr&gt;      &lt;chr&gt;                            &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       63\n 2 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       87\n 3 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       86\n 4 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       57\n 5 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       85\n 6 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       24\n 7 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       59\n 8 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       85\n 9 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       83\n10 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       63\n# ℹ 490 more rows\n\n\n\ncms_patient_experience |&gt; \n  distinct(measure_cd, measure_title)\n\n# A tibble: 6 × 2\n  measure_cd   measure_title                                                    \n  &lt;chr&gt;        &lt;chr&gt;                                                            \n1 CAHPS_GRP_1  CAHPS for MIPS SSM: Getting Timely Care, Appointments, and Infor…\n2 CAHPS_GRP_2  CAHPS for MIPS SSM: How Well Providers Communicate               \n3 CAHPS_GRP_3  CAHPS for MIPS SSM: Patient's Rating of Provider                 \n4 CAHPS_GRP_5  CAHPS for MIPS SSM: Health Promotion and Education               \n5 CAHPS_GRP_8  CAHPS for MIPS SSM: Courteous and Helpful Office Staff           \n6 CAHPS_GRP_12 CAHPS for MIPS SSM: Stewardship of Patient Resources             \n\n\nNeither of these columns will make particularly great variable names: measure_cd doesn’t hint at the meaning of the variable and measure_title is a long sentence containing spaces. We’ll use measure_cd as the source for our new column names for now, but in a real analysis you might want to create your own variable names that are both short and meaningful.\npivot_wider() has the opposite interface to pivot_longer(): instead of choosing new column names, we need to provide the existing columns that define the values (values_from) and the column name (names_from):\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 500 × 9\n   org_pac_id org_nm           measure_title CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3\n   &lt;chr&gt;      &lt;chr&gt;            &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICA… CAHPS for MI…          63          NA          NA\n 2 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          87          NA\n 3 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          86\n 4 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 5 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 6 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 7 0446162697 ASSOCIATION OF … CAHPS for MI…          59          NA          NA\n 8 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          85          NA\n 9 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          83\n10 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          NA\n# ℹ 490 more rows\n# ℹ 3 more variables: CAHPS_GRP_5 &lt;dbl&gt;, CAHPS_GRP_8 &lt;dbl&gt;, CAHPS_GRP_12 &lt;dbl&gt;\n\n\nThe output doesn’t look quite right; we still seem to have multiple rows for each organization. That’s because, we also need to tell pivot_wider() which column or columns have values that uniquely identify each row; in this case those are the variables starting with \"org\":\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = starts_with(\"org\"),\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n\n\nTo understand how pivot_wider() works, let’s again start with a very simple dataset. This time we have two patients with ids A and B, we have three blood pressure measurements on patient A and two on patient B:\n\ndf &lt;- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"B\",        \"bp1\",    140,\n  \"B\",        \"bp2\",    115, \n  \"A\",        \"bp2\",    120,\n  \"A\",        \"bp3\",    105\n)\n\nWe’ll take the values from the value column and the names from the measurement column:\n\ndf |&gt; \n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\n# A tibble: 2 × 4\n  id      bp1   bp2   bp3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A       100   120   105\n2 B       140   115    NA\n\n\nTo begin the process pivot_wider() needs to first figure out what will go in the rows and columns. The new column names will be the unique values of measurement.\n\ndf |&gt; \n  distinct(measurement) |&gt; \n  pull()\n\n[1] \"bp1\" \"bp2\" \"bp3\""
  },
  {
    "objectID": "Self-Practice/Self-Practice_03/Self-Practice_03.html#getting-started",
    "href": "Self-Practice/Self-Practice_03/Self-Practice_03.html#getting-started",
    "title": "Self Practice 3: R for Data Science",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "Self-Practice/Self-Practice_03/Self-Practice_03.html#lengthening-data",
    "href": "Self-Practice/Self-Practice_03/Self-Practice_03.html#lengthening-data",
    "title": "Self Practice 3: R for Data Science",
    "section": "",
    "text": "The principles of tidy data might seem so obvious that you wonder if you’ll ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data is untidy. There are two main reasons:\n\nData is often organized to facilitate some goal other than analysis. For example, it’s common for data to be structured to make data entry, not analysis, easy.\nMost people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.\n\nThis means that most real analyses will require at least a little tidying. You’ll begin by figuring out what the underlying variables and observations are. Sometimes this is easy; other times you’ll need to consult with the people who originally generated the data. Next, you’ll pivot your data into a tidy form, with variables in the columns and observations in the rows.\ntidyr provides two functions for pivoting data: pivot_longer() and pivot_wider(). We’ll first start with pivot_longer() because it’s the most common case. Let’s dive into some examples.\n\n\nThe billboard dataset records the billboard rank of songs in the year 2000:\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …\n\n\nIn this dataset, each observation is a song. The first three columns (artist, track and date.entered) are variables that describe the song. Then we have 76 columns (wk1-wk76) that describe the rank of the song in each week1. Here, the column names are one variable (the week) and the cell values are another (the rank).\nTo tidy this data, we’ll use pivot_longer():\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\"\n  )\n\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows\n\n\nAfter the data, there are three key arguments:\n\ncols specifies which columns need to be pivoted, i.e. which columns aren’t variables. This argument uses the same syntax as select() so here we could use !c(artist, track, date.entered) or starts_with(\"wk\").\nnames_to names the variable stored in the column names, we named that variable week.\nvalues_to names the variable stored in the cell values, we named that variable rank.\n\nNote that in the code \"week\" and \"rank\" are quoted because those are new variables we’re creating, they don’t yet exist in the data when we run the pivot_longer() call.\nNow let’s turn our attention to the resulting, longer data frame. What happens if a song is in the top 100 for less than 76 weeks? Take 2 Pac’s “Baby Don’t Cry”, for example. The above output suggests that it was only in the top 100 for 7 weeks, and all the remaining weeks are filled in with missing values. These NAs don’t really represent unknown observations; they were forced to exist by the structure of the dataset2, so we can ask pivot_longer() to get rid of them by setting values_drop_na = TRUE:\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n\n\nThe number of rows is now much lower, indicating that many rows with NAs were dropped.\nYou might also wonder what happens if a song is in the top 100 for more than 76 weeks? We can’t tell from this data, but you might guess that additional columns wk77, wk78, … would be added to the dataset.\nThis data is now tidy, but we could make future computation a bit easier by converting values of week from character strings to numbers using mutate() and readr::parse_number(). parse_number() is a handy function that will extract the first number from a string, ignoring all other text.\n\nbillboard_longer &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) |&gt; \n  mutate(\n    week = parse_number(week)\n  )\n\nNow that we have all the week numbers in one variable and all the rank values in another, we’re in a good position to visualize how song ranks vary over time. The code is shown below and the result is in Figure 5.2. We can see that very few songs stay in the top 100 for more than 20 weeks.\n\nbillboard_longer |&gt; \n  ggplot(aes(x = week, y = rank, group = track)) + \n  geom_line(alpha = 0.25) + \n  scale_y_reverse()\n\n\n\n\n\n\n\n\n\n\n\nNow that you’ve seen how we can use pivoting to reshape our data, let’s take a little time to gain some intuition about what pivoting does to the data. Let’s start with a very simple dataset to make it easier to see what’s happening. Suppose we have three patients with ids A, B, and C, and we take two blood pressure measurements on each patient. We’ll create the data with tribble(), a handy function for constructing small tibbles by hand:\n\ndf &lt;- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\n\nWe want our new dataset to have three variables: id (already exists), measurement (the column names), and value (the cell values). To achieve this, we need to pivot df longer:\n\ndf_longer &lt;- df |&gt; \n  pivot_longer(\n    cols = starts_with(\"bp\"),\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n\nHow does the reshaping work? It’s easier to see if we think about it column by column. As shown in Figure 5.3, the values in a column that was already a variable in the original dataset (id) need to be repeated, once for each column that is pivoted.\n\nThe column names become values in a new variable, whose name is defined by names_to, as shown in Figure 5.4. They need to be repeated once for each row in the original dataset.\n\nThe cell values also become values in a new variable, with a name defined by values_to. They are unwound row by row. Figure 5.5 illustrates the process.\n\n\n\n\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables. For example, take the who2 dataset, the source of table1 and friends that you saw above:\n\nwho2\n\n# A tibble: 7,240 × 58\n   country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554 sp_m_5564\n   &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan  1980       NA        NA        NA        NA        NA        NA\n 2 Afghanistan  1981       NA        NA        NA        NA        NA        NA\n 3 Afghanistan  1982       NA        NA        NA        NA        NA        NA\n 4 Afghanistan  1983       NA        NA        NA        NA        NA        NA\n 5 Afghanistan  1984       NA        NA        NA        NA        NA        NA\n 6 Afghanistan  1985       NA        NA        NA        NA        NA        NA\n 7 Afghanistan  1986       NA        NA        NA        NA        NA        NA\n 8 Afghanistan  1987       NA        NA        NA        NA        NA        NA\n 9 Afghanistan  1988       NA        NA        NA        NA        NA        NA\n10 Afghanistan  1989       NA        NA        NA        NA        NA        NA\n# ℹ 7,230 more rows\n# ℹ 50 more variables: sp_m_65 &lt;dbl&gt;, sp_f_014 &lt;dbl&gt;, sp_f_1524 &lt;dbl&gt;,\n#   sp_f_2534 &lt;dbl&gt;, sp_f_3544 &lt;dbl&gt;, sp_f_4554 &lt;dbl&gt;, sp_f_5564 &lt;dbl&gt;,\n#   sp_f_65 &lt;dbl&gt;, sn_m_014 &lt;dbl&gt;, sn_m_1524 &lt;dbl&gt;, sn_m_2534 &lt;dbl&gt;,\n#   sn_m_3544 &lt;dbl&gt;, sn_m_4554 &lt;dbl&gt;, sn_m_5564 &lt;dbl&gt;, sn_m_65 &lt;dbl&gt;,\n#   sn_f_014 &lt;dbl&gt;, sn_f_1524 &lt;dbl&gt;, sn_f_2534 &lt;dbl&gt;, sn_f_3544 &lt;dbl&gt;,\n#   sn_f_4554 &lt;dbl&gt;, sn_f_5564 &lt;dbl&gt;, sn_f_65 &lt;dbl&gt;, ep_m_014 &lt;dbl&gt;, …\n\n\nThis dataset, collected by the World Health Organisation, records information about tuberculosis diagnoses. There are two columns that are already variables and are easy to interpret: country and year. They are followed by 56 columns like sp_m_014, ep_m_4554, and rel_m_3544. If you stare at these columns for long enough, you’ll notice there’s a pattern. Each column name is made up of three pieces separated by _. The first piece, sp/rel/ep, describes the method used for the diagnosis, the second piece, m/f is the gender (coded as a binary variable in this dataset), and the third piece, 014/1524/2534/3544/4554/5564/65 is the age range (014 represents 0-14, for example).\nSo in this case we have six pieces of information recorded in who2: the country and the year (already columns); the method of diagnosis, the gender category, and the age range category (contained in the other column names); and the count of patients in that category (cell values). To organize these six pieces of information in six separate columns, we use pivot_longer() with a vector of column names for names_to and instructors for splitting the original variable names into pieces for names_sep as well as a column name for values_to:\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 76,046 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1997 sp        m      014       0\n 2 Afghanistan  1997 sp        m      1524     10\n 3 Afghanistan  1997 sp        m      2534      6\n 4 Afghanistan  1997 sp        m      3544      3\n 5 Afghanistan  1997 sp        m      4554      5\n 6 Afghanistan  1997 sp        m      5564      2\n 7 Afghanistan  1997 sp        m      65        0\n 8 Afghanistan  1997 sp        f      014       5\n 9 Afghanistan  1997 sp        f      1524     38\n10 Afghanistan  1997 sp        f      2534     36\n# ℹ 76,036 more rows\n\n\n\n\n\nThe next step up in complexity is when the column names include a mix of variable values and variable names. For example, take the household dataset:\n\nhousehold\n\n# A tibble: 5 × 5\n  family dob_child1 dob_child2 name_child1 name_child2\n   &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;      \n1      1 1998-11-26 2000-01-29 Susan       Jose       \n2      2 1996-06-22 NA         Mark        &lt;NA&gt;       \n3      3 2002-07-11 2004-04-05 Sam         Seth       \n4      4 2004-10-10 2009-08-27 Craig       Khai       \n5      5 2000-12-05 2005-02-28 Parker      Gracie     \n\n\nThis dataset contains data about five families, with the names and dates of birth of up to two children. The new challenge in this dataset is that the column names contain the names of two variables (dob, name) and the values of another (child, with values 1 or 2). To solve this problem we again need to supply a vector to names_to but this time we use the special \".value\" sentinel; this isn’t the name of a variable but a unique value that tells pivot_longer() to do something different. This overrides the usual values_to argument to use the first component of the pivoted column name as a variable name in the output.\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n    names_to = c(\".value\", \"child\"), \n    names_sep = \"_\", \n    values_drop_na = TRUE\n  )\n\n# A tibble: 9 × 4\n  family child  dob        name  \n   &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n\n\nWe again use values_drop_na = TRUE, since the shape of the input forces the creation of explicit missing variables (e.g., for families with only one child).\nFigure 5.7 illustrates the basic idea with a simpler example. When you use \".value\" in names_to, the column names in the input contribute to both values and variable names in the output."
  },
  {
    "objectID": "Self-Practice/Self-Practice_03/Self-Practice_03.html#widening-data",
    "href": "Self-Practice/Self-Practice_03/Self-Practice_03.html#widening-data",
    "title": "Self Practice 3: R for Data Science",
    "section": "",
    "text": "So far we’ve used pivot_longer() to solve the common class of problems where values have ended up in column names. Next we’ll pivot (HA HA) to pivot_wider(), which makes datasets wider by increasing columns and reducing rows and helps when one observation is spread across multiple rows. This seems to arise less commonly in the wild, but it does seem to crop up a lot when dealing with governmental data.\nWe’ll start by looking at cms_patient_experience, a dataset from the Centers of Medicare and Medicaid services that collects data about patient experiences:\n\ncms_patient_experience\n\n# A tibble: 500 × 5\n   org_pac_id org_nm                           measure_cd measure_title prf_rate\n   &lt;chr&gt;      &lt;chr&gt;                            &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       63\n 2 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       87\n 3 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       86\n 4 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       57\n 5 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       85\n 6 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       24\n 7 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       59\n 8 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       85\n 9 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       83\n10 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       63\n# ℹ 490 more rows\n\n\n\ncms_patient_experience |&gt; \n  distinct(measure_cd, measure_title)\n\n# A tibble: 6 × 2\n  measure_cd   measure_title                                                    \n  &lt;chr&gt;        &lt;chr&gt;                                                            \n1 CAHPS_GRP_1  CAHPS for MIPS SSM: Getting Timely Care, Appointments, and Infor…\n2 CAHPS_GRP_2  CAHPS for MIPS SSM: How Well Providers Communicate               \n3 CAHPS_GRP_3  CAHPS for MIPS SSM: Patient's Rating of Provider                 \n4 CAHPS_GRP_5  CAHPS for MIPS SSM: Health Promotion and Education               \n5 CAHPS_GRP_8  CAHPS for MIPS SSM: Courteous and Helpful Office Staff           \n6 CAHPS_GRP_12 CAHPS for MIPS SSM: Stewardship of Patient Resources             \n\n\nNeither of these columns will make particularly great variable names: measure_cd doesn’t hint at the meaning of the variable and measure_title is a long sentence containing spaces. We’ll use measure_cd as the source for our new column names for now, but in a real analysis you might want to create your own variable names that are both short and meaningful.\npivot_wider() has the opposite interface to pivot_longer(): instead of choosing new column names, we need to provide the existing columns that define the values (values_from) and the column name (names_from):\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 500 × 9\n   org_pac_id org_nm           measure_title CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3\n   &lt;chr&gt;      &lt;chr&gt;            &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICA… CAHPS for MI…          63          NA          NA\n 2 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          87          NA\n 3 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          86\n 4 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 5 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 6 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 7 0446162697 ASSOCIATION OF … CAHPS for MI…          59          NA          NA\n 8 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          85          NA\n 9 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          83\n10 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          NA\n# ℹ 490 more rows\n# ℹ 3 more variables: CAHPS_GRP_5 &lt;dbl&gt;, CAHPS_GRP_8 &lt;dbl&gt;, CAHPS_GRP_12 &lt;dbl&gt;\n\n\nThe output doesn’t look quite right; we still seem to have multiple rows for each organization. That’s because, we also need to tell pivot_wider() which column or columns have values that uniquely identify each row; in this case those are the variables starting with \"org\":\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = starts_with(\"org\"),\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n\n\nTo understand how pivot_wider() works, let’s again start with a very simple dataset. This time we have two patients with ids A and B, we have three blood pressure measurements on patient A and two on patient B:\n\ndf &lt;- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"B\",        \"bp1\",    140,\n  \"B\",        \"bp2\",    115, \n  \"A\",        \"bp2\",    120,\n  \"A\",        \"bp3\",    105\n)\n\nWe’ll take the values from the value column and the names from the measurement column:\n\ndf |&gt; \n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\n# A tibble: 2 × 4\n  id      bp1   bp2   bp3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A       100   120   105\n2 B       140   115    NA\n\n\nTo begin the process pivot_wider() needs to first figure out what will go in the rows and columns. The new column names will be the unique values of measurement.\n\ndf |&gt; \n  distinct(measurement) |&gt; \n  pull()\n\n[1] \"bp1\" \"bp2\" \"bp3\""
  },
  {
    "objectID": "Self-Practice/Self-Practice_01/Self-Practice_01.html",
    "href": "Self-Practice/Self-Practice_01/Self-Practice_01.html",
    "title": "Self Practice 1: R for Data Science",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork)\n\n\nlibrary(styler)\n\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\npalmerpenguins::penguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n?penguins\n\nggplot(penguins, \n       aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method=lm) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body masss (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\nHow many rows are in penguins? How many columns?\n\n344 rows, 8 columns\n\nWhat does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n\na number denoting bill depth (millimeters)\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n\n\nggplot(penguins,\n       aes(x = bill_length_mm, y = bill_depth_mm,\n          color = species, shape = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n-   bill depth increases as bill length increases for all threee species. \n\nWhat happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?\n\nBoxplot would be a better choice for a categorical variable vs a continuous variable.\n\n\n\nggplot(penguins,\n       aes(x = species, y = bill_depth_mm)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nWhy does the following give an error and how would you fix it?\n\nTo add aes argument for first layer (ggplot)\n\n\n\nggplot(data = penguins, \n       aes(x = bill_depth_mm, y = body_mass_g,\n           color = species, shape = species)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\nWhat does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n\nit means remove the data points that are “N.A”. No more error message\n\n\n\nggplot(data = penguins, \n       aes(x = bill_depth_mm, y = body_mass_g,\n           color = species, shape = species)) + \n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\nAdd the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\n\nggplot(data = penguins, \n       aes(x = bill_depth_mm, y = body_mass_g,\n           color = species, shape = species)) + \n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"Bill depth and Body mass\",\n       subtitle = \"Data come from the palmerpenguins package\")\n\n\n\n\n\n\n\n\n\nRecreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n\n\nggplot(penguins,\n       aes(x = flipper_length_mm, y = body_mass_g,\n           color = bill_depth_mm)) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n\n\n\nCheck this output.\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n\n\n\n\n\n\n\n\n\nWill these two graphs look different? Why/why not?\n\nSame. Mapping is the same.\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  )"
  },
  {
    "objectID": "Self-Practice/Self-Practice_01/Self-Practice_01.html#data-visualization",
    "href": "Self-Practice/Self-Practice_01/Self-Practice_01.html#data-visualization",
    "title": "Self Practice 1: R for Data Science",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork)\n\n\nlibrary(styler)\n\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\npalmerpenguins::penguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n?penguins\n\nggplot(penguins, \n       aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method=lm) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body masss (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\nHow many rows are in penguins? How many columns?\n\n344 rows, 8 columns\n\nWhat does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n\na number denoting bill depth (millimeters)\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n\n\nggplot(penguins,\n       aes(x = bill_length_mm, y = bill_depth_mm,\n          color = species, shape = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n-   bill depth increases as bill length increases for all threee species. \n\nWhat happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?\n\nBoxplot would be a better choice for a categorical variable vs a continuous variable.\n\n\n\nggplot(penguins,\n       aes(x = species, y = bill_depth_mm)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nWhy does the following give an error and how would you fix it?\n\nTo add aes argument for first layer (ggplot)\n\n\n\nggplot(data = penguins, \n       aes(x = bill_depth_mm, y = body_mass_g,\n           color = species, shape = species)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\nWhat does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n\nit means remove the data points that are “N.A”. No more error message\n\n\n\nggplot(data = penguins, \n       aes(x = bill_depth_mm, y = body_mass_g,\n           color = species, shape = species)) + \n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\nAdd the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\n\nggplot(data = penguins, \n       aes(x = bill_depth_mm, y = body_mass_g,\n           color = species, shape = species)) + \n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"Bill depth and Body mass\",\n       subtitle = \"Data come from the palmerpenguins package\")\n\n\n\n\n\n\n\n\n\nRecreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n\n\nggplot(penguins,\n       aes(x = flipper_length_mm, y = body_mass_g,\n           color = bill_depth_mm)) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n\n\n\nCheck this output.\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n\n\n\n\n\n\n\n\n\nWill these two graphs look different? Why/why not?\n\nSame. Mapping is the same.\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  )"
  },
  {
    "objectID": "Self-Practice/Self-Practice_01/Self-Practice_01.html#ggplot2-calls-use-of-pipe",
    "href": "Self-Practice/Self-Practice_01/Self-Practice_01.html#ggplot2-calls-use-of-pipe",
    "title": "Self Practice 1: R for Data Science",
    "section": "1.3 ggplot2 calls (use of pipe |>)",
    "text": "1.3 ggplot2 calls (use of pipe |&gt;)\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()"
  },
  {
    "objectID": "Self-Practice/Self-Practice_01/Self-Practice_01.html#visualizing-distributions",
    "href": "Self-Practice/Self-Practice_01/Self-Practice_01.html#visualizing-distributions",
    "title": "Self Practice 1: R for Data Science",
    "section": "1.4 Visualizing distributions",
    "text": "1.4 Visualizing distributions\n\nggplot(penguins, \n       aes(x = fct_infreq(species))) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nfct_infreq() - by number of observations with each level, largest first\nfct_inorder() - by order of first appearance\nfct_inseq() - by numberical value of level\n\n\n\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(binwidth = 200)\n\n\n\n\n\n\n\n\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n1.4.3 Exercises\n\nMake a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n\n\nggplot(penguins, \naes(y = fct_infreq(species))) +\ngeom_bar()\n\n\n\n\n\n\n\n\n\nHow are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n\ncolor is applied as the outline of the bar, while fill is applied to the whole bar.\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(color = \"red\")\n\n\n\n\n\n\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n\n\n\n\n\nWhat does the bins argument in geom_histogram() do?\n\nit sets the size/range of the bar of a category.\n\nMake a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\np1 &lt;- ggplot(diamonds,\naes(x = carat)) +\ngeom_histogram(binwidth = 0.01) +\nlabs(title = \"carat with 0.01 binwidth\")\n\n\np2 &lt;- ggplot(diamonds,\naes(x = carat)) +\ngeom_histogram(binwidth = 0.05) +\nlabs(title = \"carat with 0.05 binwidth\")\n\n\np3 &lt;- ggplot(diamonds,\naes(x = carat)) +\ngeom_histogram(binwidth = 0.1) +\nlabs(title = \"carat with 0.1 binwidth\")\n\n\np1/p2/p3"
  },
  {
    "objectID": "Self-Practice/Self-Practice_01/Self-Practice_01.html#visualising-relationship",
    "href": "Self-Practice/Self-Practice_01/Self-Practice_01.html#visualising-relationship",
    "title": "Self Practice 1: R for Data Science",
    "section": "1.5 Visualising relationship",
    "text": "1.5 Visualising relationship\n\n1.5.1 A numerical and a categorical variable\nTo visualize the relationship between a numerical and a categorical variable we can use side-by-side box plots. A boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution. It is also useful for identifying potential outliers\n\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +\n  geom_density(linewidth = 0.75, alpha = 0.2)\n\n\n\n\n\n\n\n\n\n\n1.5.2 Two categorical variables\nWe can use stacked bar plots to visualize the relationship between two categorical variables. For example, the following two stacked bar plots both display the relationship between island and species, or specifically, visualizing the distribution of species within each island.\nThe first plot shows the frequencies of each species of penguins on each island. The plot of frequencies shows that there are equal numbers of Adelies on each island. But we don’t have a good sense of the percentage balance within each island.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe second plot, a relative frequency plot created by setting position = “fill” in the geom, is more useful for comparing species distributions across islands since it’s not affected by the unequal numbers of penguins across the islands. Using this plot we can see that Gentoo penguins all live on Biscoe island and make up roughly 75% of the penguins on that island, Chinstrap all live on Dream island and make up roughly 50% of the penguins on that island, and Adelie live on all three islands and make up all of the penguins on Torgersen.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\") +\n  labs(y = \"Percentage of Species on same Island\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse position = \"fill\" argument in geom_ for a relative frequency plot.\n\n\n\n\n1.5.3 Two numerical variables\nSo far you’ve learned about scatterplots (created with geom_point()) and smooth curves (created with geom_smooth()) for visualizing the relationship between two numerical variables. A scatterplot is probably the most commonly used plot for visualizing the relationship between two numerical variables.\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = island))\n\n\n\n\n\n\n\n\n\n\n1.5.4 Three or more variables\nAs we saw in Section 1.2.4, we can incorporate more variables into a plot by mapping them to additional aesthetics. For example, in the following scatterplot the colors of points represent species and the shapes of points represent islands.\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = island))\n\n\n\n\n\n\n\n\nHowever adding too many aesthetic mappings to a plot makes it cluttered and difficult to make sense of. Another way, which is particularly useful for categorical variables, is to split your plot into facets, subplots that each display one subset of the data.\nTo facet your plot by a single variable, use facet_wrap(). The first argument of facet_wrap() is a formula, which you create with ~ followed by a variable name. The variable that you pass to facet_wrap() should be categorical.\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  facet_wrap(~island)\n\n\n\n\n\n\n\n\n\n\n1.5.5 Exercises\n\nThe mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical? Which variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\nMake a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n\n\nggplot(mpg,aes(x = hwy, y = displ)) +\ngeom_point()\n\n\n\n\n\n\n\n\n\nggplot(mpg,aes(x = hwy, y = displ, color = cyl)) +\ngeom_point()\n\n\n\n\n\n\n\n\n\nggplot(mpg,\n      aes(x = hwy, y = displ, \n          color = cyl, size = cty,\n          )) +\ngeom_point() \n\n\n\n\n\n\n\n\n\nggplot(mpg,\n      aes(x = hwy, y = displ, \n          color = cyl, size = cty, shape = trans,\n          )) +\ngeom_point() \n\n\n\n\n\n\n\n\n\nIn the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n\n\nggplot(mpg,aes(x = hwy, y = displ, size = cyl)) +\ngeom_point()\n\n\n\n\n\n\n\n\n\nWhat happens if you map the same variable to multiple aesthetics?\n\nToo confusing.\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n\n\nggplot(penguins, aes(x = bill_depth_mm, \n                    y = bill_length_mm,\n                    color = species)) +\n  geom_point() +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\nWhy does the following yield two separate legends? How would you fix it to combine the two legends?\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_length_mm, y = bill_depth_mm, \n    color = species, shape = species\n  )\n) +\n  geom_point() +\n  labs(color = \"Species\")\n\n\n\n\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_length_mm, y = bill_depth_mm, \n    color = species, shape = species)) +\n  geom_point() +\n  labs()\n\n\n\n\n\n\n\n\n\nggplot(penguins)\n\n\n\n\n\n\n\n\n\nCreate the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n\nCan answer, what species are found in each island.\n\n\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n-   second plot can answer, what percentage of each species is found in each island?\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#getting-started",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#getting-started",
    "title": "In-class Ex 5: Visualising Text",
    "section": "1.0 Getting Started",
    "text": "1.0 Getting Started\n\npacman::p_load(tidyverse,readtext,\n               quanteda,tidytext,\n               jsonlite,igraph)\n\n\nRead about quanteda\n\n\n1.1 Loading the all the articles into a single file\nUsing readtext() to convert many articles into a data table, consisting of article name in first column and article:\n\ntext_data &lt;- readtext(paste0(\"data/articles\",\n                             \"/*\"))\n\n\nusenet_words &lt;- text_data %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n         !word %in% stop_words$word)\n\n\nusenet_words |&gt; \n  count (word, sort = TRUE)\n\nreadtext object consisting of 3260 documents and 0 docvars.\n# A data frame: 3,260 × 3\n  word             n text     \n  &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;    \n1 fishing       2177 \"\\\"\\\"...\"\n2 sustainable   1525 \"\\\"\\\"...\"\n3 company       1036 \"\\\"\\\"...\"\n4 practices      838 \"\\\"\\\"...\"\n5 industry       715 \"\\\"\\\"...\"\n6 transactions   696 \"\\\"\\\"...\"\n# ℹ 3,254 more rows\n\n\n\ntext_data_splitted &lt;- text_data |&gt; \n  separate_wider_delim(\"doc_id\",\n                       delim = \"__0__\",\n                       names = c(\"X\",\"Y\"),\n                       too_few = \"align_end\")"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#using-jsonlite-package",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#using-jsonlite-package",
    "title": "In-class Ex 5: Visualising Text",
    "section": "1.2 Using jsonlite package",
    "text": "1.2 Using jsonlite package\n\neasy to glean the insight from the data through looking at the details of the data. - see time series difference\n\n\nmc1_data &lt;- fromJSON(\"data/mc1.json\")\n\n\nmc2_data &lt;- fromJSON(\"data/mc2.json\")\n\nFor creating graph model: - igraph"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "",
    "text": "This In-class Exercise is a walk-through of Chapter 9 - Visualising Distribution in R4VA. The learning outcome of this chapter is learning the following two distribution by using ggplot and its extension:\n\nRidgeline plot\nRaincloud plot"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#learning-outcome",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#learning-outcome",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "",
    "text": "This In-class Exercise is a walk-through of Chapter 9 - Visualising Distribution in R4VA. The learning outcome of this chapter is learning the following two distribution by using ggplot and its extension:\n\nRidgeline plot\nRaincloud plot"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#getting-started",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#getting-started",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "2.0 Getting Started",
    "text": "2.0 Getting Started\n\n2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\nggdist: a ggplot2 extension specially design for visualising distribution and uncertainty\ntidyverse: a family of R packages to meet the modern data science and visual communication needs\nggthemes: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\ncolorspace: an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(tidyverse,ggdist,ggthemes,\n               colorspace,ggridges)\n\n\n\n2.2 Data Import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#visualising-distribution-with-ridgeline-plot",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#visualising-distribution-with-ridgeline-plot",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "3.0 Visualising Distribution with Ridgeline Plot",
    "text": "3.0 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\nNote - Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = MATHS,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2,\n    fill = lighten(\"#CC99FF\", 0.5),\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"Maths grades\",\n    expand = c(0,0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(3,3))) +\n  theme_ridges()\n\n\n\n\n\n\n3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = MATHS,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_continuous(name = \"Scores\") +\n  scale_x_continuous(\n    name = \"Maths grades\",\n    expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\nNote It is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe Code\n\n\n\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 10,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 5% and 95% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.05, 0.95)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF00FFA0\", \"#FFE4E1A0\", \"#0000ffA0\"),\n    labels = c(\"(0, 0.05]\", \"(0.05, 0.95]\", \"(0.95, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#visualising-distribution-with-raincloud-plot",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#visualising-distribution-with-raincloud-plot",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "4.0 Visualising Distribution with Raincloud Plot",
    "text": "4.0 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of Maths score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualisation, which is contains a half-density and a slab-interval.\n\nThe PlotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n4.4 Finishing Touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_wsj() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  coord_flip() +\n  theme_wsj()\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  coord_flip() +\n  theme_wsj()"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#archival-of-in-class-ex_02-done-in-class",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#archival-of-in-class-ex_02-done-in-class",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "5.0 Archival of In-class Ex_02 done in class",
    "text": "5.0 Archival of In-class Ex_02 done in class"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#histogram",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#histogram",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "Histogram",
    "text": "Histogram\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n:::\n\nggplot(exam,\n       aes(x = ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6\n  )"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#the-alternative-design",
    "href": "In-class Exercise/In-class_Ex02/In-class_Ex02.html#the-alternative-design",
    "title": "In-class Ex02 - Visualising Distribution",
    "section": "The alternative design",
    "text": "The alternative design\n\nmedian_eng &lt;- median(exam$ENGLISH)\nmean_eng &lt;- mean(exam$ENGLISH)\nstd_eng &lt;- sd(exam$ENGLISH)\n\nggplot(exam,\n       aes(x= ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6) +\n  stat_function(\n    fun = dnorm,\n    args = list(mean = mean_eng,\n                sd = std_eng),\n    col = \"grey30\",\n    linewidth = .8) +\n  geom_vline(\n    aes(xintercept = mean_eng),\n    color = \"#4d5887\",\n    linewidth = .6,\n    linetype = \"dashed\") +\n  annotate(geom = \"text\",\n           x = mean_eng - 8,\n           y = 0.04,\n           label = paste0(\"Mean ENGLISH: \",\n                          round((mean_eng), 2)),\n           color = \"#4d5887\") +\n  geom_vline(\n    aes(xintercept = median_eng)\n  )\n\n\n\n\n\n\n\n\nReference\n\nT.S Kam, R for Visual Analytics Chapter 9"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.2 Getting Started",
    "text": "27.2 Getting Started\n\n27.2.1 Installing and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.3 The Data",
    "text": "27.3 The Data\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n27.3.1 The edges data\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n27.3.2 The nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n27.3.3 Importing network data from files\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n \n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n27.3.4 Reviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n27.3.5 Wrangling time\nThe code chunk below will be used to perform the changes.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nTip\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the day spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n27.3.6 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n27.3.7 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nTip\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n27.3.8 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-network-objects-using-tidygraph",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.4 Creating network objects using tidygraph",
    "text": "27.4 Creating network objects using tidygraph\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n27.4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n27.4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n27.4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n27.4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 1372 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n27.4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.5 Plotting Static Network Graphs with ggraph package",
    "text": "27.5 Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n27.5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n27.5.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n27.5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n27.5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n27.5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nlayout argument is used to define the layout to be used.\n\n\n\n\n\n27.5.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\ngeom_node_point is equivalent in functionality to geom_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuk above colour and size are used.\n\n\n\n\n\n27.5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-facet-graphs",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#creating-facet-graphs",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.6 Creating facet graphs",
    "text": "27.6 Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in all panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n27.6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n27.6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nA framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom',\n        legend.justification = 'center',\n        legend.box = 'horizontal',\n        legend.key.size = unit(0.3, 'cm'), \n        legend.text = element_text(size = 7), \n        legend.title = element_text(size = 7))\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) \n\n\n\n\n\n\n\n\n\n\n27.6.4 Working with facet_nodes()\nIn the code chunk below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom',\n        legend.justification = 'center',\n        legend.box = 'horizontal',\n        legend.key.size = unit(0.3, 'cm'), \n        legend.text = element_text(size = 7), \n        legend.title = element_text(size = 7))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#network-metrics-analysis",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#network-metrics-analysis",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.7 Network Metrics Analysis",
    "text": "27.7 Network Metrics Analysis\n\n27.7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph() +\n  theme(legend.position = 'right',\n        legend.justification = 'center',\n        legend.box = 'vertical',\n        legend.key.size = unit(0.3, 'cm'), \n        legend.text = element_text(size = 7), \n        legend.title = element_text(size = 7))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\n\n27.7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph() +\n  theme(legend.position = 'right',\n        legend.justification = 'center',\n        legend.box = 'vertical',\n        legend.key.size = unit(0.3, 'cm'), \n        legend.text = element_text(size = 7), \n        legend.title = element_text(size = 7))\n\n\n\n\n\n\n\n\n\n\n27.7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on Exercise/Hands-on_Ex06/Hands-on_Ex06.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Ex 6: 27 Modelling, Visualising and Analysing Network Data with R",
    "section": "27.8 Building Interactive Network Graph with visNetwork",
    "text": "27.8 Building Interactive Network Graph with visNetwork\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n27.8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n27.8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\n27.8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\n27.8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n27.8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\",\n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\n27.8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "",
    "text": "This hands-on exercise consists of Chapter 10 to 12 of R4VA."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#lesson-outline",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#lesson-outline",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "Lesson Outline",
    "text": "Lesson Outline\n\nVisual Analytics for Knowledge Discovery\nVisual Analytics Approach for Statistical Testing\nVisual Analytics for Building Better Models\nVisualising Uncertainty\n\nWhy Visualising Uncertainty?\nBasic Statistical Concepts Related to Uncertainty (Chapter 10 of R4VA)\nUnivariate Graphical Methods for Visualising Uncertainty\n\nError bars (Chapter 11 of R4VA)\nConfidence strips (Chapter 11 of R4VA)\nRidge plot (Chpater 9 of R4VA)\n\nBivariate Graphical Methods for Visualising Uncertainty\n\nFunnel plot (Chapter 12 of R4VA)\n\n\nVariation and Its Discontents"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "10.1 Learning Outcome",
    "text": "10.1 Learning Outcome\nIn this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "10.2 Visual Statistical Analysis with ggstatsplot",
    "text": "10.2 Visual Statistical Analysis with ggstatsplot\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "10.3 Getting Started",
    "text": "10.3 Getting Started\n\n10.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse, FunnelPlotR,rstantools)\n\n\n\n10.3.2 Importing data\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n10.3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary.\n\n\n10.3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n10.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n10.3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n10.3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nlibrary(rstantools)\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n10.3.7.1 ggbetweenstats - Summary of tests\n\n\n\n\n\n\n10.3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n10.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association.\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-models",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-models",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "10.4 Visualising Models",
    "text": "10.4 Visualising Models\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "10.5 Getting Started",
    "text": "10.5 Getting Started"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "10.6 Installing and loading the required libraries",
    "text": "10.6 Installing and loading the required libraries\n\npacman:::p_load(readxl, performance, parameters,see)\n\n\n10.6.1 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\") #import only worksheet named \"data\"\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\n10.6.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n10.6.3 Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\nt &lt;- check_collinearity(model)\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n10.6.4 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\nThe year is is excluded\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n10.6.5 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n10.6.6 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n10.6.7 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\nt1 &lt;- parameters(model1)\n\n\n\n10.6.8 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome-1",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "11.1 Learning Outcome",
    "text": "11.1 Learning Outcome\nVisualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-2",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-2",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "11.2 Getting Started",
    "text": "11.2 Getting Started\n\n11.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n11.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "11.3 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "11.3 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe CodeThe Table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\n11.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.75, \n    linewidth=2) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 2,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n11.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n11.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "11.4 Visualising Uncertainty: ggdist package",
    "text": "11.4 Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n11.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\n?stat_pointinterval()\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n11.4.2 Visualizing the uncertainty of point estimates: ggdist methods\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals is shown below:\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = c(0.95,0.99),\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n11.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "11.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "11.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "12.1 Overview",
    "text": "12.1 Overview\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages-1",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "12.2 Installing and Launching R Packages",
    "text": "12.2 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(readr,tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#importing-data-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#importing-data-1",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "12.3 Importing Data",
    "text": "12.3 Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "12.4 FunnelPlotR methods",
    "text": "12.4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n12.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nTip\n\n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n12.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nTip\n\n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n12.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles\n\n\n\n12.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n12.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n12.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n12.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#references",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#references",
    "title": "Hands-on Ex 4: Fundamentals of Visual Analytics",
    "section": "12.6 References",
    "text": "12.6 References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This chapter / Hands-on exercise is an introduction to several ggplot2 extension. Key idea is to create more elegant and effective statistical graphics, pleasing to the eyes of the reader, and reducing the cognitive load of the reader.\nKey learning:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This chapter / Hands-on exercise is an introduction to several ggplot2 extension. Key idea is to create more elegant and effective statistical graphics, pleasing to the eyes of the reader, and reducing the cognitive load of the reader.\nKey learning:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "2 Getting started",
    "text": "2 Getting started\n\nInstalling and loading the required librariesImporting dataglimpse() the Data\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel,patchwork,\n               ggthemes,hrbrthemes,\n               tidyverse)\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical attributes: ID, CLASS, GENDER and RACE.\nContinuous attributes: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "3 Beyond ggplot2 Annotation: ggrepel",
    "text": "3 Beyond ggplot2 Annotation: ggrepel\nAnnotation for large number of data points is potentially challenging, as the annotations may overwhelm the plot. In this example, geom_label() is used to show the labels on all the data points. The resulting plot below shows the annotation covering much of the data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = 0.5, \n             vjust = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our example above.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(x= MATHS,\n       y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   hjust = 0.5,\n                   vjust = 0.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "4 Beyond ggplot2 Themes",
    "text": "4 Beyond ggplot2 Themes\nThere are eight built-in themes in ggplot2. You can browse through the plots of all the themes below. Visit this link to learn more about ggplot2 Themes.\n\n1. theme_gray() - Default2. theme_bw()3. theme_classic()4. theme_dark()5. theme_light()6. theme_linedraw()7. theme_minimal()8. theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoints to note\n\nNote 1\nNote 2"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggthemes-package",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggthemes-package",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggthemes package",
    "text": "4.1 Working with ggthemes package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, wsj theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(x = MATHS,\n       y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  ggtitle(\"English versus Maths scores\") +\n  geom_label_repel(aes(label = ID), \n                   max.overlaps = 5) +  \n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\nAdditional tip on ggthemes\n\n\n\n\nVisit this link for the overview of the applications of each theme."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbrthemes package",
    "text": "4.2 Working with hrbrthemes package\nThe hrbrthemes is a collection of custom themes and utility functions for creating visually appealing and consistent plots using ggplot2. This package is developed by Bob Rudis (hrbrmstr) and offers an assortment of themes and utilities that can enhance the aesthetics and readability of your ggplot2 visualisations.\n\nOriginalWith FT Theme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "5 Beyond Single Graph",
    "text": "5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nNext, we create two more graphs.\n\nThe plotThe code\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\nThe plotThe code"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: patchwork methods",
    "text": "5.1 Creating Composite Graphics: patchwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily.\nGeneral syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign /\n\n5.2 Combining the ggplot2 graphs\n\nThe plot using +The code using +The plot using all 3 syntaxThe code using all 3 syntax\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 + p2) / p3\n\n\n\n\nRefer to Plot Assembly to learn more about nesting and wrapping of plots.\n\n\n5.3 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 + p2) / p3 + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating figure with insert",
    "text": "5.4 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Ex 2: Beyond ggplot2 Fundamentals",
    "section": "Creating a composite figure by using patchwork and ggtheme",
    "text": "Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_ft_rc() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 + p2) / p3\npatchwork & theme_ft_rc() +\n  theme(plot.title = element_text(size=10))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this site",
    "section": "",
    "text": "This site is created as part my course work in Visual Analytics taught by Professor Kam TS. Through this module, I hope to improve my data visualisation skill.\nSkills of a Data Scientists and my progress thus far:"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Ex 1",
    "section": "",
    "text": "# load tidyverse from pacman\npacman::p_load(tidyverse)\n\n# load exam data using readr, part of tidyverse package\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n# R base Histogram\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n# ggplot histogram\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n# If the dataset is not already a data.frame, it will be converted to one by fortify().\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n# Bar Chart\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n# Dotplot / scale_y_continuous to turn off y-axis\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n# Histogram, changing geom() \nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill='light blue') \n\n\n\n\n\n\n\n# Histogram, changing aes()\n# This approach can be used to colour, fill and alpha of the geometric.\nggplot(data=exam_data, \n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"grey30\") \n\n\n\n\n\n\n\n# Kernel Density Estimate (KDE), changing aes()\nggplot(data=exam_data, \n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()   \n\n\n\n\n\n\n\n# Boxplot, notches to determine if median differs\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot(notch=T) \n\n\n\n\n\n\n\n# Violin plot - comparing multiple data distributions\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n# geom_point - scatterplot\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n# Combining geom objects\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n# Using stat_summary(), use fun=\"mean\", fun.y has deprecated\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)  \n\n\n\n\n\n\n\n# Using stat in geom_point(), use fun instead of fun.y\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4) \n\n\n\n\n\n\n\n# geom_smooth() for best fit curve on scatterplot, default method = loess\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "",
    "text": "In this hands on exercise 3, we will be learning Chapter 3 and 4 of R for Visual Analytics. For Part I, we will focus on creating interactive data visualisation by using functions provided by ggiraph and plotly packages. For Part II, we will focus on learning how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "",
    "text": "In this hands on exercise 3, we will be learning Chapter 3 and 4 of R for Visual Analytics. For Part I, we will focus on creating interactive data visualisation by using functions provided by ggiraph and plotly packages. For Part II, we will focus on learning how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.1 Getting Started",
    "text": "2.1 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nDT: provides an R interface to the JavaScript library DataTables that create interactive table on html page.\nggiraph: for making ‘ggplot’ graphics interactive.\npatchwork: for combining multiple ggplot2 graphs into one figure.\nplotly: R library for plotting interactive statistical graphs.\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(DT, ggiraph, \n               patchwork, plotly, \n               tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.3 Interactive Data Visualisation - ggiraph methods",
    "text": "2.3 Interactive Data Visualisation - ggiraph methods\n\n2.3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom i.e. geom_dotplot_interactive() will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.4 Interactivity",
    "text": "2.4 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n2.4.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.5 Interactivity",
    "text": "2.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID, Class, and Gender will be displayed.\n\n\n\n\n\n\n\n2.5.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\n\n2.5.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n2.5.2 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = GENDER),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)  \n\nInteractivity: Elements associated with a data_id (i.e Gender) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n2.5.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.5;\") \n  )                                        \n)    \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n2.5.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n2.5.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                 \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n2.5.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\n*patchwork* function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.6 Interactive Data Visualisation - plotly methods!",
    "text": "2.6 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n2.6.1 Creating an interactive scatter plot: plot_ly() method\nHere’s an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n2.6.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\n::: panel-tabset ## The Plot"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#the-code-1",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#the-code-1",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "The Code",
    "text": "The Code\n\nplot_ly(exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE)\n\n\n2.6.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n2.6.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "2.7 Interactive Data Visualisation - crosstalk methods!",
    "text": "2.7 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n2.7.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n2.7.2 Linked brushing: crosstalk method\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5) \n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#overview-1",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#overview-1",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "3.1 Overview",
    "text": "3.1 Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\n\n3.2.1 Loading the R Packages\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n3.2.2 Importing data\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nThings to learn from the code chunk above\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_at() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "3.3 Animated Data Visualisation: gganimate methods",
    "text": "3.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n3.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,                        \n                      size = Population,                        \n                      colour = Country)) +   \n  geom_point(alpha = 0.7,               \n             show.legend = FALSE) +   \n  scale_colour_manual(values = country_colors) +   \n  scale_size(range = c(2, 12)) +   \n  labs(title = 'Year: {frame_time}',        \n       x = '% Aged',         \n       y = '% Young')\n\n\n\n\n\n\n\n\n\n\n3.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "title": "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods",
    "section": "3.4 Animated Data Visualisation: plotly",
    "text": "3.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n3.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe Plot\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation ## The Code\n\nanimate &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') \n\nggplotly(animate)\n\nThings to learn from the code chunk above\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called animate.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk belo\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nanimate &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme(legend.position='none')\n\nggplotly(animate)\n\n\n\n\n\n\n3.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe Bubble PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nbubble &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbubble"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to visualise and analyse text data using R.\nBy the end of this hands-on exercise, you will be able to:\n\nunderstand tidytext framework for processing, analysing and visualising text data,\nwrite function for importing multiple files into R,\ncombine multiple files into a single data frame,\nclean and wrangle text data by using tidyverse approach,\nvisualise words with Word Cloud,\ncompute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\nvisualising texts and terms relationship."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#learning-outcome",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#learning-outcome",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to visualise and analyse text data using R.\nBy the end of this hands-on exercise, you will be able to:\n\nunderstand tidytext framework for processing, analysing and visualising text data,\nwrite function for importing multiple files into R,\ncombine multiple files into a single data frame,\nclean and wrangle text data by using tidyverse approach,\nvisualise words with Word Cloud,\ncompute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\nvisualising texts and terms relationship."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.2 Getting Started",
    "text": "29.2 Getting Started\n\n29.2.1 Installing and launching R packages\nIn this hands-on exercise, the following R packages for handling, processing, wrangling, analysing and visualising text data will be used:\n\ntidytext, tidyverse (mainly readr, purrr, stringr, ggplot2)\nwidyr,\nwordcloud and ggwordcloud,\ntextplot (required igraph, tidygraph and ggraph, )\nDT,\nlubridate and hms.\n\nThe code chunk:\n\npacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms,\ntidyverse, tidygraph, ggraph, igraph)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.3 Importing Multiple Text Files from Multiple Folders",
    "text": "29.3 Importing Multiple Text Files from Multiple Folders\n\n29.3.1 Creating a folder list\n\nnews20 &lt;- \"data/20news/\"\n\n\n\n29.3.2 Define a function to read all files from a folder into a data frame\n\nread_folder &lt;- function(infolder) {\n  tibble(file = dir(infolder, \n                    full.names = TRUE)) %&gt;%\n    mutate(text = map(file, \n                      read_lines)) %&gt;%\n    transmute(id = basename(file), \n              text) %&gt;%\n    unnest(text)\n}"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.4 Importing Multiple Text Files from Multiple Folders",
    "text": "29.4 Importing Multiple Text Files from Multiple Folders\n\n29.4.1 Reading in all the messages from the 20news folder\n\nraw_text &lt;- tibble(folder = \n                     dir(news20, \n                         full.names = TRUE)) %&gt;%\n  mutate(folder_out = map(folder, \n                          read_folder)) %&gt;%\n  unnest(cols = c(folder_out)) %&gt;%\n  transmute(newsgroup = basename(folder), \n            id, text)\nwrite_rds(raw_text, \"data/rds/news20.rds\")\n\n\n\n\n\n\n\nThings to learn from the code:\n\n\n\n\nread_lines() of readr package is used to read up to n_max lines from a file.\nmap() of purrr package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.\nunnest() of dplyr package is used to flatten a list-column of data frames back out into regular columns.\nmutate() of dplyr is used to add new variables and preserves existing ones;\ntransmute() of dplyr is used to add new variables and drops existing ones.\nread_rds() is used to save the extracted and combined data frame as rds file for future use."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#initial-eda",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#initial-eda",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.5 Initial EDA",
    "text": "29.5 Initial EDA\nFigure below shows the frequency of messages by newsgroup.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnews20 &lt;- read_rds(\"data/rds/news20.rds\")\nraw_text &lt;- news20\nraw_text %&gt;%\n  group_by(newsgroup) %&gt;%\n  summarize(messages = n_distinct(id)) %&gt;%\n  ggplot(aes(messages, newsgroup)) +\n  geom_col(fill = \"lightblue\") +\n  labs(y = NULL)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#introducing-tidytext",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#introducing-tidytext",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.6 Introducing tidytext",
    "text": "29.6 Introducing tidytext\n\nUsing tidy data principles in processing, analysing and visualising text data.\nMuch of the infrastructure needed for text mining with tidy data frames already exists in packages like ‘dplyr’, ‘broom’, ‘tidyr’, and ‘ggplot2’.\n\nFigure below shows the workflow using tidytext approach for processing and visualising text data.\n\n\n29.6.1 Removing header and automated email signitures\nNotice that each message has some structure and extra text that we don’t want to include in our analysis. For example, every message has a header, containing field such as “from:” or “in_reply_to:” that describe the message. Some also have automated email signatures, which occur after a line like “–”.\n\ncleaned_text &lt;- raw_text %&gt;%\n  group_by(newsgroup, id) %&gt;%\n  filter(cumsum(text == \"\") &gt; 0,\n         cumsum(str_detect(\n           text, \"^--\")) == 0) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn:\n\n\n\n\ncumsum() of base R is used to return a vector whose elements are the cumulative sums of the elements of the argument.\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\n\n\n\n\n\n29.6.2 Removing lines with nested text representing quotes from other users.\nIn this code chunk below, regular expressions are used to remove with nested text representing quotes from other users.\n\ncleaned_text &lt;- cleaned_text %&gt;%\n  filter(str_detect(text, \"^[^&gt;]+[A-Za-z\\\\d]\")\n         | text == \"\",\n         !str_detect(text, \n                     \"writes(:|\\\\.\\\\.\\\\.)$\"),\n         !str_detect(text, \n                     \"^In article &lt;\")\n  )\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\nfilter() of dplyr package is used to subset a data frame, retaining all rows that satisfy the specified conditions.\n\n\n\n\n\n29.6.3 Text Data Processing\nIn this code chunk below, unnest_tokens() of tidytext package is used to split the dataset into tokens, while stop_words() is used to remove stop-words.\n\nusenet_words &lt;- cleaned_text %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n         !word %in% stop_words$word)\n\nNow that we’ve removed the headers, signatures, and formatting, we can start exploring common words. For starters, we could find the most common words in the entire dataset, or within particular newsgroups.\n\nusenet_words %&gt;%\n  count(word, sort = TRUE)\n\n# A tibble: 5,542 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 people        57\n 2 time          50\n 3 jesus         47\n 4 god           44\n 5 message       40\n 6 br            27\n 7 bible         23\n 8 drive         23\n 9 homosexual    23\n10 read          22\n# ℹ 5,532 more rows\n\n\nInstead of counting individual word, you can also count words within by newsgroup by using the code chunk below.\n\nwords_by_newsgroup &lt;- usenet_words %&gt;%\n  count(newsgroup, word, sort = TRUE) %&gt;%\n  ungroup()\n\n\n\n29.6.4 Visualising Words in newsgroups\nIn this code chunk below, wordcloud() of wordcloud package is used to plot a static wordcloud.\n\nwordcloud(words_by_newsgroup$word,\n          words_by_newsgroup$n,\n          max.words = 300)\n\n\n\n\n\n\n\n\nA DT table can be used to complement the visual discovery.\n\nset.seed(1234)\n\nwords_by_newsgroup %&gt;%\n  filter(n &gt; 0) %&gt;%\nggplot(aes(label = word,\n           size = n)) +\n  geom_text_wordcloud() +\n  theme_minimal() +\n  facet_wrap(~newsgroup)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.7 Basic Concept of TF-IDF",
    "text": "29.7 Basic Concept of TF-IDF\n\ntf–idf, short for term frequency–inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection of corpus.\n\n\n\n29.7.1 Computing tf-idf within newsgroups\nThe code chunk below uses bind_tf_idf() of tidytext to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.\n\ntf_idf &lt;- words_by_newsgroup %&gt;%\n  bind_tf_idf(word, newsgroup, n) %&gt;%\n  arrange(desc(tf_idf))\n\n\n\n29.7.2 Visualising tf-idf as interactive table\nTable below is an interactive table created by using datatable().\n\nDT::datatable(tf_idf, filter = 'top') %&gt;% \n  formatRound(columns = c('tf', 'idf', \n                          'tf_idf'), \n              digits = 3) %&gt;%\n  formatStyle(0, \n              target = 'row', \n              lineHeight='25%')\n\n\n\n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\nfilter() argument is used to turn control the filter UI.\nformatRound() is used to customise the values format. The argument digits define the number of decimal places.\nformatStyle() is used to customise the output table.\n\n\n\nTo learn more about customising DT’s table, visit this link.\n\n\n29.7.4 Visualising tf-idf within newsgroups\nFacet bar charts technique is used to visualise the tf-idf values of science related newsgroup.\n\ntf_idf %&gt;%\n  filter(str_detect(newsgroup, \"^sci\\\\.\")) %&gt;%\n  group_by(newsgroup) %&gt;%\n  slice_max(tf_idf, \n            n = 12) %&gt;%\n  ungroup() %&gt;%\n  mutate(word = reorder(word, \n                        tf_idf)) %&gt;%\n  ggplot(aes(tf_idf, \n             word, \n             fill = newsgroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ newsgroup, \n             scales = \"free\") +\n  labs(x = \"tf-idf\", \n       y = NULL)\n\n\n\n\n\n\n\n\n\n\n29.7.5 Counting and correlating pairs of words with the widyr package\n\nTo count the number of times that two words appear within the same document, or to see how correlated they are.\nMost operations for finding pairwise counts or correlations need to turn the data into a wide matrix first.\nwidyr package first ‘casts’ a tidy dataset into a wide matrix, performs an operation such as a correlation on it, then re-tidies the result.\n\n\nIn this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.\n\nnewsgroup_cors &lt;- words_by_newsgroup %&gt;%\n  pairwise_cor(newsgroup, \n               word, \n               n, \n               sort = TRUE)\n\n\n\n29.7.6 Visualising correlation as a network\nNow, we can visualise the relationship between newgroups in network graph as shown below.\n\nset.seed(2017)\n\nnewsgroup_cors %&gt;%\n  filter(correlation &gt; .025) %&gt;%\n  graph_from_data_frame() %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = correlation, \n                     width = correlation)) +\n  geom_node_point(size = 6, \n                  color = \"lightblue\") +\n  geom_node_text(aes(label = name),\n                 color = \"red\",\n                 repel = TRUE) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n29.7.7 Bigram\nIn this code chunk below, a bigram data frame is created by using unnest_tokens() of tidytext.\n\nbigrams &lt;- cleaned_text %&gt;%\n  unnest_tokens(bigram, \n                text, \n                token = \"ngrams\", \n                n = 2)\nbigrams \n\n# A tibble: 28,827 × 3\n   newsgroup   id    bigram    \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;     \n 1 alt.atheism 54256 &lt;NA&gt;      \n 2 alt.atheism 54256 &lt;NA&gt;      \n 3 alt.atheism 54256 as i      \n 4 alt.atheism 54256 i don't   \n 5 alt.atheism 54256 don't know\n 6 alt.atheism 54256 know this \n 7 alt.atheism 54256 this book \n 8 alt.atheism 54256 book i    \n 9 alt.atheism 54256 i will    \n10 alt.atheism 54256 will use  \n# ℹ 28,817 more rows\n\n\n\n\n29.7.8 Counting bigrams\nThe code chunk is used to count and sort the bigram data frame ascendingly.\n\nbigrams_count &lt;- bigrams %&gt;%\n  filter(bigram != 'NA') %&gt;%\n  count(bigram, sort = TRUE)\nbigrams_count\n\n# A tibble: 19,888 × 2\n   bigram       n\n   &lt;chr&gt;    &lt;int&gt;\n 1 of the     169\n 2 in the     113\n 3 to the      74\n 4 to be       59\n 5 for the     52\n 6 i have      48\n 7 that the    47\n 8 if you      40\n 9 on the      39\n10 it is       38\n# ℹ 19,878 more rows\n\n\n\n\n29.7.9 Cleaning bigram\nThe code chunk below is used to seperate the bigram into two words.\n\nbigrams_separated &lt;- bigrams %&gt;%\n  filter(bigram != 'NA') %&gt;%\n  separate(bigram, c(\"word1\", \"word2\"), \n           sep = \" \")\n\nbigrams_filtered &lt;- bigrams_separated %&gt;%\n  filter(!word1 %in% stop_words$word) %&gt;%\n  filter(!word2 %in% stop_words$word)\n\nbigrams_filtered\n\n# A tibble: 4,607 × 4\n   newsgroup   id    word1        word2        \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;        \n 1 alt.atheism 54256 defines      god          \n 2 alt.atheism 54256 term         preclues     \n 3 alt.atheism 54256 science      ideas        \n 4 alt.atheism 54256 ideas        drawn        \n 5 alt.atheism 54256 supernatural precludes    \n 6 alt.atheism 54256 scientific   assertions   \n 7 alt.atheism 54256 religious    dogma        \n 8 alt.atheism 54256 religion     involves     \n 9 alt.atheism 54256 involves     circumventing\n10 alt.atheism 54256 gain         absolute     \n# ℹ 4,597 more rows\n\n\n\n\n29.7.10 Counting the bigram again\n\nbigram_counts &lt;- bigrams_filtered %&gt;% \n  count(word1, word2, sort = TRUE)\n\n\n\n29.7.11 Create a network graph from bigram data frame\nIn the code chunk below, a network graph is created by using graph_from_data_frame() of igraph package.\n\nbigram_graph &lt;- bigram_counts %&gt;%\n  filter(n &gt; 3) %&gt;%\n  graph_from_data_frame()\nbigram_graph\n\nIGRAPH 95f7ccf DN-- 40 24 -- \n+ attr: name (v/c), n (e/n)\n+ edges from 95f7ccf (vertex names):\n [1] 1          -&gt;2           1          -&gt;3           static     -&gt;void       \n [4] time       -&gt;pad         1          -&gt;4           infield    -&gt;fly        \n [7] mat        -&gt;28          vv         -&gt;vv          1          -&gt;5          \n[10] cock       -&gt;crow        noticeshell-&gt;widget      27         -&gt;1993       \n[13] 3          -&gt;4           child      -&gt;molestation cock       -&gt;crew       \n[16] gun        -&gt;violence    heat       -&gt;sink        homosexual -&gt;male       \n[19] homosexual -&gt;women       include    -&gt;xol         mary       -&gt;magdalene  \n[22] read       -&gt;write       rev        -&gt;20          tt         -&gt;ee         \n\n\n\n\n29.7.12 Visualizing a network of bigrams with ggraph\nIn this code chunk below, ggraph package is used to plot the bigram.\n\nset.seed(1234)\n\nggraph(bigram_graph, layout = \"fr\") +\n  geom_edge_link() +\n  geom_node_point() +\n  geom_node_text(aes(label = name), \n                 vjust = 1, \n                 hjust = 1)\n\n\n\n\n\n\n\n\n\n\n29.7.13 Revised version\n\nset.seed(1234)\n\na &lt;- grid::arrow(type = \"closed\", \n                 length = unit(.15,\n                               \"inches\"))\n\nggraph(bigram_graph, \n       layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = n), \n                 show.legend = FALSE,\n                 arrow = a, \n                 end_cap = circle(.07,\n                                  'inches')) +\n  geom_node_point(color = \"lightblue\", \n                  size = 5) +\n  geom_node_text(aes(label = name), \n                 vjust = 1, \n                 hjust = 1) +\n  theme_void()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#references",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex05.html#references",
    "title": "Hands-on Ex 5: 29 Visualising and Analysing Text Data with R: tidytext methods",
    "section": "29.8 References",
    "text": "29.8 References\n\n29.8.0.1 widyr\n\nReference guide\n\nwidyr: Widen, process, and re-tidy a dataset\nUnited Nations Voting Correlations"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages\n\npacman::p_load(tidyverse)\n\n\nrealis.csv &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis.csv,\n       aes(x = `Unit Price ($ psm)`)) + \n  geom_histogram()"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages\n\npacman::p_load(tidyverse)\n\n\nrealis.csv &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis.csv,\n       aes(x = `Unit Price ($ psm)`)) + \n  geom_histogram()"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Ex04: Visualising Statistical Analysis",
    "section": "",
    "text": "pacman::p_load(ggstatsplot, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe parametric test (student’s t):\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe non-parametric(Wilcoxon) test will have median line plotted instead of mean.\n\nset.seed(1234)\n\np_n &lt;- gghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"non-parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\nHow to save the tibble after plotting: - save the plot as an object “p_n”\n\nextract_stats(p_n)\n\n$subtitle_data\n# A tibble: 1 × 12\n  statistic  p.value method                    alternative effectsize       \n      &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;                     &lt;chr&gt;       &lt;chr&gt;            \n1     38743 3.43e-16 Wilcoxon signed rank test two.sided   r (rank biserial)\n  estimate conf.level conf.low conf.high conf.method n.obs expression\n     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;list&gt;    \n1    0.528       0.95    0.430     0.613 normal        322 &lt;language&gt;\n\n$caption_data\nNULL\n\n$pairwise_comparisons_data\nNULL\n\n$descriptive_data\nNULL\n\n$one_sample_data\nNULL\n\n$tidy_data\nNULL\n\n$glance_data\nNULL\n\n\nThe parametric test (student’s t):\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe robust(bootstrapped method) test will have trimmed mean line plotted instead of mean.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"robust\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe parametric test (student’s t):\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe bayes test will have not have the Bayes statistics below. mean of MAP used instead.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nAdjusting normal.curve TRUE / FALSE Adjusting normal.curve.args as list\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = TRUE,\n  normal.curve.args = list(linewidth = 0.5),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nNotes on reading documentation: - Logical value: TRUE or FALSE - normal.curve.arg: can use a list of ggplot’s aesthetic arguments\nDot plot: - does sorting from highest to lowest and present in percentile.\n\nggdotplotstats(\n  data = exam,\n  x = ENGLISH,\n  y = CLASS,\n  title = \"\",\n  xlab = \"\"\n)\n\n\n\n\n\n\n\n\nLooking at the exam tibble:\n\nWe need to have a subject column and a scores column instead of the current form with Subjects as the header with all the scores as data.\nDo a pivot table to combine ENGLISH, MATHS, SCIENCE into a subject column.\n\n\nexam_long &lt;- exam %&gt;%\n  pivot_longer(\n    cols = ENGLISH:SCIENCE,\n    names_to = \"SUBJECT\",\n    values_to = \"SCORES\") %&gt;%\n  filter(CLASS == \"3A\")\n\nNote:Data can be filtered using tidyverse commands\n\nggwithinstats(\n  data = filter(exam_long,\n                SUBJECT %in%\n                  c(\"MATHS\", \"SCIENCE\")),\n  x = SUBJECT,\n  y = SCORES,\n  type = \"p\"\n)\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats() wrapped scatter plot into the function.\n\nmarginal set to TRUE for marginal distribution.\n\nlabel.expression allow us to label/highlight the things we want to focus on.\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  label.var = ID,\n  label.expression = ENGLISH &gt; 90 & MATHS &gt; 90,\n  smooth.line.args = list(linewidth = 1, color = \"red\", method = \"lm\", formula = y ~\n    x)\n  )"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#section",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#section",
    "title": "In-class Ex04: Visualising Statistical Analysis",
    "section": "",
    "text": "pacman::p_load(ggstatsplot, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe parametric test (student’s t):\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe non-parametric(Wilcoxon) test will have median line plotted instead of mean.\n\nset.seed(1234)\n\np_n &lt;- gghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"non-parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\nHow to save the tibble after plotting: - save the plot as an object “p_n”\n\nextract_stats(p_n)\n\n$subtitle_data\n# A tibble: 1 × 12\n  statistic  p.value method                    alternative effectsize       \n      &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;                     &lt;chr&gt;       &lt;chr&gt;            \n1     38743 3.43e-16 Wilcoxon signed rank test two.sided   r (rank biserial)\n  estimate conf.level conf.low conf.high conf.method n.obs expression\n     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;list&gt;    \n1    0.528       0.95    0.430     0.613 normal        322 &lt;language&gt;\n\n$caption_data\nNULL\n\n$pairwise_comparisons_data\nNULL\n\n$descriptive_data\nNULL\n\n$one_sample_data\nNULL\n\n$tidy_data\nNULL\n\n$glance_data\nNULL\n\n\nThe parametric test (student’s t):\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe robust(bootstrapped method) test will have trimmed mean line plotted instead of mean.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"robust\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe parametric test (student’s t):\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"parametric\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nThe bayes test will have not have the Bayes statistics below. mean of MAP used instead.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth = 2),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nAdjusting normal.curve TRUE / FALSE Adjusting normal.curve.args as list\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  bin.args = list(color = \"black\",\n                  fill = \"grey50\",\n                  alpha = 0.7),\n  normal.curve = TRUE,\n  normal.curve.args = list(linewidth = 0.5),\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nNotes on reading documentation: - Logical value: TRUE or FALSE - normal.curve.arg: can use a list of ggplot’s aesthetic arguments\nDot plot: - does sorting from highest to lowest and present in percentile.\n\nggdotplotstats(\n  data = exam,\n  x = ENGLISH,\n  y = CLASS,\n  title = \"\",\n  xlab = \"\"\n)\n\n\n\n\n\n\n\n\nLooking at the exam tibble:\n\nWe need to have a subject column and a scores column instead of the current form with Subjects as the header with all the scores as data.\nDo a pivot table to combine ENGLISH, MATHS, SCIENCE into a subject column.\n\n\nexam_long &lt;- exam %&gt;%\n  pivot_longer(\n    cols = ENGLISH:SCIENCE,\n    names_to = \"SUBJECT\",\n    values_to = \"SCORES\") %&gt;%\n  filter(CLASS == \"3A\")\n\nNote:Data can be filtered using tidyverse commands\n\nggwithinstats(\n  data = filter(exam_long,\n                SUBJECT %in%\n                  c(\"MATHS\", \"SCIENCE\")),\n  x = SUBJECT,\n  y = SCORES,\n  type = \"p\"\n)\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats() wrapped scatter plot into the function.\n\nmarginal set to TRUE for marginal distribution.\n\nlabel.expression allow us to label/highlight the things we want to focus on.\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  label.var = ID,\n  label.expression = ENGLISH &gt; 90 & MATHS &gt; 90,\n  smooth.line.args = list(linewidth = 1, color = \"red\", method = \"lm\", formula = y ~\n    x)\n  )"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#visualing-models",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#visualing-models",
    "title": "In-class Ex04: Visualising Statistical Analysis",
    "section": "10.4 Visualing Models",
    "text": "10.4 Visualing Models\n\nDiagnostics Test on Models"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my first Quarto website",
    "section": "",
    "text": "This is my first Quarto website.\nThe picture below shows my brain working at 100% learning about visual analytics.\n\nSome recommended readings for this course:\n\nR for Data Science, 2nd Edition\nR for Visual Analytics\nText Mining with R\n\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "Self-Practice/Self-Practice_02/Self-Practice_02.html",
    "href": "Self-Practice/Self-Practice_02/Self-Practice_02.html",
    "title": "Self Practice 2: R for Data Science",
    "section": "",
    "text": "library(nycflights13)\nlibrary(tidyverse)\n\n\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nThe most important difference between tibbles and data frames is the way tibbles print; they are designed for large datasets, so they only show the first few rows and only the columns that fit on one screen. There are a few options to see everything. If you’re using RStudio, the most convenient is probably View(flights), which will open an interactive scrollable and filterable view. Otherwise you can use print(flights, width = Inf) to show all columns, or use glimpse():\n\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\nIn both views, the variables names are followed by abbreviations that tell you the type of each variable: &lt;int&gt; is short for integer, &lt;dbl&gt; is short for double (aka real numbers), &lt;chr&gt; for character (aka strings), and &lt;dttm&gt; for date-time. These are important because the operations you can perform on a column depend so much on its “type”.\n\n\nYou’re about to learn the primary dplyr verbs (functions) which will allow you to solve the vast majority of your data manipulation challenges. But before we discuss their individual differences, it’s worth stating what they have in common:\n\nThe first argument is always a data frame.\nThe subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).\nThe output is always a new data frame.\n\n\nflights |&gt;\n  filter(dest == \"IAH\") |&gt; \n  group_by(year, month, day) |&gt; \n  summarize(\n    arr_delay = mean(arr_delay, na.rm = TRUE)\n  )\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1     17.8 \n 2  2013     1     2      7   \n 3  2013     1     3     18.3 \n 4  2013     1     4     -3.2 \n 5  2013     1     5     20.2 \n 6  2013     1     6      9.28\n 7  2013     1     7     -7.74\n 8  2013     1     8      7.79\n 9  2013     1     9     18.1 \n10  2013     1    10      6.68\n# ℹ 355 more rows\n\n\n\n\n\nThe most important verbs that operate on rows of a dataset are filter(), which changes which rows are present without changing their order, and arrange(), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss distinct() which finds rows with unique values but unlike arrange() and filter() it can also optionally modify the columns.\n\n\nfilter() allows you to keep rows based on the values of the columns1. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row. For example, we could find all flights that departed more than 120 minutes (two hours) late:\n\nflights |&gt;\n  filter(dep_delay &gt; 120)\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# Flights that departed on January 1\nflights |&gt; \n  filter(month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# Flights that departed in January or February\nflights |&gt; \n  filter(month == 1 | month == 2)\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# A shorter way to select flights that departed in January or February\nflights |&gt; \n  filter(month %in% c(1, 2))\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\narrange() changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns. For example, the following code sorts by the departure time, which is spread over four columns. We get the earliest years first, then within a year the earliest months, etc.\n\nflights |&gt; \n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nYou can use desc() on a column inside of arrange() to re-order the data frame based on that column in descending (big-to-small) order. For example, this code orders flights from most to least delayed:\n\nflights |&gt;\n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\ndistinct() finds all the unique rows in a dataset, so in a technical sense, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names:\n\n# Remove duplicate rows, if any\nflights |&gt; \n  distinct()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# Find all unique origin and destination pairs\nflights |&gt; \n  distinct(origin, dest)\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n\n\nAlternatively, if you want to the keep other columns when filtering for unique rows, you can use the .keep_all = TRUE option.\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIt’s not a coincidence that all of these distinct flights are on January 1: distinct() will find the first occurrence of a unique row in the dataset and discard the rest.\nIf you want to find the number of occurrences instead, you’re better off swapping distinct() for count(), and with the sort = TRUE argument you can arrange them in descending order of number of occurrences. \n\nflights |&gt;\n  count(origin, dest, sort = TRUE)\n\n# A tibble: 224 × 3\n   origin dest      n\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n\n\n\n\n\n\nIn a single pipeline for each condition, find all flights that meet the condition:\n\nHad an arrival delay of two or more hours\n\n\n\nflights |&gt; \n  filter(arr_delay &gt;= 2)\n\n# A tibble: 127,929 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      555            600        -5      913            854\n 6  2013     1     1      558            600        -2      753            745\n 7  2013     1     1      558            600        -2      924            917\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      600            600         0      837            825\n10  2013     1     1      602            605        -3      821            805\n# ℹ 127,919 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Flew to Houston (`IAH` or `HOU`)\n\nflights |&gt; \n  filter(dest %in% c(\"IAH\",\"HOU\"))\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Were operated by United, American, or Delta\n\nflights |&gt; \n  filter(carrier %in% c(\"UA\",\"DL\"))\n\n# A tibble: 106,775 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      554            600        -6      812            837\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      924            917\n 6  2013     1     1      558            600        -2      923            937\n 7  2013     1     1      559            600        -1      854            902\n 8  2013     1     1      602            610        -8      812            820\n 9  2013     1     1      606            610        -4      837            845\n10  2013     1     1      607            607         0      858            915\n# ℹ 106,765 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Departed in summer (July, August, and September)\n\nflights |&gt; \n  filter(month %in% c(\"7\",\"8\", \"9\"))\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Arrived more than two hours late, but didn’t leave late\n\nflights |&gt; \n  filter(arr_delay &gt; 2 & dep_delay == 0)\n\n# A tibble: 4,368 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      600            600         0      837            825\n 2  2013     1     1      635            635         0     1028            940\n 3  2013     1     1      739            739         0     1104           1038\n 4  2013     1     1      745            745         0     1135           1125\n 5  2013     1     1      800            800         0     1022           1014\n 6  2013     1     1      805            805         0     1015           1005\n 7  2013     1     1      810            810         0     1048           1037\n 8  2013     1     1      823            823         0     1151           1135\n 9  2013     1     1      830            830         0     1018           1015\n10  2013     1     1      835            835         0     1210           1150\n# ℹ 4,358 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Were delayed by at least an hour, but made up over 30 minutes in flight.\n\nflights |&gt; \n  filter(dep_delay &gt; 1 & (dep_delay - arr_delay) &gt; 30 )\n\n# A tibble: 7,474 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      857            851         6     1157           1222\n 2  2013     1     1      909            810        59     1331           1315\n 3  2013     1     1     1025            951        34     1258           1302\n 4  2013     1     1     1625           1550        35     2054           2050\n 5  2013     1     1     1957           1945        12     2307           2329\n 6  2013     1     1     2035           2030         5     2337              5\n 7  2013     1     1     2046           2035        11     2144           2213\n 8  2013     1     1     2107           2040        27     2354           2359\n 9  2013     1     1     2205           1720       285       46           2040\n10  2013     1     1     2326           2130       116      131             18\n# ℹ 7,464 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nSort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nSort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\n\n\nflights |&gt; \n  arrange(desc(speed = distance/(hour+ minute/60)))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      857            900        -3     1516           1530\n 2  2013     1     2      909            900         9     1525           1530\n 3  2013     1     3      914            900        14     1504           1530\n 4  2013     1     4      900            900         0     1516           1530\n 5  2013     1     5      858            900        -2     1519           1530\n 6  2013     1     6     1019            900        79     1558           1530\n 7  2013     1     7     1042            900       102     1620           1530\n 8  2013     1     8      901            900         1     1504           1530\n 9  2013     1     9      641            900      1301     1242           1530\n10  2013     1    10      859            900        -1     1449           1530\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nWas there a flight on every day of 2013? Yes.\n\n\nflights |&gt; \n  distinct(year, month,day)\n\n# A tibble: 365 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     2\n 3  2013     1     3\n 4  2013     1     4\n 5  2013     1     5\n 6  2013     1     6\n 7  2013     1     7\n 8  2013     1     8\n 9  2013     1     9\n10  2013     1    10\n# ℹ 355 more rows\n\n\n\nWhich flights traveled the farthest distance? Which traveled the least distance?\n\nJFK-HNL = furthest\nEWR-LGA - nearest\n\n\n\nflights |&gt; \n  arrange(distance)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7    27       NA            106        NA       NA            245\n 2  2013     1     3     2127           2129        -2     2222           2224\n 3  2013     1     4     1240           1200        40     1333           1306\n 4  2013     1     4     1829           1615       134     1937           1721\n 5  2013     1     4     2128           2129        -1     2218           2224\n 6  2013     1     5     1155           1200        -5     1241           1306\n 7  2013     1     6     2125           2129        -4     2224           2224\n 8  2013     1     7     2124           2129        -5     2212           2224\n 9  2013     1     8     2127           2130        -3     2304           2225\n10  2013     1     9     2126           2129        -3     2217           2224\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nDoes it matter what order you used filter() and arrange() if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.\n\nfilter() should be used first as it will narrow down the number of rows that arrange() need to sort.\n\n\n\n\n\n\nThere are four important verbs that affect the columns without changing the rows: mutate() creates new columns that are derived from the existing columns, select() changes which columns are present, rename() changes the names of the columns, and relocate() changes the positions of the columns.\n\n\nThe job of mutate() is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables. For now, we’ll stick with basic algebra, which allows us to compute the gain, how much time a delayed flight made up in the air, and the speed in miles per hour:\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1\n  )\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nThe . is a sign that .before is an argument to the function, not the name of a third new variable we are creating. You can also use .after to add after a variable, and in both .before and .after you can use the variable name instead of a position. For example, we could add the new variables after day:\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day\n  )\n\n# A tibble: 336,776 × 21\n    year month   day  gain speed dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1    -9  370.      517            515         2      830\n 2  2013     1     1   -16  374.      533            529         4      850\n 3  2013     1     1   -31  408.      542            540         2      923\n 4  2013     1     1    17  517.      544            545        -1     1004\n 5  2013     1     1    19  394.      554            600        -6      812\n 6  2013     1     1   -16  288.      554            558        -4      740\n 7  2013     1     1   -24  404.      555            600        -5      913\n 8  2013     1     1    11  259.      557            600        -3      709\n 9  2013     1     1     5  405.      557            600        -3      838\n10  2013     1     1   -10  319.      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nNote that since we haven’t assigned the result of the above computation back to flights, the new variables gain, hours, and gain_per_hour will only be printed but will not be stored in a data frame. And if we want them to be available in a data frame for future use, we should think carefully about whether we want the result to be assigned back to flights, overwriting the original data frame with many more variables, or to a new object. Often, the right answer is a new object that is named informatively to indicate its contents, e.g., delay_gain, but you might also have good reasons for overwriting flights.\n\n\n\nIt’s not uncommon to get datasets with hundreds or even thousands of variables. In this situation, the first challenge is often just focusing on the variables you’re interested in. select() allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:\n\nSelect columns by name:\n\nflights |&gt;\n  select(year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\nSelect all columns between year and day (inclusive):\n\nflights |&gt;\n  select(year:day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\nSelect all columns except those from year to day (inclusive):\n\nflights |&gt;\n  select(!year:day)\n\n# A tibble: 336,776 × 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# ℹ 336,766 more rows\n# ℹ 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,\n#   air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nHistorically this operation was done with - instead of !, so you’re likely to see that in the wild. These two operators serve the same purpose but with subtle differences in behavior. We recommend using ! because it reads as “not” and combines well with & and |.\nSelect all columns that are characters:\n\nflights |&gt;\n  select(where(is.character))\n\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows\n\n\n\nThere are a number of helper functions you can use within select():\n\nstarts_with(\"abc\"): matches names that begin with “abc”.\nends_with(\"xyz\"): matches names that end with “xyz”.\ncontains(\"ijk\"): matches names that contain “ijk”.\nnum_range(\"x\", 1:3): matches x1, x2 and x3.\n\nSee ?select for more details. Once you know regular expressions (the topic of Chapter 15) you’ll also be able to use matches() to select variables that match a pattern.\nYou can rename variables as you select() them by using =. The new name appears on the left hand side of the =, and the old variable appears on the right hand side:\n\nflights |&gt; \n  select(tail_num = tailnum)\n\n# A tibble: 336,776 × 1\n   tail_num\n   &lt;chr&gt;   \n 1 N14228  \n 2 N24211  \n 3 N619AA  \n 4 N804JB  \n 5 N668DN  \n 6 N39463  \n 7 N516JB  \n 8 N829AS  \n 9 N593JB  \n10 N3ALAA  \n# ℹ 336,766 more rows\n\n\n\n\n\nIf you want to keep all the existing variables and just want to rename a few, you can use rename() instead of select():\n\nflights |&gt; \n  rename(tail_num = tailnum)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tail_num &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIf you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning.\n\n\n\nUse relocate() to move variables around. You might want to collect related variables together or move important variables to the front. By default relocate() moves variables to the front:\n\nflights |&gt; \n  relocate(time_hour, air_time)\n\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;\n\n\nYou can also specify where to put them using the .before and .after arguments, just like in mutate():\n\nflights |&gt; \n  relocate(year:dep_time, .after = time_hour)\n\n# A tibble: 336,776 × 19\n   sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight\n            &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;\n 1            515         2      830            819        11 UA        1545\n 2            529         4      850            830        20 UA        1714\n 3            540         2      923            850        33 AA        1141\n 4            545        -1     1004           1022       -18 B6         725\n 5            600        -6      812            837       -25 DL         461\n 6            558        -4      740            728        12 UA        1696\n 7            600        -5      913            854        19 B6         507\n 8            600        -3      709            723       -14 EV        5708\n 9            600        -3      838            846        -8 B6          79\n10            600        -2      753            745         8 AA         301\n# ℹ 336,766 more rows\n# ℹ 12 more variables: tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, year &lt;int&gt;,\n#   month &lt;int&gt;, day &lt;int&gt;, dep_time &lt;int&gt;\n\n\n\nflights |&gt; \n  relocate(starts_with(\"arr\"), .before = dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day arr_time arr_delay dep_time sched_dep_time dep_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1      830        11      517            515         2\n 2  2013     1     1      850        20      533            529         4\n 3  2013     1     1      923        33      542            540         2\n 4  2013     1     1     1004       -18      544            545        -1\n 5  2013     1     1      812       -25      554            600        -6\n 6  2013     1     1      740        12      554            558        -4\n 7  2013     1     1      913        19      555            600        -5\n 8  2013     1     1      709       -14      557            600        -3\n 9  2013     1     1      838        -8      557            600        -3\n10  2013     1     1      753         8      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\nCompare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?\n\ndep_delay = dep_time - sched_dep_time\n\nBrainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.\n\n\nflights |&gt;\n  select(contains(c(\"dep\", \"time\", \"arr\", \"delay\")))\n\n# A tibble: 336,776 × 9\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time air_time\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt;\n 1      517            515         2      830            819      227\n 2      533            529         4      850            830      227\n 3      542            540         2      923            850      160\n 4      544            545        -1     1004           1022      183\n 5      554            600        -6      812            837      116\n 6      554            558        -4      740            728      150\n 7      555            600        -5      913            854      158\n 8      557            600        -3      709            723       53\n 9      557            600        -3      838            846      140\n10      558            600        -2      753            745      138\n# ℹ 336,766 more rows\n# ℹ 3 more variables: time_hour &lt;dttm&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;\n\n\n\nWhat happens if you specify the name of the same variable multiple times in a select() call?\n\n\nflights |&gt;\n  select(arr_time,arr_time)\n\n# A tibble: 336,776 × 1\n   arr_time\n      &lt;int&gt;\n 1      830\n 2      850\n 3      923\n 4     1004\n 5      812\n 6      740\n 7      913\n 8      709\n 9      838\n10      753\n# ℹ 336,766 more rows\n\n\n\nWhat does the any_of() function do? Why might it be helpful in conjunction with this vector?\n\n\nvariables &lt;- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n\n\nflights |&gt;\n  select(any_of(variables))\n\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows\n\n\n\nflights |&gt; \n  select(contains(\"TIME\"))\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt; &lt;dttm&gt;             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\n\n\nflights |&gt; \n  mutate(air_time_min = air_time,\n         .before = 1)\n\n# A tibble: 336,776 × 20\n   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n          &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1          227  2013     1     1      517            515         2      830\n 2          227  2013     1     1      533            529         4      850\n 3          160  2013     1     1      542            540         2      923\n 4          183  2013     1     1      544            545        -1     1004\n 5          116  2013     1     1      554            600        -6      812\n 6          150  2013     1     1      554            558        -4      740\n 7          158  2013     1     1      555            600        -5      913\n 8           53  2013     1     1      557            600        -3      709\n 9          140  2013     1     1      557            600        -3      838\n10          138  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nWhy doesn’t the following work, and what does the error mean?\n\nafter selecting the column tailnum, there is no more column called arr_delay.\n\n\n\nflights |&gt; \n  select(tailnum) |&gt; \n  arrange(arr_delay)\n#&gt; Error in `arrange()`:\n#&gt; ℹ In argument: `..1 = arr_delay`.\n#&gt; Caused by error:\n#&gt; ! object 'arr_delay' not found\n\n\n\n\n\nWe’ve shown you simple examples of the pipe above, but its real power arises when you start to combine multiple verbs. For example, imagine that you wanted to find the fastest flights to Houston’s IAH airport: you need to combine filter(), mutate(), select(), and arrange():\n\nflights |&gt; \n  filter(dest == \"IAH\", ) |&gt; \n  mutate(speed = distance / air_time*60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n\n\nUse group_by() to divide your dataset into groups meaningful for your analysis:\n\nflights |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\ngroup_by() doesn’t change the data but, if you look closely at the output, you’ll notice that the output indicates that it is “grouped by” month (Groups: month [12]). This means subsequent operations will now work “by month”. group_by() adds this grouped feature (referred to as class) to the data frame, which changes the behavior of the subsequent verbs applied to the data.\n\n\n\nThe most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by summarize()3, as shown by the following example, which computes the average departure delay by month:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_delay = mean(dep_delay)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1        NA\n 2     2        NA\n 3     3        NA\n 4     4        NA\n 5     5        NA\n 6     6        NA\n 7     7        NA\n 8     8        NA\n 9     9        NA\n10    10        NA\n11    11        NA\n12    12        NA\n\n\nUhoh! Something has gone wrong and all of our results are NAs (pronounced “N-A”), R’s symbol for missing value. This happened because some of the observed flights had missing data in the delay column, and so when we calculated the mean including those values, we got an NA result. We’ll come back to discuss missing values in detail in Chapter 18, but for now we’ll tell the mean() function to ignore all missing values by setting the argument na.rm to TRUE.\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1     10.0 \n 2     2     10.8 \n 3     3     13.2 \n 4     4     13.9 \n 5     5     13.0 \n 6     6     20.8 \n 7     7     21.7 \n 8     8     12.6 \n 9     9      6.72\n10    10      6.24\n11    11      5.44\n12    12     16.6 \n\n\nYou can create any number of summaries in a single call to summarize(). You’ll learn various useful summaries in the upcoming chapters, but one very useful summary is n(), which returns the number of rows in each group:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n\n# A tibble: 12 × 3\n   month avg_delay     n\n   &lt;int&gt;     &lt;dbl&gt; &lt;int&gt;\n 1     1     10.0  27004\n 2     2     10.8  24951\n 3     3     13.2  28834\n 4     4     13.9  28330\n 5     5     13.0  28796\n 6     6     20.8  28243\n 7     7     21.7  29425\n 8     8     12.6  29327\n 9     9      6.72 27574\n10    10      6.24 28889\n11    11      5.44 27268\n12    12     16.6  28135\n\n\nMeans and counts can get you a surprisingly long way in data science!\n\n\n\nThere are five handy functions that allow you extract specific rows within each group:\n\ndf |&gt; slice_head(n = 1) takes the first row from each group.\ndf |&gt; slice_tail(n = 1) takes the last row in each group.\ndf |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x.\ndf |&gt; slice_max(x, n = 1) takes the row with the largest value of column x.\ndf |&gt; slice_sample(n = 1) takes one random row.\n\nYou can vary n to select more than one row, or instead of n =, you can use prop = 0.1 to select (e.g.) 10% of the rows in each group. For example, the following code finds the flights that are most delayed upon arrival at each destination:\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1,with_ties = FALSE) |&gt;\n  relocate(dest) |&gt; \n  arrange(desc(arr_delay))\n\n# A tibble: 105 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 95 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nNote that there are 105 destinations but we get 108 rows here. What’s up? slice_min() and slice_max() keep tied values so n = 1 means give us all rows with the highest value. If you want exactly one row per group you can set with_ties = FALSE.\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest) |&gt; \n  arrange(desc(arr_delay))\n\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 98 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nThis is similar to computing the max delay with summarize(), but you get the whole corresponding row (or rows if there’s a tie) instead of the single summary statistic.\n\n\n\nYou can create groups using more than one variable. For example, we could make a group for each date.\n\ndaily &lt;- flights |&gt;  \n  group_by(year, month, day)\ndaily\n\n# A tibble: 336,776 × 19\n# Groups:   year, month, day [365]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIf you’re happy with this behavior, you can explicitly request it in order to suppress the message:\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\ndaily_flights\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day     n\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1   842\n 2  2013     1     2   943\n 3  2013     1     3   914\n 4  2013     1     4   915\n 5  2013     1     5   720\n 6  2013     1     6   832\n 7  2013     1     7   933\n 8  2013     1     8   899\n 9  2013     1     9   902\n10  2013     1    10   932\n# ℹ 355 more rows\n\n\nAlternatively, change the default behavior by setting a different value, e.g., “drop” to drop all grouping or “keep” to preserve the same groups.\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop\"\n  )\ndaily_flights\n\n# A tibble: 365 × 4\n    year month   day     n\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1   842\n 2  2013     1     2   943\n 3  2013     1     3   914\n 4  2013     1     4   915\n 5  2013     1     5   720\n 6  2013     1     6   832\n 7  2013     1     7   933\n 8  2013     1     8   899\n 9  2013     1     9   902\n10  2013     1    10   932\n# ℹ 355 more rows\n\n\n\n\n\nYou might also want to remove grouping from a data frame without using summarize(). You can do this with ungroup().\n\ndaily |&gt; \n  ungroup()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nNow let’s see what happens when you summarize an ungrouped data frame.\n\ndaily |&gt; \n  ungroup() |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n\n# A tibble: 1 × 2\n  avg_delay flights\n      &lt;dbl&gt;   &lt;int&gt;\n1      12.6  336776\n\n\nYou get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group.\n\n\n\ndplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the .by argument. group_by() and ungroup() aren’t going away, but you can now also use the .by argument to group within a single operation:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  ) |&gt; \n  arrange(month)\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135\n\n\nOr if you want to group by multiple variables:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n\n# A tibble: 224 × 4\n   origin dest  delay     n\n   &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;int&gt;\n 1 EWR    IAH   11.8   3973\n 2 LGA    IAH    9.06  2951\n 3 JFK    MIA    9.34  3314\n 4 JFK    BQN    6.67   599\n 5 LGA    ATL   11.4  10263\n 6 EWR    ORD   14.6   6100\n 7 EWR    FLL   13.5   3793\n 8 LGA    IAD   16.7   1803\n 9 JFK    MCO   10.6   5464\n10 LGA    ORD   10.7   8857\n# ℹ 214 more rows\n\n\n\n\n\n\nWhich carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights |&gt; group_by(carrier, dest) |&gt; summarize(n()))\n\n\nflights |&gt; \n  group_by(carrier, dest) |&gt; \n  summarise(n())\n\n# A tibble: 314 × 3\n# Groups:   carrier [16]\n   carrier dest  `n()`\n   &lt;chr&gt;   &lt;chr&gt; &lt;int&gt;\n 1 9E      ATL      59\n 2 9E      AUS       2\n 3 9E      AVL      10\n 4 9E      BGR       1\n 5 9E      BNA     474\n 6 9E      BOS     914\n 7 9E      BTV       2\n 8 9E      BUF     833\n 9 9E      BWI     856\n10 9E      CAE       3\n# ℹ 304 more rows\n\n\n\nFind the flights that are most delayed upon departure from each destination.\n\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(dep_delay) |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 105 × 19\n# Groups:   dest [105]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 95 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nHow do delays vary over the course of the day. Illustrate your answer with a plot.\nWhat happens if you supply a negative n to slice_min() and friends?\nExplain what count() does in terms of the dplyr verbs you just learned. What does the sort argument to count() do?\n\n\ndf &lt;- tibble(\n  x = 1:5,\n  y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n  z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n)\n\n\ndf |&gt;\n  group_by(y)\n\n# A tibble: 5 × 3\n# Groups:   y [2]\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     2 b     K    \n3     3 a     L    \n4     4 a     L    \n5     5 b     K    \n\n\n\ndf |&gt;\n  arrange(y)\n\n# A tibble: 5 × 3\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     3 a     L    \n3     4 a     L    \n4     2 b     K    \n5     5 b     K    \n\n\n\ndf |&gt;\n  group_by(y) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 2 × 2\n  y     mean_x\n  &lt;chr&gt;  &lt;dbl&gt;\n1 a       2.67\n2 b       3.5 \n\n\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\n\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x), .groups = \"drop\")\n\n# A tibble: 3 × 3\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\n\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  mutate(mean_x = mean(x))\n\n# A tibble: 5 × 4\n# Groups:   y, z [3]\n      x y     z     mean_x\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 a     K        1  \n2     2 b     K        3.5\n3     3 a     L        3.5\n4     4 a     L        3.5\n5     5 b     K        3.5\n\n\n\n\n\n\nWhenever you do any aggregation, it’s always a good idea to include a count (n()). That way, you can ensure that you’re not drawing conclusions based on very small amounts of data. We’ll demonstrate this with some baseball data from the Lahman package. Specifically, we will compare what proportion of times a player gets a hit (H) vs. the number of times they try to put the ball in play (AB):\n\nbatters &lt;- Lahman::Batting |&gt; \n  group_by(playerID) |&gt; \n  summarize(\n    performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),\n    n = sum(AB, na.rm = TRUE)\n  )\nbatters\n\n# A tibble: 20,469 × 3\n   playerID  performance     n\n   &lt;chr&gt;           &lt;dbl&gt; &lt;int&gt;\n 1 aardsda01      0          4\n 2 aaronha01      0.305  12364\n 3 aaronto01      0.229    944\n 4 aasedo01       0          5\n 5 abadan01       0.0952    21\n 6 abadfe01       0.111      9\n 7 abadijo01      0.224     49\n 8 abbated01      0.254   3044\n 9 abbeybe01      0.169    225\n10 abbeych01      0.281   1756\n# ℹ 20,459 more rows\n\n\n\nbatters |&gt; \n  filter(n &gt; 100) |&gt; \n  ggplot(aes(x = n, y = performance)) +\n  geom_point(alpha = 1 / 10) + \n  geom_smooth(se = FALSE)"
  },
  {
    "objectID": "Self-Practice/Self-Practice_02/Self-Practice_02.html#rows",
    "href": "Self-Practice/Self-Practice_02/Self-Practice_02.html#rows",
    "title": "Self Practice 2: R for Data Science",
    "section": "",
    "text": "The most important verbs that operate on rows of a dataset are filter(), which changes which rows are present without changing their order, and arrange(), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss distinct() which finds rows with unique values but unlike arrange() and filter() it can also optionally modify the columns.\n\n\nfilter() allows you to keep rows based on the values of the columns1. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row. For example, we could find all flights that departed more than 120 minutes (two hours) late:\n\nflights |&gt;\n  filter(dep_delay &gt; 120)\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# Flights that departed on January 1\nflights |&gt; \n  filter(month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# Flights that departed in January or February\nflights |&gt; \n  filter(month == 1 | month == 2)\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# A shorter way to select flights that departed in January or February\nflights |&gt; \n  filter(month %in% c(1, 2))\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\narrange() changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns. For example, the following code sorts by the departure time, which is spread over four columns. We get the earliest years first, then within a year the earliest months, etc.\n\nflights |&gt; \n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nYou can use desc() on a column inside of arrange() to re-order the data frame based on that column in descending (big-to-small) order. For example, this code orders flights from most to least delayed:\n\nflights |&gt;\n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\ndistinct() finds all the unique rows in a dataset, so in a technical sense, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names:\n\n# Remove duplicate rows, if any\nflights |&gt; \n  distinct()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# Find all unique origin and destination pairs\nflights |&gt; \n  distinct(origin, dest)\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n\n\nAlternatively, if you want to the keep other columns when filtering for unique rows, you can use the .keep_all = TRUE option.\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIt’s not a coincidence that all of these distinct flights are on January 1: distinct() will find the first occurrence of a unique row in the dataset and discard the rest.\nIf you want to find the number of occurrences instead, you’re better off swapping distinct() for count(), and with the sort = TRUE argument you can arrange them in descending order of number of occurrences. \n\nflights |&gt;\n  count(origin, dest, sort = TRUE)\n\n# A tibble: 224 × 3\n   origin dest      n\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n\n\n\n\n\n\nIn a single pipeline for each condition, find all flights that meet the condition:\n\nHad an arrival delay of two or more hours\n\n\n\nflights |&gt; \n  filter(arr_delay &gt;= 2)\n\n# A tibble: 127,929 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      555            600        -5      913            854\n 6  2013     1     1      558            600        -2      753            745\n 7  2013     1     1      558            600        -2      924            917\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      600            600         0      837            825\n10  2013     1     1      602            605        -3      821            805\n# ℹ 127,919 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Flew to Houston (`IAH` or `HOU`)\n\nflights |&gt; \n  filter(dest %in% c(\"IAH\",\"HOU\"))\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Were operated by United, American, or Delta\n\nflights |&gt; \n  filter(carrier %in% c(\"UA\",\"DL\"))\n\n# A tibble: 106,775 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      554            600        -6      812            837\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      924            917\n 6  2013     1     1      558            600        -2      923            937\n 7  2013     1     1      559            600        -1      854            902\n 8  2013     1     1      602            610        -8      812            820\n 9  2013     1     1      606            610        -4      837            845\n10  2013     1     1      607            607         0      858            915\n# ℹ 106,765 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Departed in summer (July, August, and September)\n\nflights |&gt; \n  filter(month %in% c(\"7\",\"8\", \"9\"))\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Arrived more than two hours late, but didn’t leave late\n\nflights |&gt; \n  filter(arr_delay &gt; 2 & dep_delay == 0)\n\n# A tibble: 4,368 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      600            600         0      837            825\n 2  2013     1     1      635            635         0     1028            940\n 3  2013     1     1      739            739         0     1104           1038\n 4  2013     1     1      745            745         0     1135           1125\n 5  2013     1     1      800            800         0     1022           1014\n 6  2013     1     1      805            805         0     1015           1005\n 7  2013     1     1      810            810         0     1048           1037\n 8  2013     1     1      823            823         0     1151           1135\n 9  2013     1     1      830            830         0     1018           1015\n10  2013     1     1      835            835         0     1210           1150\n# ℹ 4,358 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n-   Were delayed by at least an hour, but made up over 30 minutes in flight.\n\nflights |&gt; \n  filter(dep_delay &gt; 1 & (dep_delay - arr_delay) &gt; 30 )\n\n# A tibble: 7,474 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      857            851         6     1157           1222\n 2  2013     1     1      909            810        59     1331           1315\n 3  2013     1     1     1025            951        34     1258           1302\n 4  2013     1     1     1625           1550        35     2054           2050\n 5  2013     1     1     1957           1945        12     2307           2329\n 6  2013     1     1     2035           2030         5     2337              5\n 7  2013     1     1     2046           2035        11     2144           2213\n 8  2013     1     1     2107           2040        27     2354           2359\n 9  2013     1     1     2205           1720       285       46           2040\n10  2013     1     1     2326           2130       116      131             18\n# ℹ 7,464 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nSort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nSort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\n\n\nflights |&gt; \n  arrange(desc(speed = distance/(hour+ minute/60)))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      857            900        -3     1516           1530\n 2  2013     1     2      909            900         9     1525           1530\n 3  2013     1     3      914            900        14     1504           1530\n 4  2013     1     4      900            900         0     1516           1530\n 5  2013     1     5      858            900        -2     1519           1530\n 6  2013     1     6     1019            900        79     1558           1530\n 7  2013     1     7     1042            900       102     1620           1530\n 8  2013     1     8      901            900         1     1504           1530\n 9  2013     1     9      641            900      1301     1242           1530\n10  2013     1    10      859            900        -1     1449           1530\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nWas there a flight on every day of 2013? Yes.\n\n\nflights |&gt; \n  distinct(year, month,day)\n\n# A tibble: 365 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     2\n 3  2013     1     3\n 4  2013     1     4\n 5  2013     1     5\n 6  2013     1     6\n 7  2013     1     7\n 8  2013     1     8\n 9  2013     1     9\n10  2013     1    10\n# ℹ 355 more rows\n\n\n\nWhich flights traveled the farthest distance? Which traveled the least distance?\n\nJFK-HNL = furthest\nEWR-LGA - nearest\n\n\n\nflights |&gt; \n  arrange(distance)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7    27       NA            106        NA       NA            245\n 2  2013     1     3     2127           2129        -2     2222           2224\n 3  2013     1     4     1240           1200        40     1333           1306\n 4  2013     1     4     1829           1615       134     1937           1721\n 5  2013     1     4     2128           2129        -1     2218           2224\n 6  2013     1     5     1155           1200        -5     1241           1306\n 7  2013     1     6     2125           2129        -4     2224           2224\n 8  2013     1     7     2124           2129        -5     2212           2224\n 9  2013     1     8     2127           2130        -3     2304           2225\n10  2013     1     9     2126           2129        -3     2217           2224\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nDoes it matter what order you used filter() and arrange() if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.\n\nfilter() should be used first as it will narrow down the number of rows that arrange() need to sort."
  },
  {
    "objectID": "Self-Practice/Self-Practice_02/Self-Practice_02.html#columns",
    "href": "Self-Practice/Self-Practice_02/Self-Practice_02.html#columns",
    "title": "Self Practice 2: R for Data Science",
    "section": "",
    "text": "There are four important verbs that affect the columns without changing the rows: mutate() creates new columns that are derived from the existing columns, select() changes which columns are present, rename() changes the names of the columns, and relocate() changes the positions of the columns.\n\n\nThe job of mutate() is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables. For now, we’ll stick with basic algebra, which allows us to compute the gain, how much time a delayed flight made up in the air, and the speed in miles per hour:\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1\n  )\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nThe . is a sign that .before is an argument to the function, not the name of a third new variable we are creating. You can also use .after to add after a variable, and in both .before and .after you can use the variable name instead of a position. For example, we could add the new variables after day:\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day\n  )\n\n# A tibble: 336,776 × 21\n    year month   day  gain speed dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1    -9  370.      517            515         2      830\n 2  2013     1     1   -16  374.      533            529         4      850\n 3  2013     1     1   -31  408.      542            540         2      923\n 4  2013     1     1    17  517.      544            545        -1     1004\n 5  2013     1     1    19  394.      554            600        -6      812\n 6  2013     1     1   -16  288.      554            558        -4      740\n 7  2013     1     1   -24  404.      555            600        -5      913\n 8  2013     1     1    11  259.      557            600        -3      709\n 9  2013     1     1     5  405.      557            600        -3      838\n10  2013     1     1   -10  319.      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nNote that since we haven’t assigned the result of the above computation back to flights, the new variables gain, hours, and gain_per_hour will only be printed but will not be stored in a data frame. And if we want them to be available in a data frame for future use, we should think carefully about whether we want the result to be assigned back to flights, overwriting the original data frame with many more variables, or to a new object. Often, the right answer is a new object that is named informatively to indicate its contents, e.g., delay_gain, but you might also have good reasons for overwriting flights.\n\n\n\nIt’s not uncommon to get datasets with hundreds or even thousands of variables. In this situation, the first challenge is often just focusing on the variables you’re interested in. select() allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:\n\nSelect columns by name:\n\nflights |&gt;\n  select(year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\nSelect all columns between year and day (inclusive):\n\nflights |&gt;\n  select(year:day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\nSelect all columns except those from year to day (inclusive):\n\nflights |&gt;\n  select(!year:day)\n\n# A tibble: 336,776 × 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# ℹ 336,766 more rows\n# ℹ 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,\n#   air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nHistorically this operation was done with - instead of !, so you’re likely to see that in the wild. These two operators serve the same purpose but with subtle differences in behavior. We recommend using ! because it reads as “not” and combines well with & and |.\nSelect all columns that are characters:\n\nflights |&gt;\n  select(where(is.character))\n\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows\n\n\n\nThere are a number of helper functions you can use within select():\n\nstarts_with(\"abc\"): matches names that begin with “abc”.\nends_with(\"xyz\"): matches names that end with “xyz”.\ncontains(\"ijk\"): matches names that contain “ijk”.\nnum_range(\"x\", 1:3): matches x1, x2 and x3.\n\nSee ?select for more details. Once you know regular expressions (the topic of Chapter 15) you’ll also be able to use matches() to select variables that match a pattern.\nYou can rename variables as you select() them by using =. The new name appears on the left hand side of the =, and the old variable appears on the right hand side:\n\nflights |&gt; \n  select(tail_num = tailnum)\n\n# A tibble: 336,776 × 1\n   tail_num\n   &lt;chr&gt;   \n 1 N14228  \n 2 N24211  \n 3 N619AA  \n 4 N804JB  \n 5 N668DN  \n 6 N39463  \n 7 N516JB  \n 8 N829AS  \n 9 N593JB  \n10 N3ALAA  \n# ℹ 336,766 more rows\n\n\n\n\n\nIf you want to keep all the existing variables and just want to rename a few, you can use rename() instead of select():\n\nflights |&gt; \n  rename(tail_num = tailnum)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tail_num &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIf you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning.\n\n\n\nUse relocate() to move variables around. You might want to collect related variables together or move important variables to the front. By default relocate() moves variables to the front:\n\nflights |&gt; \n  relocate(time_hour, air_time)\n\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;\n\n\nYou can also specify where to put them using the .before and .after arguments, just like in mutate():\n\nflights |&gt; \n  relocate(year:dep_time, .after = time_hour)\n\n# A tibble: 336,776 × 19\n   sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight\n            &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;\n 1            515         2      830            819        11 UA        1545\n 2            529         4      850            830        20 UA        1714\n 3            540         2      923            850        33 AA        1141\n 4            545        -1     1004           1022       -18 B6         725\n 5            600        -6      812            837       -25 DL         461\n 6            558        -4      740            728        12 UA        1696\n 7            600        -5      913            854        19 B6         507\n 8            600        -3      709            723       -14 EV        5708\n 9            600        -3      838            846        -8 B6          79\n10            600        -2      753            745         8 AA         301\n# ℹ 336,766 more rows\n# ℹ 12 more variables: tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, year &lt;int&gt;,\n#   month &lt;int&gt;, day &lt;int&gt;, dep_time &lt;int&gt;\n\n\n\nflights |&gt; \n  relocate(starts_with(\"arr\"), .before = dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day arr_time arr_delay dep_time sched_dep_time dep_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1      830        11      517            515         2\n 2  2013     1     1      850        20      533            529         4\n 3  2013     1     1      923        33      542            540         2\n 4  2013     1     1     1004       -18      544            545        -1\n 5  2013     1     1      812       -25      554            600        -6\n 6  2013     1     1      740        12      554            558        -4\n 7  2013     1     1      913        19      555            600        -5\n 8  2013     1     1      709       -14      557            600        -3\n 9  2013     1     1      838        -8      557            600        -3\n10  2013     1     1      753         8      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\nCompare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?\n\ndep_delay = dep_time - sched_dep_time\n\nBrainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.\n\n\nflights |&gt;\n  select(contains(c(\"dep\", \"time\", \"arr\", \"delay\")))\n\n# A tibble: 336,776 × 9\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time air_time\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt;\n 1      517            515         2      830            819      227\n 2      533            529         4      850            830      227\n 3      542            540         2      923            850      160\n 4      544            545        -1     1004           1022      183\n 5      554            600        -6      812            837      116\n 6      554            558        -4      740            728      150\n 7      555            600        -5      913            854      158\n 8      557            600        -3      709            723       53\n 9      557            600        -3      838            846      140\n10      558            600        -2      753            745      138\n# ℹ 336,766 more rows\n# ℹ 3 more variables: time_hour &lt;dttm&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;\n\n\n\nWhat happens if you specify the name of the same variable multiple times in a select() call?\n\n\nflights |&gt;\n  select(arr_time,arr_time)\n\n# A tibble: 336,776 × 1\n   arr_time\n      &lt;int&gt;\n 1      830\n 2      850\n 3      923\n 4     1004\n 5      812\n 6      740\n 7      913\n 8      709\n 9      838\n10      753\n# ℹ 336,766 more rows\n\n\n\nWhat does the any_of() function do? Why might it be helpful in conjunction with this vector?\n\n\nvariables &lt;- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n\n\nflights |&gt;\n  select(any_of(variables))\n\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows\n\n\n\nflights |&gt; \n  select(contains(\"TIME\"))\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt; &lt;dttm&gt;             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\n\n\nflights |&gt; \n  mutate(air_time_min = air_time,\n         .before = 1)\n\n# A tibble: 336,776 × 20\n   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n          &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1          227  2013     1     1      517            515         2      830\n 2          227  2013     1     1      533            529         4      850\n 3          160  2013     1     1      542            540         2      923\n 4          183  2013     1     1      544            545        -1     1004\n 5          116  2013     1     1      554            600        -6      812\n 6          150  2013     1     1      554            558        -4      740\n 7          158  2013     1     1      555            600        -5      913\n 8           53  2013     1     1      557            600        -3      709\n 9          140  2013     1     1      557            600        -3      838\n10          138  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nWhy doesn’t the following work, and what does the error mean?\n\nafter selecting the column tailnum, there is no more column called arr_delay.\n\n\n\nflights |&gt; \n  select(tailnum) |&gt; \n  arrange(arr_delay)\n#&gt; Error in `arrange()`:\n#&gt; ℹ In argument: `..1 = arr_delay`.\n#&gt; Caused by error:\n#&gt; ! object 'arr_delay' not found"
  },
  {
    "objectID": "Self-Practice/Self-Practice_02/Self-Practice_02.html#the-pipe",
    "href": "Self-Practice/Self-Practice_02/Self-Practice_02.html#the-pipe",
    "title": "Self Practice 2: R for Data Science",
    "section": "",
    "text": "We’ve shown you simple examples of the pipe above, but its real power arises when you start to combine multiple verbs. For example, imagine that you wanted to find the fastest flights to Houston’s IAH airport: you need to combine filter(), mutate(), select(), and arrange():\n\nflights |&gt; \n  filter(dest == \"IAH\", ) |&gt; \n  mutate(speed = distance / air_time*60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n\n\nUse group_by() to divide your dataset into groups meaningful for your analysis:\n\nflights |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\ngroup_by() doesn’t change the data but, if you look closely at the output, you’ll notice that the output indicates that it is “grouped by” month (Groups: month [12]). This means subsequent operations will now work “by month”. group_by() adds this grouped feature (referred to as class) to the data frame, which changes the behavior of the subsequent verbs applied to the data.\n\n\n\nThe most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by summarize()3, as shown by the following example, which computes the average departure delay by month:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_delay = mean(dep_delay)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1        NA\n 2     2        NA\n 3     3        NA\n 4     4        NA\n 5     5        NA\n 6     6        NA\n 7     7        NA\n 8     8        NA\n 9     9        NA\n10    10        NA\n11    11        NA\n12    12        NA\n\n\nUhoh! Something has gone wrong and all of our results are NAs (pronounced “N-A”), R’s symbol for missing value. This happened because some of the observed flights had missing data in the delay column, and so when we calculated the mean including those values, we got an NA result. We’ll come back to discuss missing values in detail in Chapter 18, but for now we’ll tell the mean() function to ignore all missing values by setting the argument na.rm to TRUE.\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1     10.0 \n 2     2     10.8 \n 3     3     13.2 \n 4     4     13.9 \n 5     5     13.0 \n 6     6     20.8 \n 7     7     21.7 \n 8     8     12.6 \n 9     9      6.72\n10    10      6.24\n11    11      5.44\n12    12     16.6 \n\n\nYou can create any number of summaries in a single call to summarize(). You’ll learn various useful summaries in the upcoming chapters, but one very useful summary is n(), which returns the number of rows in each group:\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n\n# A tibble: 12 × 3\n   month avg_delay     n\n   &lt;int&gt;     &lt;dbl&gt; &lt;int&gt;\n 1     1     10.0  27004\n 2     2     10.8  24951\n 3     3     13.2  28834\n 4     4     13.9  28330\n 5     5     13.0  28796\n 6     6     20.8  28243\n 7     7     21.7  29425\n 8     8     12.6  29327\n 9     9      6.72 27574\n10    10      6.24 28889\n11    11      5.44 27268\n12    12     16.6  28135\n\n\nMeans and counts can get you a surprisingly long way in data science!\n\n\n\nThere are five handy functions that allow you extract specific rows within each group:\n\ndf |&gt; slice_head(n = 1) takes the first row from each group.\ndf |&gt; slice_tail(n = 1) takes the last row in each group.\ndf |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x.\ndf |&gt; slice_max(x, n = 1) takes the row with the largest value of column x.\ndf |&gt; slice_sample(n = 1) takes one random row.\n\nYou can vary n to select more than one row, or instead of n =, you can use prop = 0.1 to select (e.g.) 10% of the rows in each group. For example, the following code finds the flights that are most delayed upon arrival at each destination:\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1,with_ties = FALSE) |&gt;\n  relocate(dest) |&gt; \n  arrange(desc(arr_delay))\n\n# A tibble: 105 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 95 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nNote that there are 105 destinations but we get 108 rows here. What’s up? slice_min() and slice_max() keep tied values so n = 1 means give us all rows with the highest value. If you want exactly one row per group you can set with_ties = FALSE.\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest) |&gt; \n  arrange(desc(arr_delay))\n\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 98 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nThis is similar to computing the max delay with summarize(), but you get the whole corresponding row (or rows if there’s a tie) instead of the single summary statistic.\n\n\n\nYou can create groups using more than one variable. For example, we could make a group for each date.\n\ndaily &lt;- flights |&gt;  \n  group_by(year, month, day)\ndaily\n\n# A tibble: 336,776 × 19\n# Groups:   year, month, day [365]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIf you’re happy with this behavior, you can explicitly request it in order to suppress the message:\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\ndaily_flights\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day     n\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1   842\n 2  2013     1     2   943\n 3  2013     1     3   914\n 4  2013     1     4   915\n 5  2013     1     5   720\n 6  2013     1     6   832\n 7  2013     1     7   933\n 8  2013     1     8   899\n 9  2013     1     9   902\n10  2013     1    10   932\n# ℹ 355 more rows\n\n\nAlternatively, change the default behavior by setting a different value, e.g., “drop” to drop all grouping or “keep” to preserve the same groups.\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop\"\n  )\ndaily_flights\n\n# A tibble: 365 × 4\n    year month   day     n\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1   842\n 2  2013     1     2   943\n 3  2013     1     3   914\n 4  2013     1     4   915\n 5  2013     1     5   720\n 6  2013     1     6   832\n 7  2013     1     7   933\n 8  2013     1     8   899\n 9  2013     1     9   902\n10  2013     1    10   932\n# ℹ 355 more rows\n\n\n\n\n\nYou might also want to remove grouping from a data frame without using summarize(). You can do this with ungroup().\n\ndaily |&gt; \n  ungroup()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nNow let’s see what happens when you summarize an ungrouped data frame.\n\ndaily |&gt; \n  ungroup() |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n\n# A tibble: 1 × 2\n  avg_delay flights\n      &lt;dbl&gt;   &lt;int&gt;\n1      12.6  336776\n\n\nYou get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group.\n\n\n\ndplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the .by argument. group_by() and ungroup() aren’t going away, but you can now also use the .by argument to group within a single operation:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  ) |&gt; \n  arrange(month)\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135\n\n\nOr if you want to group by multiple variables:\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n\n# A tibble: 224 × 4\n   origin dest  delay     n\n   &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;int&gt;\n 1 EWR    IAH   11.8   3973\n 2 LGA    IAH    9.06  2951\n 3 JFK    MIA    9.34  3314\n 4 JFK    BQN    6.67   599\n 5 LGA    ATL   11.4  10263\n 6 EWR    ORD   14.6   6100\n 7 EWR    FLL   13.5   3793\n 8 LGA    IAD   16.7   1803\n 9 JFK    MCO   10.6   5464\n10 LGA    ORD   10.7   8857\n# ℹ 214 more rows\n\n\n\n\n\n\nWhich carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights |&gt; group_by(carrier, dest) |&gt; summarize(n()))\n\n\nflights |&gt; \n  group_by(carrier, dest) |&gt; \n  summarise(n())\n\n# A tibble: 314 × 3\n# Groups:   carrier [16]\n   carrier dest  `n()`\n   &lt;chr&gt;   &lt;chr&gt; &lt;int&gt;\n 1 9E      ATL      59\n 2 9E      AUS       2\n 3 9E      AVL      10\n 4 9E      BGR       1\n 5 9E      BNA     474\n 6 9E      BOS     914\n 7 9E      BTV       2\n 8 9E      BUF     833\n 9 9E      BWI     856\n10 9E      CAE       3\n# ℹ 304 more rows\n\n\n\nFind the flights that are most delayed upon departure from each destination.\n\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(dep_delay) |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 105 × 19\n# Groups:   dest [105]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 95 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nHow do delays vary over the course of the day. Illustrate your answer with a plot.\nWhat happens if you supply a negative n to slice_min() and friends?\nExplain what count() does in terms of the dplyr verbs you just learned. What does the sort argument to count() do?\n\n\ndf &lt;- tibble(\n  x = 1:5,\n  y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n  z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n)\n\n\ndf |&gt;\n  group_by(y)\n\n# A tibble: 5 × 3\n# Groups:   y [2]\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     2 b     K    \n3     3 a     L    \n4     4 a     L    \n5     5 b     K    \n\n\n\ndf |&gt;\n  arrange(y)\n\n# A tibble: 5 × 3\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     3 a     L    \n3     4 a     L    \n4     2 b     K    \n5     5 b     K    \n\n\n\ndf |&gt;\n  group_by(y) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 2 × 2\n  y     mean_x\n  &lt;chr&gt;  &lt;dbl&gt;\n1 a       2.67\n2 b       3.5 \n\n\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\n\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x), .groups = \"drop\")\n\n# A tibble: 3 × 3\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\n\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  mutate(mean_x = mean(x))\n\n# A tibble: 5 × 4\n# Groups:   y, z [3]\n      x y     z     mean_x\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 a     K        1  \n2     2 b     K        3.5\n3     3 a     L        3.5\n4     4 a     L        3.5\n5     5 b     K        3.5"
  },
  {
    "objectID": "Self-Practice/Self-Practice_02/Self-Practice_02.html#case-study-aggregates-and-sample-size",
    "href": "Self-Practice/Self-Practice_02/Self-Practice_02.html#case-study-aggregates-and-sample-size",
    "title": "Self Practice 2: R for Data Science",
    "section": "",
    "text": "Whenever you do any aggregation, it’s always a good idea to include a count (n()). That way, you can ensure that you’re not drawing conclusions based on very small amounts of data. We’ll demonstrate this with some baseball data from the Lahman package. Specifically, we will compare what proportion of times a player gets a hit (H) vs. the number of times they try to put the ball in play (AB):\n\nbatters &lt;- Lahman::Batting |&gt; \n  group_by(playerID) |&gt; \n  summarize(\n    performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),\n    n = sum(AB, na.rm = TRUE)\n  )\nbatters\n\n# A tibble: 20,469 × 3\n   playerID  performance     n\n   &lt;chr&gt;           &lt;dbl&gt; &lt;int&gt;\n 1 aardsda01      0          4\n 2 aaronha01      0.305  12364\n 3 aaronto01      0.229    944\n 4 aasedo01       0          5\n 5 abadan01       0.0952    21\n 6 abadfe01       0.111      9\n 7 abadijo01      0.224     49\n 8 abbated01      0.254   3044\n 9 abbeybe01      0.169    225\n10 abbeych01      0.281   1756\n# ℹ 20,459 more rows\n\n\n\nbatters |&gt; \n  filter(n &gt; 100) |&gt; \n  ggplot(aes(x = n, y = performance)) +\n  geom_point(alpha = 1 / 10) + \n  geom_smooth(se = FALSE)"
  },
  {
    "objectID": "Self-Practice/Self-Practice_04/Self-Practice_04.html",
    "href": "Self-Practice/Self-Practice_04/Self-Practice_04.html",
    "title": "Self Practice 4: R for Data Science",
    "section": "",
    "text": "Working with data provided by R packages is a great way to learn data science tools, but you want to apply what you’ve learned to your own data at some point. In this chapter, you’ll learn the basics of reading data files into R.\nSpecifically, this chapter will focus on reading plain-text rectangular files. We’ll start with practical advice for handling features like column names, types, and missing data. You will then learn about reading data from multiple files at once and writing data from R to a file. Finally, you’ll learn how to handcraft data frames in R.\n\n\nIn this chapter, you’ll learn how to load flat files in R with the readr package, which is part of the core tidyverse.\n\nlibrary(tidyverse)\n\n\n\n\n\nTo begin, we’ll focus on the most common rectangular data file type: CSV, which is short for comma-separated values. Here is what a simple CSV file looks like. The first row, commonly called the header row, gives the column names, and the following six rows provide the data. The columns are separated, aka delimited, by commas.\n\nstudents &lt;- read_csv(\"data/students.csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\n\nOnce you read data in, the first step usually involves transforming it in some way to make it easier to work with in the rest of your analysis. Let’s take another look at the students data with that in mind.\n\nstudents &lt;- read_csv(\"data/students.csv\", na = c(\"N/A\", \"\"))\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\nAn alternative approach is to use janitor::clean_names() to use some heuristics to turn them all into snake case at once.\n\nstudents |&gt; janitor::clean_names()\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\nAnother common task after reading in data is to consider variable types. For example, meal_plan is a categorical variable with a known set of possible values, which in R should be represented as a factor:\n\nstudents |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\nNote that the values in the meal_plan variable have stayed the same, but the type of variable denoted underneath the variable name has changed from character (&lt;chr&gt;) to factor (&lt;fct&gt;). You’ll learn more about factors in Chapter 16.\nBefore you analyze these data, you’ll probably want to fix the age and id columns. Currently, age is a character variable because one of the observations is typed out as five instead of a numeric 5. We discuss the details of fixing this issue in Chapter 20.\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\nstudents\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\n\n\n\nThere are a couple of other important arguments that we need to mention, and they’ll be easier to demonstrate if we first show you a handy trick: read_csv() can read text strings that you’ve created and formatted like a CSV file:\n\nread_csv(\n  \"a,b,c\n  1,2,3\n  4,5,6\"\n)\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\nUsually, read_csv() uses the first line of the data for the column names, which is a very common convention. But it’s not uncommon for a few lines of metadata to be included at the top of the file. You can use skip = n to skip the first n lines or use comment = \"#\" to drop all lines that start with (e.g.) #:\n\nread_csv(\n  \"The first line of metadata\n  The second line of metadata\n  x,y,z\n  1,2,3\",\n  skip = 2\n)\n\n# A tibble: 1 × 3\n      x     y     z\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n\n\n\nread_csv(\n  \"# A comment I want to skip\n  x,y,z\n  1,2,3\",\n  comment = \"#\"\n)\n\n# A tibble: 1 × 3\n      x     y     z\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n\n\nIn other cases, the data might not have column names. You can use col_names = FALSE to tell read_csv() not to treat the first row as headings and instead label them sequentially from X1 to Xn:\n\nread_csv(\n  \"1,2,3\n  4,5,6\",\n  col_names = FALSE\n)\n\n# A tibble: 2 × 3\n     X1    X2    X3\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\nAlternatively, you can pass col_names a character vector which will be used as the column names:\n\nread_csv(\n  \"1,2,3\n  4,5,6\",\n  col_names = c(\"x\", \"y\", \"z\")\n)\n\n# A tibble: 2 × 3\n      x     y     z\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\nThese arguments are all you need to know to read the majority of CSV files that you’ll encounter in practice. (For the rest, you’ll need to carefully inspect your .csv file and read the documentation for read_csv()’s many other arguments.)\n\n\n\nOnce you’ve mastered read_csv(), using readr’s other functions is straightforward; it’s just a matter of knowing which function to reach for:\n\nread_csv2() reads semicolon-separated files. These use ; instead of , to separate fields and are common in countries that use , as the decimal marker.\nread_tsv() reads tab-delimited files.\nread_delim() reads in files with any delimiter, attempting to automatically guess the delimiter if you don’t specify it.\nread_fwf() reads fixed-width files. You can specify fields by their widths with fwf_widths() or by their positions with fwf_positions().\nread_table() reads a common variation of fixed-width files where columns are separated by white space.\nread_log() reads Apache-style log files.\n\n\n\n\nreadr provides a total of nine column types for you to use:\n\ncol_logical() and col_double() read logicals and real numbers. They’re relatively rarely needed (except as above), since readr will usually guess them for you.\ncol_integer() reads integers. We seldom distinguish integers and doubles in this book because they’re functionally equivalent, but reading integers explicitly can occasionally be useful because they occupy half the memory of doubles.\ncol_character() reads strings. This can be useful to specify explicitly when you have a column that is a numeric identifier, i.e., long series of digits that identifies an object but doesn’t make sense to apply mathematical operations to. Examples include phone numbers, social security numbers, credit card numbers, etc.\ncol_factor(), col_date(), and col_datetime() create factors, dates, and date-times respectively; you’ll learn more about those when we get to those data types in Chapter 16 and Chapter 17.\ncol_number() is a permissive numeric parser that will ignore non-numeric components, and is particularly useful for currencies. You’ll learn more about it in Chapter 13.\ncol_skip() skips a column so it’s not included in the result, which can be useful for speeding up reading the data if you have a large CSV file and you only want to use some of the columns.\n\n\n\n\n\nSometimes your data is split across multiple files instead of being contained in a single file. For example, you might have sales data for multiple months, with each month’s data in a separate file: 01-sales.csv for January, 02-sales.csv for February, and 03-sales.csv for March. With read_csv() you can read these data in at once and stack them on top of each other in a single data frame.\n\nsales_files &lt;- c(\n  \"https://pos.it/r4ds-01-sales\",\n  \"https://pos.it/r4ds-02-sales\",\n  \"https://pos.it/r4ds-03-sales\"\n)\nread_csv(sales_files, id = \"file\")\n\n# A tibble: 19 × 6\n   file                         month     year brand  item     n\n   &lt;chr&gt;                        &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 https://pos.it/r4ds-01-sales January   2019     1  1234     3\n 2 https://pos.it/r4ds-01-sales January   2019     1  8721     9\n 3 https://pos.it/r4ds-01-sales January   2019     1  1822     2\n 4 https://pos.it/r4ds-01-sales January   2019     2  3333     1\n 5 https://pos.it/r4ds-01-sales January   2019     2  2156     9\n 6 https://pos.it/r4ds-01-sales January   2019     2  3987     6\n 7 https://pos.it/r4ds-01-sales January   2019     2  3827     6\n 8 https://pos.it/r4ds-02-sales February  2019     1  1234     8\n 9 https://pos.it/r4ds-02-sales February  2019     1  8721     2\n10 https://pos.it/r4ds-02-sales February  2019     1  1822     3\n11 https://pos.it/r4ds-02-sales February  2019     2  3333     1\n12 https://pos.it/r4ds-02-sales February  2019     2  2156     3\n13 https://pos.it/r4ds-02-sales February  2019     2  3987     6\n14 https://pos.it/r4ds-03-sales March     2019     1  1234     3\n15 https://pos.it/r4ds-03-sales March     2019     1  3627     1\n16 https://pos.it/r4ds-03-sales March     2019     1  8820     3\n17 https://pos.it/r4ds-03-sales March     2019     2  7253     1\n18 https://pos.it/r4ds-03-sales March     2019     2  8766     3\n19 https://pos.it/r4ds-03-sales March     2019     2  8288     6\n\n\nThe id argument adds a new column called file to the resulting data frame that identifies the file the data come from. This is especially helpful in circumstances where the files you’re reading in do not have an identifying column that can help you trace the observations back to their original sources.\nIf you have many files you want to read in, it can get cumbersome to write out their names as a list. Instead, you can use the base list.files() function to find the files for you by matching a pattern in the file names. You’ll learn more about these patterns in Chapter 15.\n\n\n\nreadr also comes with two useful functions for writing data back to disk: write_csv() and write_tsv(). The most important arguments to these functions are x (the data frame to save) and file (the location to save it). You can also specify how missing values are written with na, and if you want to append to an existing file.\n\nwrite_csv(students, \"data/students1.csv\")\n\nNow let’s read that csv file back in. Note that the variable type information that you just set up is lost when you save to CSV because you’re starting over with reading from a plain text file again:\n\nstudents &lt;- read_csv(\"data/students1.csv\")\nstudents\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\nThis makes CSVs a little unreliable for caching interim results—you need to recreate the column specification every time you load in. There are two main alternatives:\n\nwrite_rds() and read_rds() are uniform wrappers around the base functions readRDS() and saveRDS(). These store data in R’s custom binary format called RDS. This means that when you reload the object, you are loading the exact same R object that you stored.\n\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n\nwrite_rds(students, \"data/students1.rds\")\n\n\nread_rds(\"data/students1.rds\")\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\n\nThe arrow package allows you to read and write parquet files, a fast binary file format that can be shared across programming languages. We’ll return to arrow in more depth in Chapter 22."
  },
  {
    "objectID": "Self-Practice/Self-Practice_04/Self-Practice_04.html#introduction",
    "href": "Self-Practice/Self-Practice_04/Self-Practice_04.html#introduction",
    "title": "Self Practice 4: R for Data Science",
    "section": "",
    "text": "Working with data provided by R packages is a great way to learn data science tools, but you want to apply what you’ve learned to your own data at some point. In this chapter, you’ll learn the basics of reading data files into R.\nSpecifically, this chapter will focus on reading plain-text rectangular files. We’ll start with practical advice for handling features like column names, types, and missing data. You will then learn about reading data from multiple files at once and writing data from R to a file. Finally, you’ll learn how to handcraft data frames in R.\n\n\nIn this chapter, you’ll learn how to load flat files in R with the readr package, which is part of the core tidyverse.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "Self-Practice/Self-Practice_04/Self-Practice_04.html#reading-data-from-a-file",
    "href": "Self-Practice/Self-Practice_04/Self-Practice_04.html#reading-data-from-a-file",
    "title": "Self Practice 4: R for Data Science",
    "section": "",
    "text": "To begin, we’ll focus on the most common rectangular data file type: CSV, which is short for comma-separated values. Here is what a simple CSV file looks like. The first row, commonly called the header row, gives the column names, and the following six rows provide the data. The columns are separated, aka delimited, by commas.\n\nstudents &lt;- read_csv(\"data/students.csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\n\nOnce you read data in, the first step usually involves transforming it in some way to make it easier to work with in the rest of your analysis. Let’s take another look at the students data with that in mind.\n\nstudents &lt;- read_csv(\"data/students.csv\", na = c(\"N/A\", \"\"))\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\nAn alternative approach is to use janitor::clean_names() to use some heuristics to turn them all into snake case at once.\n\nstudents |&gt; janitor::clean_names()\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\nAnother common task after reading in data is to consider variable types. For example, meal_plan is a categorical variable with a known set of possible values, which in R should be represented as a factor:\n\nstudents |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\nNote that the values in the meal_plan variable have stayed the same, but the type of variable denoted underneath the variable name has changed from character (&lt;chr&gt;) to factor (&lt;fct&gt;). You’ll learn more about factors in Chapter 16.\nBefore you analyze these data, you’ll probably want to fix the age and id columns. Currently, age is a character variable because one of the observations is typed out as five instead of a numeric 5. We discuss the details of fixing this issue in Chapter 20.\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\nstudents\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\n\n\n\nThere are a couple of other important arguments that we need to mention, and they’ll be easier to demonstrate if we first show you a handy trick: read_csv() can read text strings that you’ve created and formatted like a CSV file:\n\nread_csv(\n  \"a,b,c\n  1,2,3\n  4,5,6\"\n)\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\nUsually, read_csv() uses the first line of the data for the column names, which is a very common convention. But it’s not uncommon for a few lines of metadata to be included at the top of the file. You can use skip = n to skip the first n lines or use comment = \"#\" to drop all lines that start with (e.g.) #:\n\nread_csv(\n  \"The first line of metadata\n  The second line of metadata\n  x,y,z\n  1,2,3\",\n  skip = 2\n)\n\n# A tibble: 1 × 3\n      x     y     z\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n\n\n\nread_csv(\n  \"# A comment I want to skip\n  x,y,z\n  1,2,3\",\n  comment = \"#\"\n)\n\n# A tibble: 1 × 3\n      x     y     z\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n\n\nIn other cases, the data might not have column names. You can use col_names = FALSE to tell read_csv() not to treat the first row as headings and instead label them sequentially from X1 to Xn:\n\nread_csv(\n  \"1,2,3\n  4,5,6\",\n  col_names = FALSE\n)\n\n# A tibble: 2 × 3\n     X1    X2    X3\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\nAlternatively, you can pass col_names a character vector which will be used as the column names:\n\nread_csv(\n  \"1,2,3\n  4,5,6\",\n  col_names = c(\"x\", \"y\", \"z\")\n)\n\n# A tibble: 2 × 3\n      x     y     z\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\nThese arguments are all you need to know to read the majority of CSV files that you’ll encounter in practice. (For the rest, you’ll need to carefully inspect your .csv file and read the documentation for read_csv()’s many other arguments.)\n\n\n\nOnce you’ve mastered read_csv(), using readr’s other functions is straightforward; it’s just a matter of knowing which function to reach for:\n\nread_csv2() reads semicolon-separated files. These use ; instead of , to separate fields and are common in countries that use , as the decimal marker.\nread_tsv() reads tab-delimited files.\nread_delim() reads in files with any delimiter, attempting to automatically guess the delimiter if you don’t specify it.\nread_fwf() reads fixed-width files. You can specify fields by their widths with fwf_widths() or by their positions with fwf_positions().\nread_table() reads a common variation of fixed-width files where columns are separated by white space.\nread_log() reads Apache-style log files.\n\n\n\n\nreadr provides a total of nine column types for you to use:\n\ncol_logical() and col_double() read logicals and real numbers. They’re relatively rarely needed (except as above), since readr will usually guess them for you.\ncol_integer() reads integers. We seldom distinguish integers and doubles in this book because they’re functionally equivalent, but reading integers explicitly can occasionally be useful because they occupy half the memory of doubles.\ncol_character() reads strings. This can be useful to specify explicitly when you have a column that is a numeric identifier, i.e., long series of digits that identifies an object but doesn’t make sense to apply mathematical operations to. Examples include phone numbers, social security numbers, credit card numbers, etc.\ncol_factor(), col_date(), and col_datetime() create factors, dates, and date-times respectively; you’ll learn more about those when we get to those data types in Chapter 16 and Chapter 17.\ncol_number() is a permissive numeric parser that will ignore non-numeric components, and is particularly useful for currencies. You’ll learn more about it in Chapter 13.\ncol_skip() skips a column so it’s not included in the result, which can be useful for speeding up reading the data if you have a large CSV file and you only want to use some of the columns."
  },
  {
    "objectID": "Self-Practice/Self-Practice_04/Self-Practice_04.html#reading-data-from-multiple-files",
    "href": "Self-Practice/Self-Practice_04/Self-Practice_04.html#reading-data-from-multiple-files",
    "title": "Self Practice 4: R for Data Science",
    "section": "",
    "text": "Sometimes your data is split across multiple files instead of being contained in a single file. For example, you might have sales data for multiple months, with each month’s data in a separate file: 01-sales.csv for January, 02-sales.csv for February, and 03-sales.csv for March. With read_csv() you can read these data in at once and stack them on top of each other in a single data frame.\n\nsales_files &lt;- c(\n  \"https://pos.it/r4ds-01-sales\",\n  \"https://pos.it/r4ds-02-sales\",\n  \"https://pos.it/r4ds-03-sales\"\n)\nread_csv(sales_files, id = \"file\")\n\n# A tibble: 19 × 6\n   file                         month     year brand  item     n\n   &lt;chr&gt;                        &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 https://pos.it/r4ds-01-sales January   2019     1  1234     3\n 2 https://pos.it/r4ds-01-sales January   2019     1  8721     9\n 3 https://pos.it/r4ds-01-sales January   2019     1  1822     2\n 4 https://pos.it/r4ds-01-sales January   2019     2  3333     1\n 5 https://pos.it/r4ds-01-sales January   2019     2  2156     9\n 6 https://pos.it/r4ds-01-sales January   2019     2  3987     6\n 7 https://pos.it/r4ds-01-sales January   2019     2  3827     6\n 8 https://pos.it/r4ds-02-sales February  2019     1  1234     8\n 9 https://pos.it/r4ds-02-sales February  2019     1  8721     2\n10 https://pos.it/r4ds-02-sales February  2019     1  1822     3\n11 https://pos.it/r4ds-02-sales February  2019     2  3333     1\n12 https://pos.it/r4ds-02-sales February  2019     2  2156     3\n13 https://pos.it/r4ds-02-sales February  2019     2  3987     6\n14 https://pos.it/r4ds-03-sales March     2019     1  1234     3\n15 https://pos.it/r4ds-03-sales March     2019     1  3627     1\n16 https://pos.it/r4ds-03-sales March     2019     1  8820     3\n17 https://pos.it/r4ds-03-sales March     2019     2  7253     1\n18 https://pos.it/r4ds-03-sales March     2019     2  8766     3\n19 https://pos.it/r4ds-03-sales March     2019     2  8288     6\n\n\nThe id argument adds a new column called file to the resulting data frame that identifies the file the data come from. This is especially helpful in circumstances where the files you’re reading in do not have an identifying column that can help you trace the observations back to their original sources.\nIf you have many files you want to read in, it can get cumbersome to write out their names as a list. Instead, you can use the base list.files() function to find the files for you by matching a pattern in the file names. You’ll learn more about these patterns in Chapter 15."
  },
  {
    "objectID": "Self-Practice/Self-Practice_04/Self-Practice_04.html#writing-to-a-file",
    "href": "Self-Practice/Self-Practice_04/Self-Practice_04.html#writing-to-a-file",
    "title": "Self Practice 4: R for Data Science",
    "section": "",
    "text": "readr also comes with two useful functions for writing data back to disk: write_csv() and write_tsv(). The most important arguments to these functions are x (the data frame to save) and file (the location to save it). You can also specify how missing values are written with na, and if you want to append to an existing file.\n\nwrite_csv(students, \"data/students1.csv\")\n\nNow let’s read that csv file back in. Note that the variable type information that you just set up is lost when you save to CSV because you’re starting over with reading from a plain text file again:\n\nstudents &lt;- read_csv(\"data/students1.csv\")\nstudents\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\nThis makes CSVs a little unreliable for caching interim results—you need to recreate the column specification every time you load in. There are two main alternatives:\n\nwrite_rds() and read_rds() are uniform wrappers around the base functions readRDS() and saveRDS(). These store data in R’s custom binary format called RDS. This means that when you reload the object, you are loading the exact same R object that you stored.\n\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n\nwrite_rds(students, \"data/students1.rds\")\n\n\nread_rds(\"data/students1.rds\")\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\n\nThe arrow package allows you to read and write parquet files, a fast binary file format that can be shared across programming languages. We’ll return to arrow in more depth in Chapter 22."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n\nIn this take-home exercise, you are required to:\n\nselect one data visualisation from the Take-home Exercise 1 submission prepared by your classmate,\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualisation design principles and best practices you had learned in Lesson 1 and 2.\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.\n\n\n\n\nThe original visualisation can be found in this link. I will be using EDA 3 for this take home exercise. Below shows the original plot and the insights by the original creator:\n\nThe Insights - The Central Region’s peak is the most pronounced and shifted towards the high, indicating that there is a high concentration of properties with higher unit prices.\n- The East Region’s pea is lower and more towards the middle of the x-axis compared to the Central Region. This implies that while the East Region has properties with moderate unit prices, it does not reach as high of a price point as frequently as the Central Region.\n- North East and North Regions peaks are less sharp and positioned towards the lower end of the price scale, suggesting a more affordable housing options and a wider distribution of unit prices. North Region appears to have a slightly broader distribution than North East.\n- West Region has the lowest peak among all the regions and is positioned towards the far left of the plot. This indicates that the West Region is the most affordable in Singapore.\n\n\n\n\nWe will now set up according to the original code provided in the link.\n\n\nT he pac::p_load() function to load the required R packages in the working environment. The following packages are used in this set up:\n\nggthemes: Extra themes, geoms, and scales for ggplot2.\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\ncolorspace:\nggiraph: for making ‘ggplot’ graphics interactive.\nplotly: R library for plotting interactive statistical graphs.\npatchwork: specially designed for combining separate ggplot2 graphs into a single figure.\nlubridate: for easy and fast parsing of Date / Time\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggdist: a ggplot2 extension specially design for visualising distribution and uncertainty\n\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales,\n               viridis, cowplot, \n               dplyr, plotly,\n               tidyr, lubridate, \n               ggplot2, ggExtra)\n\n\n\n\nIdentify the missing values in the data set and removed any missing elements. ‘Type of Sale’ and ‘Property type’ has been converted to factor format. ‘Transacted Price ($)’ and ‘Area (SQFT)’ are converted to numeric data types. ‘Type of Sale’ has been group into three categories. ‘Sale Date’ has been converted to Date format.\nThe process had been repeated for all five data sets.\n\nImport Data SetConverting DataConverting Dates\n\n\n\nds1 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\nds2 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\nds3 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\nds4 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\nds5 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\n\n\n\nprepare_dataset &lt;- function(ds) {\n  colSums(is.na(ds))\n  ds &lt;- na.omit(ds)\n  \n  ds$`Type of Sale` &lt;- tolower(as.character(ds$`Type of Sale`))\n  ds$`Type of Sale` &lt;- ifelse(ds$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds$`Type of Sale`, \"other\")\n  ds$`Type of Sale` &lt;- as.factor(ds$`Type of Sale`)\n  \n  ds$`Property Type` &lt;- as.factor(ds$`Property Type`)\n  \n  ds$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Transacted Price ($)`, perl = TRUE))\n  ds$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Area (SQFT)`, perl = TRUE))\n  ds$`Unit Price ($ PSF)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Unit Price ($ PSF)`, perl = TRUE))\n  \n  return(ds)\n}\n\n# Apply the function to each dataset\nds1 &lt;- prepare_dataset(ds1)\nds2 &lt;- prepare_dataset(ds2)\nds3 &lt;- prepare_dataset(ds3)\nds4 &lt;- prepare_dataset(ds4)\nds5 &lt;- prepare_dataset(ds5)\n\n# Combine the datasets\ncombined_ds &lt;- rbind(ds1, ds2, ds3, ds4, ds5)\n\n\n\n\n# Convert Sale Date to Date format\nds1$`Sale Date` &lt;- dmy(ds1$`Sale Date`)\nds2$`Sale Date` &lt;- dmy(ds2$`Sale Date`)\nds3$`Sale Date` &lt;- dmy(ds3$`Sale Date`)\nds4$`Sale Date` &lt;- dmy(ds4$`Sale Date`)\nds5$`Sale Date` &lt;- dmy(ds5$`Sale Date`)\n\n\n\n\n\n\n\n\nThe original plot and code is as below:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(viridis)\n\nggplot(combined_ds, aes(x = `Unit Price ($ PSF)`, y = `Planning Region`, fill = `Planning Region`)) +\n  geom_density_ridges(scale = 3) +\n  scale_fill_viridis(discrete = TRUE) +\n  labs(title = \"Unit Price ($ PSF) Distribution by Planning Region\",\n       x = \"Unit Price ($ PSF)\",\n       y = \"Planning Region\") +\n  theme_ridges()\n\n\n\n\nThe Insights\n\nThe Central Region’s peak is the most pronounced and shifted towards the high, indicating that there is a high concentration of properties with higher unit prices.\n\nThe East Region’s pea is lower and more towards the middle of the x-axis compared to the Central Region. This implies that while the East Region has properties with moderate unit prices, it does not reach as high of a price point as frequently as the Central Region.\n\nNorth East and North Regions peaks are less sharp and positioned towards the lower end of the price scale, suggesting a more affordable housing options and a wider distribution of unit prices. North Region appears to have a slightly broader distribution than North East.\n\nWest Region has the lowest peak among all the regions and is positioned towards the far left of the plot. This indicates that the West Region is the most affordable in Singapore.\n\n\n\n\n\nThe distribution without the quantile lines is unable to let audience know where is the median and make it hard to conclude just using peak: “West Region has the lowest peak among all the regions and is positioned towards the far left of the plot. This indicates that the West Region is the most affordable in Singapore.” While the peak of the respective region does indicate the highest frequency of data points, it does not reveal the overall median price and other aspect such as the the 4 quantiles. Hence, it might be easier for the audience if quantiles were included in the aesthetics of the plot. With this enhancement, it might be easier to define which Region is more affordable, rather than just saying that West is most affordable as it is “most far left”.\n\nThe legend for the Planning Region to the right of the plot is redundant, as it is very clear from the y-axis which plot belongs to which region. If we choose to retain the legend, perhaps it could be compressed slightly smaller to the top right corner of the plot (as there are ample empty space between the 4000-6000 mark along x-axis), and the free up spaces could be used to insert another plot that enhance the story-telling for this plot.\n\nThe current distribution is 100% opaque and parts of the North Region graph is overlapping the West Region. While the peak of the West Region is still visible, it could be better for audience if the distribution is slightly transparent to allow the audience to see the full distribution of the West Region. It will be complementing the enhancement with quantiles added, as by adjusting the transparency, we will be able to see all the quantiles without guessing through the overlapped areas.\n\n\n\n\nAs most of the distribution in this plot falls between the $1,000-$3,000 mark along the x-axis, the current axis ticks did not allow the audience to have a clear sense of where the peaks are, except for a rough sense of gauging the peak from the neares two x-axis ticks, which is 0 or 2000. To alleviate this issue, the frequency of the x-axis ticks could be increased. Also, visually the plot for the Central Region at the most right, seems to end at just below the 5,000 mark. Space could be saved by ending the x-axis ticks at 5,000 instead, without affecting the clarity and truthfulness of the plot.\n\nInstead of guessing from the distribution which Region is the most affordable and which is the highest priced, it would be clearer if we add in another plot with comparison of the exact mean and median price across the 5 regions using a horizontal bar chart to complement the existing plot.\n\nThe plot is able to let audience understand the overall comparison of distribution against the other 4 regions, but did not provide any comparison of each region against the overall median Unit Price in Singapore. To help audience understand the distribution with respect to the overall median, an overall median line for the Unit Price could be added. In this way, not only we put perspective of region against region, we also include the perspective of each region against the overall market in Singapore.\n\n\n\n\n\n\n\n\nTask: Prepare a sketch for the alternative design by using the data visualisation design principles and best practices you had learned in Lesson 1 and 2.\nUsing the 6 critics mentioned in section 3, I will attempt to enhance the plot by including/removing the following features:\n\nInclude quantile lines for each Region.\nRemove the legend.\nIncrease the transparency of the distribution to ensure all parts of the distribution is not hidden behind other distribution. Alternatively, we can adjust the scale of the geom_density_ridges() to prevent overlaps. Decision can be made after generating both types for consideration.\nIncrease the frequency of the x-axis ticks with soft grid lines to improve readability of distribution.\nRemove the excess space at the right of the plot after 5,000 mark of x-axis.\nAdd in a horizontal bar chart to the right of the existing plot to include the comparison with overall median Unit Price ($ PSF) in Singapore with each of the region.\nAdd in a overall Median Unit Price ($ PSF) for the existing ridgeline plot.\nInclude median value annotations for each region in the existing ridgeline plot.\nRename the y-axis to just the region name, i.e. “West” instead of “West Region”.\nUsing patchwork to patch both plots side by side. The left and right plot should have the same region in the same line for consistency.\n\n\n\n\n\nThe first sketch below shows the intended implementation of the enhancement as mentioned in section 4.1. After this quick sketch with the median values, I realise that there are some further steps to take for a more coherent picture. (caveat: the median value is a rough calculation to facilitate the sketch, it may not be the same value as the final plot reproduced)\n\nThe horizontal bar plot should be sorted according from largest negative value to the highest positive value (red at the top to blue at the bottom). This allows the audience to know the most affordable region to the most expensive region from top down.\nThe distribution plot to the left must synchronised in the same sequence based on the Region, so that the price deviation on the right plot is correctly reflected as the same Region.\n\n\n\n\n\n\n\n# Calculate median values\nmedian_values &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`) %&gt;%\n  summarise(median_value = median(`Unit Price ($ PSF)`))\n\n# Recode `Planning Region`\ncombined_ds &lt;- combined_ds %&gt;%\n  mutate(`Planning Region` = recode(`Planning Region`, \n                                  \"Central Region\" = \"Central\",\n                                  \"East Region\" = \"East\",\n                                  \"North Region\" = \"North\",\n                                  \"North East Region\" = \"North East\",\n                                  \"West Region\" = \"West\"\n                                  ))\n\n\ncombined_ds1 &lt;- combined_ds %&gt;%\n  mutate(`Planning Region` = factor(`Planning Region`, levels = median_values$`Planning Region`[order(median_values$median_value)]))\n\n\np1 &lt;- ggplot(combined_ds, \n       aes(x = `Unit Price ($ PSF)`, \n           y = `Planning Region`,\n           fill = `Planning Region`)) +\n   geom_density_ridges(alpha = 0.2, quantile_lines = TRUE, quantile_fun = function(x, ...) median(x))  +\n  geom_text(data = median_values, \n            aes(x = median_value, \n                y = `Planning Region`, \n                label = paste(\"Median:\", round(median_value, 2))),\n            hjust = -0.2, \n            vjust = -2.8, \n            color = \"black\", \n            size = 3) +\n  labs(title = \"Unit Price ($ PSF) Distribution by Planning Region\",\n       x = \"Unit Price ($ PSF)\",\n       y = \"Planning Region\") +\n  geom_vline(aes(xintercept = median(`Unit Price ($ PSF)`)), col=\"red\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=2700, y=0.7, label=paste0(\"Singapore's Median:\",median(combined_ds$`Unit Price ($ PSF)`)), \n           size=3, color=\"red\") +\n   guides(fill = FALSE) + # Remove legend for Planning Region\n  xlim(0, 4000) \np1\n\n\n\n\n\n\n\n\n\n# Classifying the Median into Above and Below Singapore's Median\ndf_Aavg &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`) %&gt;%\n  summarise(avg_Aprice = median(`Unit Price ($ PSF)`))\ndf_Aavg$p_z &lt;- round((df_Aavg$avg_Aprice - median(combined_ds$`Unit Price ($ PSF)`)), 2)\ndf_Aavg$p_ztype &lt;- ifelse(df_Aavg$p_z &lt; 0, \"below\", \"above\")\n\np2 &lt;- ggplot(df_Aavg, aes(x = `Planning Region`, y = p_z, label = p_z)) +\n  geom_bar(stat = \"identity\", aes(fill = p_ztype), position = position_dodge2(width = 2), width = 0.5) +\n  scale_fill_manual(name = \"Average Price\", labels = c(\"Above Singapore's Median\", \"Below Singapore's Median\"), values = c(\"below\" = \"#C83E4D\", \"above\" = \"#4A5859\")) +\n  labs(title = \"Unit Price ($PSF) Deviations\", y = \"\", subtitle = \"by Planning Region\") +\n  coord_flip() +\n  theme(legend.position = \"None\", text = element_text(size = 8), plot.title = element_text(size = 10, face = \"bold\"))  +\n  theme(text = element_text(size = 7),\n        legend.title = element_blank(),\n        legend.position = c(0.8, 0.7),\n        legend.key.size = unit(0.3, 'cm'),\n        legend.key.height = unit(0.3, 'cm'),\n        legend.key.width = unit(0.3, 'cm')) +\n  geom_text(aes(x = `Planning Region`, \n                y = df_Aavg$p_z, \n                label = abs(df_Aavg$p_z)),\n            hjust = 0.5,\n            vjust = -2.5,\n            size = 3)\np2\n\n\n\n\n\n\n\n\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n\nAlignment of Planning Region for the left and right plot is important for visual perception of audience, as the alignment allows them to have a direct translation of the differences (the right side plot) without doing mental calculation.\nThe two colors of the horizontal bar chart gives an immediate answer to which region is above and below the Singapore’s average.\n\n\n\n1. T.S. Kam, R for Visual Analytics Chapter 9 for visualisation of Ridgeline plots with quantile lines.\n2. Claus O. Wilke, Fundamentals of Data Visualization Chapter 2 for understanding and classification of variables.\n3. Stack Overflow, “Filter rows which contain a certain string” for removing en bloc sales from the data frame."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#overview",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#overview",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n\nIn this take-home exercise, you are required to:\n\nselect one data visualisation from the Take-home Exercise 1 submission prepared by your classmate,\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualisation design principles and best practices you had learned in Lesson 1 and 2.\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.\n\n\n\n\nThe original visualisation can be found in this link. I will be using EDA 3 for this take home exercise. Below shows the original plot and the insights by the original creator:\n\nThe Insights - The Central Region’s peak is the most pronounced and shifted towards the high, indicating that there is a high concentration of properties with higher unit prices.\n- The East Region’s pea is lower and more towards the middle of the x-axis compared to the Central Region. This implies that while the East Region has properties with moderate unit prices, it does not reach as high of a price point as frequently as the Central Region.\n- North East and North Regions peaks are less sharp and positioned towards the lower end of the price scale, suggesting a more affordable housing options and a wider distribution of unit prices. North Region appears to have a slightly broader distribution than North East.\n- West Region has the lowest peak among all the regions and is positioned towards the far left of the plot. This indicates that the West Region is the most affordable in Singapore."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#set-up",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#set-up",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "We will now set up according to the original code provided in the link.\n\n\nT he pac::p_load() function to load the required R packages in the working environment. The following packages are used in this set up:\n\nggthemes: Extra themes, geoms, and scales for ggplot2.\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\ncolorspace:\nggiraph: for making ‘ggplot’ graphics interactive.\nplotly: R library for plotting interactive statistical graphs.\npatchwork: specially designed for combining separate ggplot2 graphs into a single figure.\nlubridate: for easy and fast parsing of Date / Time\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggdist: a ggplot2 extension specially design for visualising distribution and uncertainty\n\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales,\n               viridis, cowplot, \n               dplyr, plotly,\n               tidyr, lubridate, \n               ggplot2, ggExtra)\n\n\n\n\nIdentify the missing values in the data set and removed any missing elements. ‘Type of Sale’ and ‘Property type’ has been converted to factor format. ‘Transacted Price ($)’ and ‘Area (SQFT)’ are converted to numeric data types. ‘Type of Sale’ has been group into three categories. ‘Sale Date’ has been converted to Date format.\nThe process had been repeated for all five data sets.\n\nImport Data SetConverting DataConverting Dates\n\n\n\nds1 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\nds2 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\nds3 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\nds4 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\nds5 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\n\n\n\nprepare_dataset &lt;- function(ds) {\n  colSums(is.na(ds))\n  ds &lt;- na.omit(ds)\n  \n  ds$`Type of Sale` &lt;- tolower(as.character(ds$`Type of Sale`))\n  ds$`Type of Sale` &lt;- ifelse(ds$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds$`Type of Sale`, \"other\")\n  ds$`Type of Sale` &lt;- as.factor(ds$`Type of Sale`)\n  \n  ds$`Property Type` &lt;- as.factor(ds$`Property Type`)\n  \n  ds$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Transacted Price ($)`, perl = TRUE))\n  ds$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Area (SQFT)`, perl = TRUE))\n  ds$`Unit Price ($ PSF)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Unit Price ($ PSF)`, perl = TRUE))\n  \n  return(ds)\n}\n\n# Apply the function to each dataset\nds1 &lt;- prepare_dataset(ds1)\nds2 &lt;- prepare_dataset(ds2)\nds3 &lt;- prepare_dataset(ds3)\nds4 &lt;- prepare_dataset(ds4)\nds5 &lt;- prepare_dataset(ds5)\n\n# Combine the datasets\ncombined_ds &lt;- rbind(ds1, ds2, ds3, ds4, ds5)\n\n\n\n\n# Convert Sale Date to Date format\nds1$`Sale Date` &lt;- dmy(ds1$`Sale Date`)\nds2$`Sale Date` &lt;- dmy(ds2$`Sale Date`)\nds3$`Sale Date` &lt;- dmy(ds3$`Sale Date`)\nds4$`Sale Date` &lt;- dmy(ds4$`Sale Date`)\nds5$`Sale Date` &lt;- dmy(ds5$`Sale Date`)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#critic-on-the-eda-3",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#critic-on-the-eda-3",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "The original plot and code is as below:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(viridis)\n\nggplot(combined_ds, aes(x = `Unit Price ($ PSF)`, y = `Planning Region`, fill = `Planning Region`)) +\n  geom_density_ridges(scale = 3) +\n  scale_fill_viridis(discrete = TRUE) +\n  labs(title = \"Unit Price ($ PSF) Distribution by Planning Region\",\n       x = \"Unit Price ($ PSF)\",\n       y = \"Planning Region\") +\n  theme_ridges()\n\n\n\n\nThe Insights\n\nThe Central Region’s peak is the most pronounced and shifted towards the high, indicating that there is a high concentration of properties with higher unit prices.\n\nThe East Region’s pea is lower and more towards the middle of the x-axis compared to the Central Region. This implies that while the East Region has properties with moderate unit prices, it does not reach as high of a price point as frequently as the Central Region.\n\nNorth East and North Regions peaks are less sharp and positioned towards the lower end of the price scale, suggesting a more affordable housing options and a wider distribution of unit prices. North Region appears to have a slightly broader distribution than North East.\n\nWest Region has the lowest peak among all the regions and is positioned towards the far left of the plot. This indicates that the West Region is the most affordable in Singapore."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#critics-on-aesthetics",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#critics-on-aesthetics",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "The distribution without the quantile lines is unable to let audience know where is the median and make it hard to conclude just using peak: “West Region has the lowest peak among all the regions and is positioned towards the far left of the plot. This indicates that the West Region is the most affordable in Singapore.” While the peak of the respective region does indicate the highest frequency of data points, it does not reveal the overall median price and other aspect such as the the 4 quantiles. Hence, it might be easier for the audience if quantiles were included in the aesthetics of the plot. With this enhancement, it might be easier to define which Region is more affordable, rather than just saying that West is most affordable as it is “most far left”.\n\nThe legend for the Planning Region to the right of the plot is redundant, as it is very clear from the y-axis which plot belongs to which region. If we choose to retain the legend, perhaps it could be compressed slightly smaller to the top right corner of the plot (as there are ample empty space between the 4000-6000 mark along x-axis), and the free up spaces could be used to insert another plot that enhance the story-telling for this plot.\n\nThe current distribution is 100% opaque and parts of the North Region graph is overlapping the West Region. While the peak of the West Region is still visible, it could be better for audience if the distribution is slightly transparent to allow the audience to see the full distribution of the West Region. It will be complementing the enhancement with quantiles added, as by adjusting the transparency, we will be able to see all the quantiles without guessing through the overlapped areas.\n\n\n\n\nAs most of the distribution in this plot falls between the $1,000-$3,000 mark along the x-axis, the current axis ticks did not allow the audience to have a clear sense of where the peaks are, except for a rough sense of gauging the peak from the neares two x-axis ticks, which is 0 or 2000. To alleviate this issue, the frequency of the x-axis ticks could be increased. Also, visually the plot for the Central Region at the most right, seems to end at just below the 5,000 mark. Space could be saved by ending the x-axis ticks at 5,000 instead, without affecting the clarity and truthfulness of the plot.\n\nInstead of guessing from the distribution which Region is the most affordable and which is the highest priced, it would be clearer if we add in another plot with comparison of the exact mean and median price across the 5 regions using a horizontal bar chart to complement the existing plot.\n\nThe plot is able to let audience understand the overall comparison of distribution against the other 4 regions, but did not provide any comparison of each region against the overall median Unit Price in Singapore. To help audience understand the distribution with respect to the overall median, an overall median line for the Unit Price could be added. In this way, not only we put perspective of region against region, we also include the perspective of each region against the overall market in Singapore."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#the-data-visualisation-makeover",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#the-data-visualisation-makeover",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "Task: Prepare a sketch for the alternative design by using the data visualisation design principles and best practices you had learned in Lesson 1 and 2.\nUsing the 6 critics mentioned in section 3, I will attempt to enhance the plot by including/removing the following features:\n\nInclude quantile lines for each Region.\nRemove the legend.\nIncrease the transparency of the distribution to ensure all parts of the distribution is not hidden behind other distribution. Alternatively, we can adjust the scale of the geom_density_ridges() to prevent overlaps. Decision can be made after generating both types for consideration.\nIncrease the frequency of the x-axis ticks with soft grid lines to improve readability of distribution.\nRemove the excess space at the right of the plot after 5,000 mark of x-axis.\nAdd in a horizontal bar chart to the right of the existing plot to include the comparison with overall median Unit Price ($ PSF) in Singapore with each of the region.\nAdd in a overall Median Unit Price ($ PSF) for the existing ridgeline plot.\nInclude median value annotations for each region in the existing ridgeline plot.\nRename the y-axis to just the region name, i.e. “West” instead of “West Region”.\nUsing patchwork to patch both plots side by side. The left and right plot should have the same region in the same line for consistency.\n\n\n\n\n\nThe first sketch below shows the intended implementation of the enhancement as mentioned in section 4.1. After this quick sketch with the median values, I realise that there are some further steps to take for a more coherent picture. (caveat: the median value is a rough calculation to facilitate the sketch, it may not be the same value as the final plot reproduced)\n\nThe horizontal bar plot should be sorted according from largest negative value to the highest positive value (red at the top to blue at the bottom). This allows the audience to know the most affordable region to the most expensive region from top down.\nThe distribution plot to the left must synchronised in the same sequence based on the Region, so that the price deviation on the right plot is correctly reflected as the same Region.\n\n\n\n\n\n\n\n# Calculate median values\nmedian_values &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`) %&gt;%\n  summarise(median_value = median(`Unit Price ($ PSF)`))\n\n# Recode `Planning Region`\ncombined_ds &lt;- combined_ds %&gt;%\n  mutate(`Planning Region` = recode(`Planning Region`, \n                                  \"Central Region\" = \"Central\",\n                                  \"East Region\" = \"East\",\n                                  \"North Region\" = \"North\",\n                                  \"North East Region\" = \"North East\",\n                                  \"West Region\" = \"West\"\n                                  ))\n\n\ncombined_ds1 &lt;- combined_ds %&gt;%\n  mutate(`Planning Region` = factor(`Planning Region`, levels = median_values$`Planning Region`[order(median_values$median_value)]))\n\n\np1 &lt;- ggplot(combined_ds, \n       aes(x = `Unit Price ($ PSF)`, \n           y = `Planning Region`,\n           fill = `Planning Region`)) +\n   geom_density_ridges(alpha = 0.2, quantile_lines = TRUE, quantile_fun = function(x, ...) median(x))  +\n  geom_text(data = median_values, \n            aes(x = median_value, \n                y = `Planning Region`, \n                label = paste(\"Median:\", round(median_value, 2))),\n            hjust = -0.2, \n            vjust = -2.8, \n            color = \"black\", \n            size = 3) +\n  labs(title = \"Unit Price ($ PSF) Distribution by Planning Region\",\n       x = \"Unit Price ($ PSF)\",\n       y = \"Planning Region\") +\n  geom_vline(aes(xintercept = median(`Unit Price ($ PSF)`)), col=\"red\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=2700, y=0.7, label=paste0(\"Singapore's Median:\",median(combined_ds$`Unit Price ($ PSF)`)), \n           size=3, color=\"red\") +\n   guides(fill = FALSE) + # Remove legend for Planning Region\n  xlim(0, 4000) \np1\n\n\n\n\n\n\n\n\n\n# Classifying the Median into Above and Below Singapore's Median\ndf_Aavg &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`) %&gt;%\n  summarise(avg_Aprice = median(`Unit Price ($ PSF)`))\ndf_Aavg$p_z &lt;- round((df_Aavg$avg_Aprice - median(combined_ds$`Unit Price ($ PSF)`)), 2)\ndf_Aavg$p_ztype &lt;- ifelse(df_Aavg$p_z &lt; 0, \"below\", \"above\")\n\np2 &lt;- ggplot(df_Aavg, aes(x = `Planning Region`, y = p_z, label = p_z)) +\n  geom_bar(stat = \"identity\", aes(fill = p_ztype), position = position_dodge2(width = 2), width = 0.5) +\n  scale_fill_manual(name = \"Average Price\", labels = c(\"Above Singapore's Median\", \"Below Singapore's Median\"), values = c(\"below\" = \"#C83E4D\", \"above\" = \"#4A5859\")) +\n  labs(title = \"Unit Price ($PSF) Deviations\", y = \"\", subtitle = \"by Planning Region\") +\n  coord_flip() +\n  theme(legend.position = \"None\", text = element_text(size = 8), plot.title = element_text(size = 10, face = \"bold\"))  +\n  theme(text = element_text(size = 7),\n        legend.title = element_blank(),\n        legend.position = c(0.8, 0.7),\n        legend.key.size = unit(0.3, 'cm'),\n        legend.key.height = unit(0.3, 'cm'),\n        legend.key.width = unit(0.3, 'cm')) +\n  geom_text(aes(x = `Planning Region`, \n                y = df_Aavg$p_z, \n                label = abs(df_Aavg$p_z)),\n            hjust = 0.5,\n            vjust = -2.5,\n            size = 3)\np2\n\n\n\n\n\n\n\n\n\np1+p2"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#conclusion",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#conclusion",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "Alignment of Planning Region for the left and right plot is important for visual perception of audience, as the alignment allows them to have a direct translation of the differences (the right side plot) without doing mental calculation.\nThe two colors of the horizontal bar chart gives an immediate answer to which region is above and below the Singapore’s average."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#references",
    "href": "Take-home Exercise/Take-home_Ex02/Take-home_Ex02.html#references",
    "title": "Take-home Ex 02",
    "section": "",
    "text": "1. T.S. Kam, R for Visual Analytics Chapter 9 for visualisation of Ridgeline plots with quantile lines.\n2. Claus O. Wilke, Fundamentals of Data Visualization Chapter 2 for understanding and classification of variables.\n3. Stack Overflow, “Filter rows which contain a certain string” for removing en bloc sales from the data frame."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class Exercise/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Ex 06",
    "section": "",
    "text": "Example from corporaexplorer\n\npacman::p_load(tidyverse, stringi,\n               rvest, corporaexplorer,\n               readtext,\n               quanteda, tidytext)\n\n\nbible &lt;- readr::read_lines(\"http://www.gutenberg.org/cache/epub/10/pg10.txt\")\n\nTo tidy the text, we need to know where does it start and end.\n\n# collapse all into one string\nbible &lt;- paste(bible, collapse = \"\\n\")\n\n\n# Identifying the beginning and end of the Bible / stripping PJ metadata\n # (technique borrowed from https://quanteda.io/articles/pkgdown/replication/digital-humanities.html).\nstart_v &lt;- stri_locate_first_fixed(bible, \"The First Book of Moses: Called Genesis\")[1]\nend_v &lt;- stri_locate_last_fixed(bible, \"Amen.\")[2]\nbible &lt;- stri_sub(bible, start_v, end_v)\n\n\n# In the file, every book in the bible is preceded by five newlines,\n  # which we use to split our string into a vector where each element is a book.\nbooks &lt;- stri_split_regex(bible, \"\\n{5}\") %&gt;%\n    unlist %&gt;%\n    .[-40]  # Removing the heading \"The New Testament of the King James Bible\",\n              # which also was preceded by five newlines.\n\n\n# Because of the structure of the text in the file:\n  # Replacing double or more newlines with two newlines, and a single newline with space.\nbooks &lt;- str_replace_all(books, \"\\n{2,}\", \"NEW_PARAGRAPH\") %&gt;%\n    str_replace_all(\"\\n\", \" \") %&gt;%\n    str_replace_all(\"NEW_PARAGRAPH\", \"\\n\\n\")\nbooks &lt;- books[3:68]  # The two first elements are not books\n\n\n# Identifying new chapters within each book and split the text into chapters.\n# (The first characters in chapter 2 will e.g. be 2:1)\nchapters &lt;- str_replace_all(books, \"(\\\\d+:1 )\", \"NEW_CHAPTER\\\\1\") %&gt;%\n    stri_split_regex(\"NEW_CHAPTER\")\n\n\n# Removing the chapter headings from the text (we want them as metadata).\nchapters &lt;- lapply(chapters, function(x) x[-1])\n\n\n# We are not quite happy with the long book titles in the King James Bible,\n  # so we retrieve shorter versions from esv.org which will take up less\n  # space in the corpus map plot.\nbook_titles &lt;- read_html(\"https://www.esv.org/resources/esv-global-study-bible/list-of-abbreviations\") %&gt;%\n  html_nodes(\"td:nth-child(1)\") %&gt;%\n  html_text() %&gt;%\n  .[13:78]  # Removing irrelevant elements after manual inspection.\n\n\n# We add a column indicating whether a book belongs to the Old or New Testament,\n#   knowing that they contain respectively 39 and 27 books.\ntestament &lt;- c(rep(\"Old\", 39), rep(\"New\", 27))\n\n\n# Data frame with one book as one row.\nbible_df &lt;- tibble::tibble(Text = chapters,\n                           Book = book_titles,\n                           Testament = testament)\n\n\n# We want each chapter to be one row, but keep the metadata (book and which testament).\nbible_df &lt;- tidyr::unnest(bible_df, Text)\n\n\nKJB &lt;- prepare_data(dataset = bible_df,\n                    date_based_corpus = FALSE,\n                    grouping_variable = \"Book\",\n                    columns_doc_info = c(\"Testament\", \"Book\"))\n\n\ntext field = text we want to analyse\n\nMake sure you check the class of the object. The below should show “corporaexplorerobject”.\n\nclass(KJB)\n\n[1] \"corporaexplorerobject\"\n\n\n\nexplore(KJB)\n\n\npacman::p_load(jsonlite, tidygraph,ggraph,\n               visNetwork, graphlayouts,\n               ggforce, skimr, tidytext,\n               tidyverse)\n\n\nmc3_data &lt;- fromJSON(\"data/MC3.json\")\n\nThis data is a list, not a dataframe.\n\nclass(mc3_data)\n\n[1] \"list\"\n\n\nUse distinct to remove duplicate\n\nmc3_edges &lt;-\n  as_tibble(mc3_data$links) %&gt;%\n  distinct() %&gt;%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup\n\n\nclean edge file\n\nmc3_nodes &lt;- as_tibble(mc3_data$nodes) %&gt;% \n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %&gt;% \n  select(id, country, type, revenue_omu,\n         product_services)\n\n\nskim(mc3_edges)\n\n\nData summary\n\n\nName\nmc3_edges\n\n\nNumber of rows\n24036\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsource\n0\n1\n6\n700\n0\n12856\n0\n\n\ntarget\n0\n1\n6\n28\n0\n21265\n0\n\n\ntype\n0\n1\n16\n16\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nweights\n0\n1\n1\n0\n1\n1\n1\n1\n1\n▁▁▇▁▁\n\n\n\n\n\n\n\nAdd the columns back in after cleaning\n\nid1 &lt;- mc3_edges %&gt;% \n  select(source) %&gt;% \n  rename(id = source)\n\nid2 &lt;- mc3_edges %&gt;% \n  select(target) %&gt;% \n  rename(id = target)\n\nmc3_nodes1 &lt;- rbind(id1,id2) %&gt;% \n  distinct() %&gt;% \n  left_join(mc3_nodes,\n            unmatched = \"drop\")\n\n\nmc3_graph &lt;- tbl_graph(nodes = mc3_nodes1,\n                       edges = mc3_edges,\n                       directed = FALSE) %&gt;% \n  mutate(betweenness_centrality = centrality_betweenness(),\n                                                         closeness_centrality = centrality_closeness())\n\n\nmc3_graph %&gt;% \n  filter(betweenness_centrality &gt;= 300000) %&gt;% \nggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha=0.5)) +\n  geom_node_point(aes(\n    size = betweenness_centrality,\n    colors = \"lightblue\",\n    alpha = 0.5)) +\n  scale_size_continuous(range=c(1,10)) +\n  theme_graph()"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#aggregating-weight-for-edges",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#aggregating-weight-for-edges",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "To get aggregated weight for the edges by unique source, target and type.\n\nmc2_edges_agg &lt;-\n  mc2_edges_raw %&gt;%\n  distinct() %&gt;%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) \n  ungroup\n\nfunction (x, ...) \n{\n    UseMethod(\"ungroup\")\n}\n&lt;bytecode: 0x0000015bdefa0870&gt;\n&lt;environment: namespace:dplyr&gt;"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#the-flow-of-cargo",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#the-flow-of-cargo",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Finding out which commodity goes to which ports.\n\ncargo_port_list &lt;- mc2_edges_raw %&gt;% \n  filter(type == \"Event.Transaction\") %&gt;% \n  select(source,target) %&gt;% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\ncargo_commodity_list &lt;- mc2_edges_raw %&gt;% \n  filter(type == \"Event.Transaction\") %&gt;% \n  select(source,target) %&gt;% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  rename(commodity = target)\n\ncargo_list &lt;- cargo_port_list %&gt;% \n  left_join(cargo_commodity_list) %&gt;%\n  left_join(transaction_edges) %&gt;% \n  select(source, target, commodity, date) %&gt;% \n  rename(cargo = source, city = target)\n\n\ndelivery_nodes &lt;- mc2_nodes_raw %&gt;% \n  filter(type == \"Entity.Document.DeliveryReport\")\n\nAdding quantity (qty_ton) to cargos\n\ncargo_list &lt;- delivery_nodes %&gt;% \n  select(id,qty_tons) %&gt;% \n  rename(cargo = id) %&gt;% \n  left_join(cargo_list)\n\n\nharbor_report &lt;- mc2_edges_raw %&gt;% \n  filter(type == \"Event.HarborReport\") %&gt;% \n  select(source, target, date) %&gt;% \n  distinct() %&gt;% \n  rename(city = target, vessel = source)\n\n\ncargo_list &lt;- cargo_list %&gt;% \n  left_join(harbor_report) %&gt;% \n  rename(vessel_hr = vessel)\n\n\ncolSums(is.na(cargo_list))\n\n    cargo  qty_tons      city commodity      date vessel_hr \n        0         0         0         0         0      2952 \n\n\n\nfishing_vessel_list &lt;- fishing_vessels_nodes %&gt;% \n  select(id) \n\nfishing_vessel_list &lt;- as.list(fishing_vessel_list)\n\ntransponder_location &lt;- mc2_edges_raw %&gt;% \n  filter(type == \"Event.TransportEvent.TransponderPing\") %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, target, time) %&gt;% \n  mutate(time = substr(time,1,10)) %&gt;% \n  mutate(time = ymd(time)) %&gt;%\n  distinct() %&gt;% \n  rename(city = source, vessel_tp = target, date = time)\n\n\ncargo_list &lt;- cargo_list %&gt;% \n  mutate(date = ymd(date)) %&gt;% \n  left_join(transponder_location)\n\n\ntransponder_ping_edge &lt;- mc2_edges_raw %&gt;% \n  filter(type == \"Event.TransportEvent.TransponderPing\")\n\nFinding the vessel that enters the city same day as the cargo\n\nfishing_vessel_list &lt;- fishing_vessels_nodes %&gt;% \n  select(id) \n\nfishing_vessel_list &lt;- as.list(fishing_vessel_list)\n\nvessel_city_list &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  filter(dwell &gt; 0) %&gt;% \n  mutate(time = substr(time,1,10)) %&gt;% \n  mutate(time = ymd(`_date_added`)) %&gt;% \n  select(source, target, time) %&gt;% \n  distinct() %&gt;% \n  rename(date = time, target = source, id = target)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-2",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-2",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#illegal-fishing-by-southseafood-express-corp",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#illegal-fishing-by-southseafood-express-corp",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "SouthSeafood Express Corp operates two fishing vessels by the id of “snappersnatcher7be” and “roachrobberdb6”.\n\ntransponder_ping_edge &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\")\n\n\ntransponder_ping_edge_agg &lt;-\n  transponder_ping_edge %&gt;%\n  distinct() %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\n\ntransponder_ping_edge_agg %&gt;% \n  filter(target %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %&gt;%\n  group_by(target) %&gt;% \n  ggplot(aes(x=target, y=source,\n             size = weights)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nsouthseafood_edge &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;% \n  filter(target %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %&gt;% \n  arrange(target,time)\n\n\nssf_edges_agg &lt;-\n  southseafood_edge %&gt;%\n  distinct() %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\n\nid1 &lt;- ssf_edges_agg %&gt;% \n  select(source) %&gt;% \n  rename(id = source) \n\nid2 &lt;- ssf_edges_agg %&gt;% \n  select(target) %&gt;% \n  rename(id = target)\n\nmc2_nodes1 &lt;- rbind(id1,id2) %&gt;% \n  distinct() \n\n\nssf_graph &lt;- tbl_graph(nodes = mc2_nodes1,\n                       edges = ssf_edges_agg,\n                       directed = TRUE)\n\n\n# Add a color column to nodes\nssf_graph &lt;- ssf_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(color = case_when(\n    id %in% c(\"snappersnatcher7be\", \"roachrobberdb6\") ~ \"Vessel\",\n    TRUE ~ \"Location\"\n  ))\n\n# Create the plot\nssf_graph %&gt;% \n  activate(edges) %&gt;%\n  arrange(desc(weights)) %&gt;% \n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(color = \"\", \n                     linewidth = weights)) +\n  geom_node_point(aes(color = color, size = 10)) + \n  theme_graph() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    text = element_text(color = \"black\"))+\n  geom_node_text(aes(label = id), \n                 repel = TRUE, \n                 vjust = 1, \n                 hjust = 1,\n                 size = 3)\n\n\n\n\n\n\n\n\n\n\nSince only Snapper Snatcher appears to be operating in Ghoti Preserve, we will examine this fishing vessel more closely.\n\nsnapper_activities &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;% \n  filter(target %in% c(\"snappersnatcher7be\")) %&gt;% \n  filter(source == \"Ghoti Preserve\") %&gt;% \n  arrange(target,time) %&gt;% \n  mutate(end_time = time + dwell) %&gt;% \n  select(time, dwell, end_time)\nsnapper_activities\n\n                 time      dwell            end_time\n1 2035-02-02 05:39:59 282000.853 2035-02-05 12:00:00\n2 2035-02-09 05:49:11 281448.765 2035-02-12 12:00:00\n3 2035-02-16 07:02:09 277070.841 2035-02-19 12:00:00\n4 2035-03-15 05:46:02   6410.348 2035-03-15 07:32:52\n\n\nThere three instances (2,9 and 16 Feb) where Snapper Snatcher stayed at the Ghoti Preserve for over 3 days. These are the instances where SouthSeafood Express Corp’s Snapper Snatcher conducted IUU Fishing in Ghoti Preserve."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-4",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-4",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "The Questions:\n\nHow did fishing activity change after SouthSeafood Express Corp was caught?\nWhat new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\nIn order to understand the change in fishing activities, we first have to determine the date where SouthSeafood Express Corp was caught. We will use this timeline as the\nThe final activities of SouthSeafood’s vessels are on 2035-05-16 (snappersnatcher7be) and 2035-05-16 (roachrobberdb6) according to the transponder pings. Hence, we can conclude that the SouthSeafood is caught for illegal fishing, and had ceased operating its fishing vessels since 2035-05-16."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on Exercise 07: 17 Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "href": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "title": "Hands-on Exercise 07: 17 Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#getting-started",
    "title": "Hands-on Exercise 07: 17 Visualising and Analysing Time-oriented Data",
    "section": "17.2 Getting Started",
    "text": "17.2 Getting Started\nLoading the packages.\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "href": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 07: 17 Visualising and Analysing Time-oriented Data",
    "section": "17.3 Plotting Calendar Heatmap",
    "text": "17.3 Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n17.4.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n17.4.2 Importing the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n17.4.3 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\nglimpse(attacks)\n\nRows: 199,999\nColumns: 3\n$ timestamp      &lt;dttm&gt; 2015-03-12 15:59:16, 2015-03-12 16:00:48, 2015-03-12 1…\n$ source_country &lt;chr&gt; \"CN\", \"FR\", \"CN\", \"US\", \"CN\", \"CN\", \"CN\", \"CN\", \"CN\", \"…\n$ tz             &lt;chr&gt; \"Asia/Shanghai\", \"Europe/Paris\", \"Asia/Shanghai\", \"Amer…\n\n\n\n\n17.4.4 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts,sc,tz){\n  real_times &lt;- ymd_hms(ts,\n                        tz = tz[1],\n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\nUnderstanding the code chunk:\nThis function is named make_hr_wkday and it takes three arguments:\n\nts - A vector of timestamps.\nsc - A vector indicating the source country.\ntz - A vector of time zones.\n\nConvert Timestamps to Date-Time Objects:\n\n\nymd_hms is a function from the lubridate package that parses date-time strings into POSIXct objects.\nts is the input vector of timestamps.\ntz = tz[1] sets the time zone for the parsing. tz[1] means it uses the first element of the tz vector as the time zone.\nquiet = TRUE suppresses warning messages during parsing.\n\nCreate a Data Table:\n\n\ndata.table is a function from the data.table package, which creates a data table (an enhanced data frame).\nsource_country = sc assigns the sc vector to a column named source_country.\nwkday = weekdays(real_times) extracts the weekday names from real_times and assigns them to a column named wkday.\nhour = hour(real_times) extracts the hour part of the real_times and assigns it to a column named hour.\n\nReturn the Data Table:\n\n\nThe function returns the data table dt.\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nDefine wkday_levels:\n\nThis line defines a character vector wkday_levels that specifies a custom ordering of the days of the week, starting with Saturday and ending with Sunday.\nPipeline to Process the attacks Data Frame:\n\nGroup by Time Zone (tz):\n\nThis groups the attacks data frame by the tz (time zone) column.\nThe subsequent operations will be performed separately for each time zone group.\n\nApply make_hr_wkday to Each Group:\n\ndo applies the make_hr_wkday function to each group.\n.$timestamp, .$source_country, and .$tz refer to the respective columns within each group.\n\nUngroup the Data:\n\nThis removes the grouping, resulting in a single, unified data frame.\n\nMutate to Create Factors for wkday and hour:\n\nwkday = factor(wkday, levels = wkday_levels) converts the wkday column to a factor with levels ordered according to wkday_levels.\n\n\n\nhour = factor(hour, levels = 0:23) converts the hour column to a factor with levels from 0 to 23.\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n17.4.5 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"red\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n17.4.6 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\n17.4.7 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n17.4.8 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"red\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "href": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 07: 17 Visualising and Analysing Time-oriented Data",
    "section": "17.5 Plotting Cycle Plot",
    "text": "17.5 Plotting Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\n17.5.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n7.5.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`),\n                    levels = 1:12,\n                    labels = month.abb,\n                    ordered = TRUE)\nair$year &lt;- year(air$`Month-Year`)\n\n\n\n17.5.3 Step 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n17.5.4 Step 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n17.5.5 Step 6: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() +\n  geom_line(data = Vietnam,\n            aes(x = year,\n                y = `Vietnam`,\n                group = month),\n            color = \"black\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#plotting-slopegraph",
    "href": "Hands-on Exercise/Hands-on_Ex07/Hands-on_Ex07.html#plotting-slopegraph",
    "title": "Hands-on Exercise 07: 17 Visualising and Analysing Time-oriented Data",
    "section": "17.6 Plotting Slopegraph",
    "text": "17.6 Plotting Slopegraph\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n17.6.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n17.6.2 Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Liang Xiuhao\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-edges",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-edges",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "First, we extract only distinct edges from the tibble links data.frame of mc2_data and save it as a tibble data.frame called mc2_edges.\n\nmc2_edges &lt;- mc2_data$links %&gt;% \n  distinct()\n\nNext, glimpse() of dplyr will be used to reveal the structure of mc2_edges tibble data.table.\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;chr&gt; \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\nFrom the table above, we can identify some issues with the data:\n\nThe columns with date data type are all in character format.\nSome columns have names that starts with “_”. These need to be rename to avoid coding issues.\n\n\n\n\n\nmc2_edges$time &lt;- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` &lt;- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` &lt;- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date &lt;- as_datetime(mc2_edges$date)\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;dttm&gt; 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` &lt;dttm&gt; 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\nmc2_edges &lt;- mc2_edges %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\nThe code chunk below combined the following steps:\n\nSplitting the words by “.” - after observing that the format for type is as such: “Event.TransportEvent.TransponderPing”\nThe max(lengths(word_list)) will be used to find the maximum number of elements in any split.\nApply function(x) to pad shorter splits with NA values to make them all the same length.\nCreate word_df and changing column names to event1 etc.\nConvert word_df from matrix into tibble data.frame, and checks its class.\nAppend word_df to mc2_edges tibble data.frame.\nSaving mc2_edges into R rds format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\nword_list &lt;- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"event\", 1:max_elements)\n\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(event2, event3)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nmc2_edges &lt;- mc2_edges %&gt;%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-nodes",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#wrangling-and-tidying-nodes",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "The code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\nmc2_nodes &lt;- as_tibble(mc2_data$nodes) %&gt;%\n  distinct()\n\nNext, take a glimpse() to understand the data structure.\n\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for type column issues we discussed earlier, two additional data issues can be observed. They are:\n\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data.\nSome values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.\n\n\n\nCorrect the date data type and take a glimpse() to confirm changes.\n\nmc2_nodes$`_last_edited_date` &lt;- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` &lt;- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date &lt;- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;dttm&gt; 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  &lt;dttm&gt; 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R rds format yet, as there are more works to be done to clean up the dataframe.\n\nword_list &lt;- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"entity\", 1:max_elements)\n\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(entity2, entity3)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  cbind(word_df)\n\n\n\n\nUsing mutate() of dplyr and gsub() of Base R to tidy up the values in the cell. Essentially, the unwanted characters like c, (, ), and \\ are removed by substituting with empty value \"\" for both Activities and fish_species_present columns. What is left in the columns will be characters separated by ,.\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %&gt;% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %&gt;%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %&gt;% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %&gt;%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\nLastly, we will save the tidied mc2_nodes\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-1-flow-of-commercially-caught-fish",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#task-1-flow-of-commercially-caught-fish",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "In this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:\n\nAssociating the vessels with their probable cargoes\nWhich vessels deliver which products and when?\nExamine the seasonal trends and anomalies in the port exit records"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#associating-the-vessels-and-their-probable-cargoes",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#associating-the-vessels-and-their-probable-cargoes",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "To find out which commodity goes to which ports, we first create a cargo list that links the cargo to the cities and commodities. At the same time, we also clean up the name of the fish, leaving only its common name in the “name” column, by removing all the characters after the “/”.\n\ncargo_port_list &lt;- harbor_import_records_edges %&gt;% \n  select(source,target) %&gt;% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\ncargo_commodity_list &lt;- harbor_import_records_edges %&gt;% \n  select(source,target) %&gt;% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  rename(commodity = target)\n\ncargo_list &lt;- cargo_port_list %&gt;% \n  left_join(cargo_commodity_list) %&gt;%\n  left_join(harbor_import_records_edges) %&gt;% \n  select(source, target, commodity, date) %&gt;% \n  rename(cargo = source, city = target) \n\ncargo_list&lt;- harbor_import_records_nodes %&gt;% \n  rename(commodity = id) %&gt;% \n  select(name, commodity) %&gt;% \n  left_join(cargo_list) %&gt;% \n  mutate(name = str_replace(name, \"/.*\", \"\"))\n\ncargo_list&lt;- harbor_import_records_nodes %&gt;% \n  select(id,qty_tons) %&gt;% \n  rename(cargo = id) %&gt;% \n  left_join(cargo_list,\n            unmatched = \"drop\") %&gt;%\n  filter(if_all(c(qty_tons), ~ !is.na(.)))\n\nNext, we will find the aggregated value by the type of fish, the city, and the date of transaction.\n\nfish_by_port_agg &lt;- cargo_list %&gt;%\n  distinct() %&gt;%\n  group_by(name, city, date) %&gt;%\n  summarise(total_qty_ton = sum(qty_tons)) %&gt;%\n  ungroup() %&gt;%\n  mutate(month = month(date)) \n\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;%\n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton))\n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n# Function to create a calendar heat map\ncreate_heatmap &lt;- function(data, city, f) {\n  ggplot(data, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n\n\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#associating-the-vessels-with-their-probable-cargoes",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#associating-the-vessels-with-their-probable-cargoes",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "To find out which commodity goes to which ports, we first create a cargo list that links the cargo to the cities and commodities. At the same time, we also clean up the name of the fish, leaving only its common name in the “name” column, by removing all the characters after the “/”.\n\ncargo_port_list &lt;- harbor_import_records_edges %&gt;% \n  select(source,target) %&gt;% \n  filter(target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\ncargo_commodity_list &lt;- harbor_import_records_edges %&gt;% \n  select(source,target) %&gt;% \n  filter(!target %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  rename(commodity = target)\n\ncargo_list &lt;- cargo_port_list %&gt;% \n  left_join(cargo_commodity_list) %&gt;%\n  left_join(harbor_import_records_edges) %&gt;% \n  select(source, target, commodity, date) %&gt;% \n  rename(cargo = source, city = target) \n\ncargo_list&lt;- harbor_import_records_nodes %&gt;% \n  rename(commodity = id) %&gt;% \n  select(name, commodity) %&gt;% \n  left_join(cargo_list) %&gt;% \n  mutate(name = str_replace(name, \"/.*\", \"\"))\n\ncargo_list&lt;- harbor_import_records_nodes %&gt;% \n  select(id,qty_tons) %&gt;% \n  rename(cargo = id) %&gt;% \n  left_join(cargo_list,\n            unmatched = \"drop\") %&gt;%\n  filter(if_all(c(qty_tons), ~ !is.na(.)))\n\nMatching the vessel with the cargo list\nWe first single out all the fishing vessels from mc2_edges and define the fishing vessel location, start time and end time of the vessels in the particular location.\n\nfishing_vessel_list &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"FishingVessel\") %&gt;% \n  select(id) \n\nfishing_vessel_list &lt;- as.list(fishing_vessel_list)\n\nvessel_location &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, target, time, dwell) %&gt;% \n  arrange(target,time) %&gt;% \n  mutate(next_time = ifelse(lead(target) == target, lead(time), NA)) %&gt;% \n  mutate(next_time = as_datetime(next_time))   %&gt;% \n  mutate(end_time = time + dwell)\n\nvessel_location_city &lt;- vessel_location %&gt;% \n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\"))\n\nMerging cargo_list and vessel_location_city\n\ncargo_list &lt;- cargo_list %&gt;% \n  mutate(vessel_delivery_date = date + days(-1))\n\n\nvessel_location_city &lt;- vessel_location_city %&gt;% \n  mutate(date = substr(`time`,1,10)) %&gt;% \n  mutate(vessel_delivery_date = ymd(date)) \n\n\nvessel_location_match &lt;- vessel_location_city %&gt;% \n  select(source,target,vessel_delivery_date) %&gt;% \n  rename(city = source, vessel_hr = target) %&gt;% \n  left_join(cargo_list,\n            unmatched = \"drop\") %&gt;%\n  filter(if_all(c(qty_tons), ~ !is.na(.))) %&gt;% \n  distinct()\n\nThere are a total of 5,307 unique cargoes, but we have 65,340 matches between the cargoes and vessels.\n\nvessel_location_match %&gt;% \n  select(cargo) %&gt;% \n  distinct()\n\n                   cargo\n1    cargo_2035_30543bf8\n2    cargo_2035_30544dae\n3    cargo_2035_2669078b\n4    cargo_2035_30545119\n5    cargo_2035_305464b1\n6    cargo_2035_26699791\n7    cargo_2035_30548bdf\n8    cargo_2035_27003cd3\n9    cargo_2035_3001480a\n10   cargo_2035_3113485f\n11   cargo_2035_3113505b\n12   cargo_2035_300163b6\n13   cargo_2035_31138b98\n14   cargo_2035_260361c4\n15   cargo_2035_3001893d\n16   cargo_2035_305503db\n17   cargo_2035_3113943e\n18   cargo_2035_3114013f\n19   cargo_2035_30021d35\n20   cargo_2035_31141efd\n21   cargo_2035_31142cb2\n22   cargo_2035_2700770f\n23   cargo_2035_2604045d\n24   cargo_2035_3002397e\n25   cargo_2035_3055178e\n26   cargo_2035_31143154\n27   cargo_2035_3114447b\n28   cargo_2035_30025175\n29   cargo_2035_305522ac\n30   cargo_2035_311451b5\n31   cargo_2035_31146b3e\n32   cargo_2035_27009220\n33   cargo_2035_285584e7\n34   cargo_2035_3002772e\n35   cargo_2035_311470e5\n36   cargo_2035_31149290\n37   cargo_2035_305538c2\n38   cargo_2035_30029c52\n39   cargo_2035_26263703\n40   cargo_2035_29369e58\n41   cargo_2035_250710f3\n42   cargo_2035_26268346\n43   cargo_2035_264947cc\n44   cargo_2035_29374be7\n45   cargo_2035_262704be\n46   cargo_2035_29376731\n47   cargo_2035_2507376e\n48   cargo_2035_26272077\n49   cargo_2035_26458bcb\n50   cargo_2035_293784e2\n51   cargo_2035_29387eb6\n52   cargo_2035_29745484\n53   cargo_2035_26462982\n54   cargo_2035_281711e8\n55   cargo_2035_297480c2\n56   cargo_2035_24065ce6\n57   cargo_2035_26464f84\n58   cargo_2035_23956ba0\n59   cargo_2035_24313467\n60   cargo_2035_264422ec\n61   cargo_2035_2646587a\n62   cargo_2035_2950370c\n63   cargo_2035_23957cfd\n64   cargo_2035_2646637b\n65   cargo_2035_30156210\n66   cargo_2035_23959ab6\n67   cargo_2035_2508454d\n68   cargo_2035_25572d67\n69   cargo_2035_28332486\n70   cargo_2035_29400e1b\n71   cargo_2035_29861f6e\n72   cargo_2035_3038132f\n73   cargo_2035_23960fa9\n74   cargo_2035_2646944e\n75   cargo_2035_23962f3c\n76   cargo_2035_24298085\n77   cargo_2035_264715c1\n78   cargo_2035_272650a0\n79   cargo_2035_2396328a\n80   cargo_2035_242660d7\n81   cargo_2035_26472e66\n82   cargo_2035_272765c6\n83   cargo_2035_28344af6\n84   cargo_2035_2982688d\n85   cargo_2035_29997681\n86   cargo_2035_23966ec6\n87   cargo_2035_2426962e\n88   cargo_2035_25578e75\n89   cargo_2035_26475bbe\n90   cargo_2035_2732737e\n91   cargo_2035_28465e29\n92   cargo_2035_239679db\n93   cargo_2035_24884946\n94   cargo_2035_25093b88\n95   cargo_2035_2557937d\n96   cargo_2035_27101746\n97   cargo_2035_27266d43\n98   cargo_2035_28466c1f\n99   cargo_2035_28801c50\n100  cargo_2035_29697d75\n101  cargo_2035_3036119a\n102  cargo_2035_30390aaf\n103  cargo_2035_239687f3\n104  cargo_2035_26477d70\n105  cargo_2035_271025fb\n106  cargo_2035_284678a5\n107  cargo_2035_239703bb\n108  cargo_2035_24272b98\n109  cargo_2035_25493588\n110  cargo_2035_27268a74\n111  cargo_2035_28375a92\n112  cargo_2035_29869d8e\n113  cargo_2035_303621df\n114  cargo_2035_239710af\n115  cargo_2035_241938f4\n116  cargo_2035_24778cef\n117  cargo_2035_2488936f\n118  cargo_2035_25811c17\n119  cargo_2035_26653c8b\n120  cargo_2035_27269fc6\n121  cargo_2035_28342875\n122  cargo_2035_28376768\n123  cargo_2035_2876626d\n124  cargo_2035_28805365\n125  cargo_2035_28850d37\n126  cargo_2035_29870b31\n127  cargo_2035_239726c0\n128  cargo_2035_24274378\n129  cargo_2035_26480407\n130  cargo_2035_27271c71\n131  cargo_2035_27906f30\n132  cargo_2035_28377af4\n133  cargo_2035_29871155\n134  cargo_2035_23974ca6\n135  cargo_2035_24897bc9\n136  cargo_2035_25099adb\n137  cargo_2035_25819234\n138  cargo_2035_26018613\n139  cargo_2035_26947427\n140  cargo_2035_27065105\n141  cargo_2035_27252295\n142  cargo_2035_27277628\n143  cargo_2035_2843950c\n144  cargo_2035_296575a4\n145  cargo_2035_30396791\n146  cargo_2035_30449092\n147  cargo_2035_30868a7a\n148  cargo_2035_23975884\n149  cargo_2035_27066076\n150  cargo_2035_2727994c\n151  cargo_2035_28440120\n152  cargo_2035_23976a08\n153  cargo_2035_24095b13\n154  cargo_2035_24278f4c\n155  cargo_2035_26257c81\n156  cargo_2035_264844ab\n157  cargo_2035_27885ed2\n158  cargo_2035_28348407\n159  cargo_2035_2949763c\n160  cargo_2035_297151ee\n161  cargo_2035_29830fa5\n162  cargo_2035_23977a6d\n163  cargo_2035_270688a2\n164  cargo_2035_284427f0\n165  cargo_2035_30035b54\n166  cargo_2035_23978abd\n167  cargo_2035_24097aa8\n168  cargo_2035_24280a49\n169  cargo_2035_260216f9\n170  cargo_2035_2625909e\n171  cargo_2035_26767885\n172  cargo_2035_27282d6f\n173  cargo_2035_27628367\n174  cargo_2035_27887a60\n175  cargo_2035_28350a9b\n176  cargo_2035_29499ac4\n177  cargo_2035_2983203f\n178  cargo_2035_23979493\n179  cargo_2035_24836909\n180  cargo_2035_25973d5b\n181  cargo_2035_26124625\n182  cargo_2035_263576c0\n183  cargo_2035_27532651\n184  cargo_2035_29445c6a\n185  cargo_2035_29661a29\n186  cargo_2035_23981254\n187  cargo_2035_24099b6f\n188  cargo_2035_242827ef\n189  cargo_2035_2583169d\n190  cargo_2035_26023d20\n191  cargo_2035_2626114c\n192  cargo_2035_26488644\n193  cargo_2035_27286c6c\n194  cargo_2035_278892bb\n195  cargo_2035_28352518\n196  cargo_2035_28776ca4\n197  cargo_2035_29501b13\n198  cargo_2035_2394778c\n199  cargo_2035_24204b16\n200  cargo_2035_24497c26\n201  cargo_2035_24911413\n202  cargo_2035_25832ea4\n203  cargo_2035_264354b4\n204  cargo_2035_27071b81\n205  cargo_2035_27223098\n206  cargo_2035_28309e4c\n207  cargo_2035_28353eb8\n208  cargo_2035_28826389\n209  cargo_2035_29835f38\n210  cargo_2035_23958501\n211  cargo_2035_2431048a\n212  cargo_2035_24385568\n213  cargo_2035_244412f7\n214  cargo_2035_24516a72\n215  cargo_2035_24799533\n216  cargo_2035_250181f1\n217  cargo_2035_25460af7\n218  cargo_2035_257336c7\n219  cargo_2035_2687691c\n220  cargo_2035_28923b0c\n221  cargo_2035_2894792b\n222  cargo_2035_30419f6a\n223  cargo_2035_3046426d\n224  cargo_2035_30643ebf\n225  cargo_2035_307485d2\n226  cargo_2035_23982236\n227  cargo_2035_24459fc5\n228  cargo_2035_24502114\n229  cargo_2035_24920107\n230  cargo_2035_258408b5\n231  cargo_2035_283147d7\n232  cargo_2035_28358a18\n233  cargo_2035_28831e2b\n234  cargo_2035_29840c1a\n235  cargo_2035_305032c7\n236  cargo_2035_239830f2\n237  cargo_2035_24330402\n238  cargo_2035_24503d0b\n239  cargo_2035_249227f8\n240  cargo_2035_25465012\n241  cargo_2035_25842aa1\n242  cargo_2035_26030044\n243  cargo_2035_27224e79\n244  cargo_2035_28315b12\n245  cargo_2035_2883238a\n246  cargo_2035_30149550\n247  cargo_2035_23984c4a\n248  cargo_2035_24289d1d\n249  cargo_2035_24923229\n250  cargo_2035_2546613a\n251  cargo_2035_25843a69\n252  cargo_2035_26031b96\n253  cargo_2035_268840d7\n254  cargo_2035_27078659\n255  cargo_2035_272250fb\n256  cargo_2035_27301f2f\n257  cargo_2035_2733370f\n258  cargo_2035_28452b54\n259  cargo_2035_30350c6c\n260  cargo_2035_23985513\n261  cargo_2035_24505cca\n262  cargo_2035_249279ed\n263  cargo_2035_25745d4d\n264  cargo_2035_258460cd\n265  cargo_2035_27228a03\n266  cargo_2035_28317fd9\n267  cargo_2035_28834337\n268  cargo_2035_29671c72\n269  cargo_2035_30151578\n270  cargo_2035_23986aa0\n271  cargo_2035_24291ac7\n272  cargo_2035_25624930\n273  cargo_2035_2584736a\n274  cargo_2035_26033a75\n275  cargo_2035_27080b4f\n276  cargo_2035_27229356\n277  cargo_2035_27305685\n278  cargo_2035_27898201\n279  cargo_2035_284544ab\n280  cargo_2035_30407061\n281  cargo_2035_27646428\n282  cargo_2035_27386013\n283  cargo_2035_276437b3\n284  cargo_2035_27366912\n285  cargo_2035_27644762\n286  cargo_2035_2887544e\n287  cargo_2035_27367bbb\n288  cargo_2035_27645875\n289  cargo_2035_27647b6b\n290  cargo_2035_2736949e\n291  cargo_2035_2764918f\n292  cargo_2035_28919e72\n293  cargo_2035_27371ad7\n294  cargo_2035_27652b54\n295  cargo_2035_27372167\n296  cargo_2035_2445006b\n297  cargo_2035_27373fc8\n298  cargo_2035_27655081\n299  cargo_2035_28867f80\n300  cargo_2035_24453e2d\n301  cargo_2035_27374c41\n302  cargo_2035_28869143\n303  cargo_2035_29190b6f\n304  cargo_2035_27377035\n305  cargo_2035_24326871\n306  cargo_2035_24456004\n307  cargo_2035_288726d0\n308  cargo_2035_29198186\n309  cargo_2035_30790f09\n310  cargo_2035_2404657f\n311  cargo_2035_28874684\n312  cargo_2035_24048be0\n313  cargo_2035_273798b3\n314  cargo_2035_2766434f\n315  cargo_2035_288763b8\n316  cargo_2035_2738003c\n317  cargo_2035_27665b0f\n318  cargo_2035_2887805d\n319  cargo_2035_28879b9d\n320  cargo_2035_27382134\n321  cargo_2035_28880463\n322  cargo_2035_27383ddd\n323  cargo_2035_27670033\n324  cargo_2035_2888254f\n325  cargo_2035_29365506\n326  cargo_2035_27557511\n327  cargo_2035_28883840\n328  cargo_2035_27672e33\n329  cargo_2035_28884dfd\n330  cargo_2035_26267e8e\n331  cargo_2035_27561ff4\n332  cargo_2035_28885226\n333  cargo_2035_2738731f\n334  cargo_2035_27674b84\n335  cargo_2035_288879fe\n336  cargo_2035_275665e0\n337  cargo_2035_28888ef4\n338  cargo_2035_2756784f\n339  cargo_2035_29740623\n340  cargo_2035_2757044a\n341  cargo_2035_288902eb\n342  cargo_2035_3117306a\n343  cargo_2035_26297998\n344  cargo_2035_276783f8\n345  cargo_2035_28891677\n346  cargo_2035_31174e0f\n347  cargo_2035_24674476\n348  cargo_2035_26301dd4\n349  cargo_2035_27576410\n350  cargo_2035_29417d8f\n351  cargo_2035_29744489\n352  cargo_2035_30762ac7\n353  cargo_2035_311788c3\n354  cargo_2035_2399679d\n355  cargo_2035_263031e7\n356  cargo_2035_27577be1\n357  cargo_2035_30764d70\n358  cargo_2035_3117920f\n359  cargo_2035_23997fac\n360  cargo_2035_27579c76\n361  cargo_2035_28894f01\n362  cargo_2035_29419a3f\n363  cargo_2035_239998e2\n364  cargo_2035_27392d8b\n365  cargo_2035_2768329d\n366  cargo_2035_2817300d\n367  cargo_2035_28895262\n368  cargo_2035_29682554\n369  cargo_2035_30512a46\n370  cargo_2035_307674ed\n371  cargo_2035_3118220f\n372  cargo_2035_240006a5\n373  cargo_2035_27393af7\n374  cargo_2035_2968466f\n375  cargo_2035_30513aa6\n376  cargo_2035_31183e46\n377  cargo_2035_24001fb5\n378  cargo_2035_250823be\n379  cargo_2035_2817598d\n380  cargo_2035_293965f1\n381  cargo_2035_29856d89\n382  cargo_2035_3037936c\n383  cargo_2035_24002b8d\n384  cargo_2035_25083f17\n385  cargo_2035_2709398c\n386  cargo_2035_2833106f\n387  cargo_2035_293999ef\n388  cargo_2035_29860b82\n389  cargo_2035_30380f54\n390  cargo_2035_24003bb0\n391  cargo_2035_24338ac1\n392  cargo_2035_24802f0a\n393  cargo_2035_26315159\n394  cargo_2035_27395001\n395  cargo_2035_27687904\n396  cargo_2035_281773b7\n397  cargo_2035_28900c35\n398  cargo_2035_29691f7a\n399  cargo_2035_30515de2\n400  cargo_2035_3064686c\n401  cargo_2035_3119010f\n402  cargo_2035_24004231\n403  cargo_2035_250854ef\n404  cargo_2035_25573cc1\n405  cargo_2035_27098d08\n406  cargo_2035_283368cf\n407  cargo_2035_294043c3\n408  cargo_2035_29864f7e\n409  cargo_2035_301594eb\n410  cargo_2035_30382ec6\n411  cargo_2035_24005055\n412  cargo_2035_243432bf\n413  cargo_2035_27594d13\n414  cargo_2035_29696623\n415  cargo_2035_30648b71\n416  cargo_2035_3077983a\n417  cargo_2035_31194d62\n418  cargo_2035_243447ce\n419  cargo_2035_25915f58\n420  cargo_2035_25956b12\n421  cargo_2035_27398ccb\n422  cargo_2035_304356ce\n423  cargo_2035_24686d17\n424  cargo_2035_248067a1\n425  cargo_2035_25599807\n426  cargo_2035_25917f03\n427  cargo_2035_25957dfe\n428  cargo_2035_26326509\n429  cargo_2035_26965a59\n430  cargo_2035_27347e06\n431  cargo_2035_273998db\n432  cargo_2035_276001b7\n433  cargo_2035_2942912e\n434  cargo_2035_246874e7\n435  cargo_2035_24807b07\n436  cargo_2035_249376a2\n437  cargo_2035_259584c6\n438  cargo_2035_26327ef0\n439  cargo_2035_26419868\n440  cargo_2035_26629aa8\n441  cargo_2035_26966e06\n442  cargo_2035_289054d3\n443  cargo_2035_294301b8\n444  cargo_2035_24689667\n445  cargo_2035_248081ba\n446  cargo_2035_2560106b\n447  cargo_2035_25918982\n448  cargo_2035_26330213\n449  cargo_2035_26967f6d\n450  cargo_2035_27349631\n451  cargo_2035_28800607\n452  cargo_2035_28965828\n453  cargo_2035_29431632\n454  cargo_2035_24691107\n455  cargo_2035_248116c2\n456  cargo_2035_269707d5\n457  cargo_2035_2716972e\n458  cargo_2035_27352863\n459  cargo_2035_2760926b\n460  cargo_2035_28802eb0\n461  cargo_2035_29434ae5\n462  cargo_2035_246922a6\n463  cargo_2035_24812d9c\n464  cargo_2035_26634a6f\n465  cargo_2035_26971eec\n466  cargo_2035_27611f27\n467  cargo_2035_287657e8\n468  cargo_2035_294355d6\n469  cargo_2035_29762660\n470  cargo_2035_2469383e\n471  cargo_2035_24813799\n472  cargo_2035_2504146c\n473  cargo_2035_256058f0\n474  cargo_2035_25964e70\n475  cargo_2035_263383dd\n476  cargo_2035_26972393\n477  cargo_2035_27170a6b\n478  cargo_2035_273540ab\n479  cargo_2035_27403a5a\n480  cargo_2035_27613ee5\n481  cargo_2035_28806f3a\n482  cargo_2035_3003289d\n483  cargo_2035_30994953\n484  cargo_2035_246940bd\n485  cargo_2035_2481434d\n486  cargo_2035_25495f9e\n487  cargo_2035_25712d9f\n488  cargo_2035_264313d5\n489  cargo_2035_266364a9\n490  cargo_2035_26973b06\n491  cargo_2035_27615b38\n492  cargo_2035_28912d75\n493  cargo_2035_294379c8\n494  cargo_2035_29764981\n495  cargo_2035_3044473d\n496  cargo_2035_3079657a\n497  cargo_2035_30995884\n498  cargo_2035_239889c5\n499  cargo_2035_24695513\n500  cargo_2035_24815f35\n501  cargo_2035_256083f1\n502  cargo_2035_26342824\n503  cargo_2035_263986f4\n504  cargo_2035_269748cb\n505  cargo_2035_273566d4\n506  cargo_2035_276173c7\n507  cargo_2035_29801dc4\n508  cargo_2035_30040ec7\n509  cargo_2035_30364fda\n510  cargo_2035_30971f08\n511  cargo_2035_2398914c\n512  cargo_2035_246967f6\n513  cargo_2035_248315d4\n514  cargo_2035_25498de0\n515  cargo_2035_26119fa8\n516  cargo_2035_26345ac1\n517  cargo_2035_26399fd2\n518  cargo_2035_269752c6\n519  cargo_2035_27620fc3\n520  cargo_2035_289142a8\n521  cargo_2035_294391a3\n522  cargo_2035_29923315\n523  cargo_2035_3041118d\n524  cargo_2035_30448837\n525  cargo_2035_30740390\n526  cargo_2035_30972007\n527  cargo_2035_23990788\n528  cargo_2035_24094ab9\n529  cargo_2035_24817c04\n530  cargo_2035_25610b0f\n531  cargo_2035_2634751b\n532  cargo_2035_26400b7a\n533  cargo_2035_27622a63\n534  cargo_2035_28782d37\n535  cargo_2035_29803316\n536  cargo_2035_23991fa7\n537  cargo_2035_24040d7f\n538  cargo_2035_248186f4\n539  cargo_2035_255008bc\n540  cargo_2035_2640150a\n541  cargo_2035_2762482e\n542  cargo_2035_28804ee4\n543  cargo_2035_30742a1d\n544  cargo_2035_23992af5\n545  cargo_2035_243742d4\n546  cargo_2035_24445936\n547  cargo_2035_24493cb3\n548  cargo_2035_2592854f\n549  cargo_2035_26351836\n550  cargo_2035_264559b6\n551  cargo_2035_26865b87\n552  cargo_2035_27174ca1\n553  cargo_2035_2755268e\n554  cargo_2035_27625b9e\n555  cargo_2035_27705adb\n556  cargo_2035_28811792\n557  cargo_2035_298050f6\n558  cargo_2035_30414724\n559  cargo_2035_30453ba9\n560  cargo_2035_30663318\n561  cargo_2035_30743a2d\n562  cargo_2035_23993070\n563  cargo_2035_24820b01\n564  cargo_2035_25502143\n565  cargo_2035_25971968\n566  cargo_2035_26009c37\n567  cargo_2035_2635368b\n568  cargo_2035_264866df\n569  cargo_2035_27175623\n570  cargo_2035_289457dc\n571  cargo_2035_2980600e\n572  cargo_2035_3074485b\n573  cargo_2035_309766bd\n574  cargo_2035_23994469\n575  cargo_2035_24043519\n576  cargo_2035_24822f21\n577  cargo_2035_25588818\n578  cargo_2035_256144ef\n579  cargo_2035_26010d78\n580  cargo_2035_264043da\n581  cargo_2035_2736081e\n582  cargo_2035_27631aa1\n583  cargo_2035_291780fc\n584  cargo_2035_29807a3e\n585  cargo_2035_3097757c\n586  cargo_2035_23995a34\n587  cargo_2035_24247763\n588  cargo_2035_2482365a\n589  cargo_2035_2550497c\n590  cargo_2035_259331b7\n591  cargo_2035_2601132e\n592  cargo_2035_261252bc\n593  cargo_2035_26358749\n594  cargo_2035_263597f4\n595  cargo_2035_26405693\n596  cargo_2035_27633ab1\n597  cargo_2035_28814d57\n598  cargo_2035_28946a12\n599  cargo_2035_291792d9\n600  cargo_2035_307463a5\n601  cargo_2035_30978765\n602  cargo_2035_31162023\n603  cargo_2035_24383a57\n604  cargo_2035_24449d57\n605  cargo_2035_257318ee\n606  cargo_2035_26874322\n607  cargo_2035_27533955\n608  cargo_2035_28815c3c\n609  cargo_2035_2918047b\n610  cargo_2035_30418451\n611  cargo_2035_30462072\n612  cargo_2035_307479d8\n613  cargo_2035_24036bf2\n614  cargo_2035_24384bd8\n615  cargo_2035_26875676\n616  cargo_2035_2741109c\n617  cargo_2035_277103ab\n618  cargo_2035_27760381\n619  cargo_2035_30463253\n620  cargo_2035_23969037\n621  cargo_2035_24047415\n622  cargo_2035_24321f11\n623  cargo_2035_24387006\n624  cargo_2035_24452374\n625  cargo_2035_24810539\n626  cargo_2035_25020029\n627  cargo_2035_25735fbc\n628  cargo_2035_26013ba3\n629  cargo_2035_26878467\n630  cargo_2035_277115c5\n631  cargo_2035_28783499\n632  cargo_2035_3042163c\n633  cargo_2035_304664aa\n634  cargo_2035_30501778\n635  cargo_2035_30654996\n636  cargo_2035_30750b67\n637  cargo_2035_2425272d\n638  cargo_2035_2432850c\n639  cargo_2035_243903ab\n640  cargo_2035_244583af\n641  cargo_2035_24501b24\n642  cargo_2035_24518b54\n643  cargo_2035_24821249\n644  cargo_2035_24842a80\n645  cargo_2035_25021798\n646  cargo_2035_25737d67\n647  cargo_2035_275354d7\n648  cargo_2035_277626be\n649  cargo_2035_28925628\n650  cargo_2035_304228a1\n651  cargo_2035_30469ad7\n652  cargo_2035_305022d4\n653  cargo_2035_30665466\n654  cargo_2035_24418bbc\n655  cargo_2035_24843c93\n656  cargo_2035_271584f3\n657  cargo_2035_31168128\n658  cargo_2035_27302f29\n659  cargo_2035_28360e7f\n660  cargo_2035_30150dcc\n661  cargo_2035_24052438\n662  cargo_2035_2425718e\n663  cargo_2035_2439912f\n664  cargo_2035_244210fb\n665  cargo_2035_2452397d\n666  cargo_2035_2482842c\n667  cargo_2035_24846146\n668  cargo_2035_24928c4e\n669  cargo_2035_26888e42\n670  cargo_2035_271645f8\n671  cargo_2035_27335c02\n672  cargo_2035_2771888e\n673  cargo_2035_27765672\n674  cargo_2035_28931fd5\n675  cargo_2035_28951e4f\n676  cargo_2035_30351c8f\n677  cargo_2035_30478819\n678  cargo_2035_29637568\n679  cargo_2035_296518ab\n680  cargo_2035_25389203\n681  cargo_2035_25400572\n682  cargo_2035_2541148f\n683  cargo_2035_25444ba2\n684  cargo_2035_2806869a\n685  cargo_2035_29244134\n686  cargo_2035_27909784\n687  cargo_2035_2807721c\n688  cargo_2035_289751c3\n689  cargo_2035_292088fa\n690  cargo_2035_2989901d\n691  cargo_2035_30061643\n692  cargo_2035_2990009d\n693  cargo_2035_27911e0c\n694  cargo_2035_28081952\n695  cargo_2035_289778ed\n696  cargo_2035_29210e39\n697  cargo_2035_30562081\n698  cargo_2035_2564139d\n699  cargo_2035_28086dc7\n700  cargo_2035_29903e40\n701  cargo_2035_2808741b\n702  cargo_2035_29459cb5\n703  cargo_2035_30068b22\n704  cargo_2035_28089e02\n705  cargo_2035_29460d75\n706  cargo_2035_24473ffc\n707  cargo_2035_25401a44\n708  cargo_2035_25667486\n709  cargo_2035_25694349\n710  cargo_2035_27132753\n711  cargo_2035_289829d5\n712  cargo_2035_2921553f\n713  cargo_2035_30071b2a\n714  cargo_2035_25645f96\n715  cargo_2035_2650583d\n716  cargo_2035_28093f5e\n717  cargo_2035_29303583\n718  cargo_2035_29462313\n719  cargo_2035_30072067\n720  cargo_2035_24476151\n721  cargo_2035_25542857\n722  cargo_2035_26189b18\n723  cargo_2035_2795207a\n724  cargo_2035_28096431\n725  cargo_2035_2875396f\n726  cargo_2035_29464ab1\n727  cargo_2035_255435e8\n728  cargo_2035_25647158\n729  cargo_2035_26508a82\n730  cargo_2035_27953b64\n731  cargo_2035_28098db9\n732  cargo_2035_29465881\n733  cargo_2035_3007598a\n734  cargo_2035_244780a7\n735  cargo_2035_2619160f\n736  cargo_2035_28100e56\n737  cargo_2035_287552e1\n738  cargo_2035_29466d64\n739  cargo_2035_25649fbc\n740  cargo_2035_26510706\n741  cargo_2035_268249cf\n742  cargo_2035_281023a1\n743  cargo_2035_2930873e\n744  cargo_2035_29467400\n745  cargo_2035_300796bf\n746  cargo_2035_24480aaf\n747  cargo_2035_255457b0\n748  cargo_2035_26193016\n749  cargo_2035_2795555c\n750  cargo_2035_28104711\n751  cargo_2035_28757f09\n752  cargo_2035_293098e0\n753  cargo_2035_2946841a\n754  cargo_2035_300801ff\n755  cargo_2035_28105b05\n756  cargo_2035_24024728\n757  cargo_2035_26828483\n758  cargo_2035_27438297\n759  cargo_2035_27738fec\n760  cargo_2035_2811013b\n761  cargo_2035_30084063\n762  cargo_2035_24029512\n763  cargo_2035_2541282d\n764  cargo_2035_26391468\n765  cargo_2035_27444cb0\n766  cargo_2035_27927fed\n767  cargo_2035_2899383d\n768  cargo_2035_29226285\n769  cargo_2035_29705c51\n770  cargo_2035_29915a6c\n771  cargo_2035_30086838\n772  cargo_2035_24030096\n773  cargo_2035_24147edc\n774  cargo_2035_25783f15\n775  cargo_2035_26580af5\n776  cargo_2035_26606e07\n777  cargo_2035_268307c6\n778  cargo_2035_27107ae5\n779  cargo_2035_277417b1\n780  cargo_2035_27928019\n781  cargo_2035_28116aa2\n782  cargo_2035_2899468e\n783  cargo_2035_29060883\n784  cargo_2035_29227ea7\n785  cargo_2035_293167b0\n786  cargo_2035_29783d47\n787  cargo_2035_299416ae\n788  cargo_2035_300899bf\n789  cargo_2035_24031644\n790  cargo_2035_24149f6f\n791  cargo_2035_25785665\n792  cargo_2035_26582d69\n793  cargo_2035_26608f53\n794  cargo_2035_27742fda\n795  cargo_2035_27931dc2\n796  cargo_2035_28121cd6\n797  cargo_2035_28630ac2\n798  cargo_2035_28997ace\n799  cargo_2035_29318abe\n800  cargo_2035_2994380c\n801  cargo_2035_29995c4e\n802  cargo_2035_3009245f\n803  cargo_2035_240329d3\n804  cargo_2035_27109bf2\n805  cargo_2035_27743b04\n806  cargo_2035_2812332d\n807  cargo_2035_24033f5a\n808  cargo_2035_242146f7\n809  cargo_2035_25418293\n810  cargo_2035_2636323f\n811  cargo_2035_27934a9a\n812  cargo_2035_290004b8\n813  cargo_2035_29233c12\n814  cargo_2035_29881f7b\n815  cargo_2035_29922a67\n816  cargo_2035_29946cbb\n817  cargo_2035_30095425\n818  cargo_2035_308061a1\n819  cargo_2035_2403401c\n820  cargo_2035_24123306\n821  cargo_2035_244669e8\n822  cargo_2035_25064c07\n823  cargo_2035_2568402a\n824  cargo_2035_25790463\n825  cargo_2035_2649833d\n826  cargo_2035_26554243\n827  cargo_2035_26587047\n828  cargo_2035_2711170e\n829  cargo_2035_27448e4a\n830  cargo_2035_2774568c\n831  cargo_2035_279352a3\n832  cargo_2035_281306c9\n833  cargo_2035_28634694\n834  cargo_2035_290012dd\n835  cargo_2035_29067509\n836  cargo_2035_29788e27\n837  cargo_2035_29974951\n838  cargo_2035_30200d30\n839  cargo_2035_30320c86\n840  cargo_2035_24035d6f\n841  cargo_2035_24125596\n842  cargo_2035_24468105\n843  cargo_2035_248601b0\n844  cargo_2035_25686e07\n845  cargo_2035_25792364\n846  cargo_2035_26208a0c\n847  cargo_2035_265002dd\n848  cargo_2035_26555d73\n849  cargo_2035_26836176\n850  cargo_2035_27112e17\n851  cargo_2035_279377dc\n852  cargo_2035_281340f0\n853  cargo_2035_28636034\n854  cargo_2035_29003f89\n855  cargo_2035_292364e2\n856  cargo_2035_29324860\n857  cargo_2035_29976f72\n858  cargo_2035_24014a5e\n859  cargo_2035_2555509b\n860  cargo_2035_25659a39\n861  cargo_2035_269353d3\n862  cargo_2035_27113ba5\n863  cargo_2035_27747557\n864  cargo_2035_2813617d\n865  cargo_2035_2901965e\n866  cargo_2035_30955bf1\n867  cargo_2035_240152cb\n868  cargo_2035_25425a03\n869  cargo_2035_25519c57\n870  cargo_2035_2636906f\n871  cargo_2035_2683931b\n872  cargo_2035_26902a05\n873  cargo_2035_2711442a\n874  cargo_2035_279418dc\n875  cargo_2035_2900782c\n876  cargo_2035_29240705\n877  cargo_2035_2995324c\n878  cargo_2035_3081383e\n879  cargo_2035_309569de\n880  cargo_2035_24016013\n881  cargo_2035_24472a84\n882  cargo_2035_24864757\n883  cargo_2035_256612ab\n884  cargo_2035_256903e9\n885  cargo_2035_2579665c\n886  cargo_2035_265933c2\n887  cargo_2035_26840eee\n888  cargo_2035_27115952\n889  cargo_2035_27429ba1\n890  cargo_2035_277493ad\n891  cargo_2035_27942002\n892  cargo_2035_2814310b\n893  cargo_2035_28641b5d\n894  cargo_2035_290087a6\n895  cargo_2035_29241599\n896  cargo_2035_29792224\n897  cargo_2035_29929cf4\n898  cargo_2035_30106d3b\n899  cargo_2035_30206ebe\n900  cargo_2035_30326dcd\n901  cargo_2035_30957898\n902  cargo_2035_240176e7\n903  cargo_2035_24867838\n904  cargo_2035_25046aad\n905  cargo_2035_255223f2\n906  cargo_2035_265952ed\n907  cargo_2035_269054a8\n908  cargo_2035_271160b5\n909  cargo_2035_2814737b\n910  cargo_2035_29023970\n911  cargo_2035_30208fbf\n912  cargo_2035_30329e0b\n913  cargo_2035_24018829\n914  cargo_2035_2814951a\n915  cargo_2035_290244b4\n916  cargo_2035_24019ac2\n917  cargo_2035_25431e0e\n918  cargo_2035_26376ca7\n919  cargo_2035_28777cc4\n920  cargo_2035_299602c9\n921  cargo_2035_308206c8\n922  cargo_2035_240203ce\n923  cargo_2035_248719c7\n924  cargo_2035_2656647d\n925  cargo_2035_26845c33\n926  cargo_2035_271190c5\n927  cargo_2035_274334c7\n928  cargo_2035_28156eb9\n929  cargo_2035_290282c6\n930  cargo_2035_299872aa\n931  cargo_2035_240219d6\n932  cargo_2035_24873007\n933  cargo_2035_25052112\n934  cargo_2035_265685fc\n935  cargo_2035_27946e6b\n936  cargo_2035_2816033b\n937  cargo_2035_29030dc5\n938  cargo_2035_29333a00\n939  cargo_2035_29489769\n940  cargo_2035_29989282\n941  cargo_2035_27635493\n942  cargo_2035_27775d9b\n943  cargo_2035_28959397\n944  cargo_2035_27426b30\n945  cargo_2035_2778097e\n946  cargo_2035_28864afb\n947  cargo_2035_28886e4d\n948  cargo_2035_28930f74\n949  cargo_2035_28942d3f\n950  cargo_2035_27653e3d\n951  cargo_2035_28865e79\n952  cargo_2035_243198c9\n953  cargo_2035_28866286\n954  cargo_2035_243226d5\n955  cargo_2035_2445184b\n956  cargo_2035_288681cf\n957  cargo_2035_30784bce\n958  cargo_2035_30015428\n959  cargo_2035_24324010\n960  cargo_2035_24454b6c\n961  cargo_2035_28870fa9\n962  cargo_2035_29194d75\n963  cargo_2035_307878c6\n964  cargo_2035_244558d2\n965  cargo_2035_27660d39\n966  cargo_2035_28871190\n967  cargo_2035_2919520e\n968  cargo_2035_3078821a\n969  cargo_2035_24045644\n970  cargo_2035_2445723e\n971  cargo_2035_27378ce1\n972  cargo_2035_27662a42\n973  cargo_2035_2776649b\n974  cargo_2035_29199348\n975  cargo_2035_27388697\n976  cargo_2035_276767bb\n977  cargo_2035_288894e0\n978  cargo_2035_24675cfc\n979  cargo_2035_263044a1\n980  cargo_2035_26954bff\n981  cargo_2035_27578e87\n982  cargo_2035_29342277\n983  cargo_2035_24682b36\n984  cargo_2035_25913ebf\n985  cargo_2035_25953808\n986  cargo_2035_2662470a\n987  cargo_2035_2696153e\n988  cargo_2035_27591683\n989  cargo_2035_29349db8\n990  cargo_2035_29425a9c\n991  cargo_2035_307778a2\n992  cargo_2035_24342cb7\n993  cargo_2035_2548698c\n994  cargo_2035_25955818\n995  cargo_2035_25996f5f\n996  cargo_2035_26319787\n997  cargo_2035_27396cbb\n998  cargo_2035_27689295\n999  cargo_2035_2890265e\n1000 cargo_2035_29189197\n1001 cargo_2035_29695f58\n1002 cargo_2035_30359570\n1003 cargo_2035_30517597\n1004 cargo_2035_24685fde\n1005 cargo_2035_24805fa9\n1006 cargo_2035_25487a3b\n1007 cargo_2035_263237e0\n1008 cargo_2035_26397dd6\n1009 cargo_2035_26627c2d\n1010 cargo_2035_26964613\n1011 cargo_2035_275987f2\n1012 cargo_2035_29428145\n1013 cargo_2035_297553f5\n1014 cargo_2035_23964f68\n1015 cargo_2035_24267775\n1016 cargo_2035_264733d1\n1017 cargo_2035_26628b75\n1018 cargo_2035_270749d7\n1019 cargo_2035_28448fa7\n1020 cargo_2035_30008349\n1021 cargo_2035_30354340\n1022 cargo_2035_24349008\n1023 cargo_2035_28954e64\n1024 cargo_2035_30479b43\n1025 cargo_2035_2469025b\n1026 cargo_2035_254916b4\n1027 cargo_2035_25960251\n1028 cargo_2035_26631e77\n1029 cargo_2035_26968747\n1030 cargo_2035_27606f3c\n1031 cargo_2035_28907762\n1032 cargo_2035_24360628\n1033 cargo_2035_25483240\n1034 cargo_2035_2560405b\n1035 cargo_2035_260051e1\n1036 cargo_2035_26337063\n1037 cargo_2035_26853536\n1038 cargo_2035_27353ffc\n1039 cargo_2035_27698b5c\n1040 cargo_2035_28968fec\n1041 cargo_2035_296997a9\n1042 cargo_2035_3003855b\n1043 cargo_2035_30441e69\n1044 cargo_2035_3052669a\n1045 cargo_2035_2436308a\n1046 cargo_2035_244396bc\n1047 cargo_2035_25484742\n1048 cargo_2035_260068b3\n1049 cargo_2035_26340fe4\n1050 cargo_2035_26856629\n1051 cargo_2035_2754979e\n1052 cargo_2035_27614127\n1053 cargo_2035_30443dd2\n1054 cargo_2035_30658c2d\n1055 cargo_2035_24369c26\n1056 cargo_2035_25453831\n1057 cargo_2035_2560959b\n1058 cargo_2035_2571661c\n1059 cargo_2035_259265b0\n1060 cargo_2035_25967599\n1061 cargo_2035_26346930\n1062 cargo_2035_2735706f\n1063 cargo_2035_27405cd8\n1064 cargo_2035_289153eb\n1065 cargo_2035_29173619\n1066 cargo_2035_29802431\n1067 cargo_2035_30041fbb\n1068 cargo_2035_3036555a\n1069 cargo_2035_30530a5a\n1070 cargo_2035_31157f2a\n1071 cargo_2035_2483278c\n1072 cargo_2035_26120d02\n1073 cargo_2035_26348c58\n1074 cargo_2035_27340edb\n1075 cargo_2035_28793346\n1076 cargo_2035_291745b0\n1077 cargo_2035_29440c93\n1078 cargo_2035_311580af\n1079 cargo_2035_240412f8\n1080 cargo_2035_25612ec3\n1081 cargo_2035_263525dc\n1082 cargo_2035_26402cf7\n1083 cargo_2035_27407386\n1084 cargo_2035_27626b7f\n1085 cargo_2035_3097581d\n1086 cargo_2035_2404289d\n1087 cargo_2035_2437731d\n1088 cargo_2035_24835f83\n1089 cargo_2035_25457d1c\n1090 cargo_2035_25613bab\n1091 cargo_2035_25725caa\n1092 cargo_2035_259307dd\n1093 cargo_2035_26123e49\n1094 cargo_2035_26355a7e\n1095 cargo_2035_26868eb7\n1096 cargo_2035_26969213\n1097 cargo_2035_27409caa\n1098 cargo_2035_27758c78\n1099 cargo_2035_288121e1\n1100 cargo_2035_2892096e\n1101 cargo_2035_29177668\n1102 cargo_2035_29443e33\n1103 cargo_2035_30456213\n1104 cargo_2035_311618c7\n1105 cargo_2035_24044e53\n1106 cargo_2035_24248ede\n1107 cargo_2035_243088f4\n1108 cargo_2035_24382a3b\n1109 cargo_2035_24515c89\n1110 cargo_2035_24837fb7\n1111 cargo_2035_25106ea3\n1112 cargo_2035_254593dc\n1113 cargo_2035_25615a5a\n1114 cargo_2035_25729955\n1115 cargo_2035_26213379\n1116 cargo_2035_268730c4\n1117 cargo_2035_26904473\n1118 cargo_2035_273610e1\n1119 cargo_2035_27410dbb\n1120 cargo_2035_27709e24\n1121 cargo_2035_27759234\n1122 cargo_2035_289220e4\n1123 cargo_2035_29446d47\n1124 cargo_2035_298082be\n1125 cargo_2035_30045f45\n1126 cargo_2035_30346df6\n1127 cargo_2035_30461db1\n1128 cargo_2035_240491d9\n1129 cargo_2035_26014193\n1130 cargo_2035_26360537\n1131 cargo_2035_2641074a\n1132 cargo_2035_28182442\n1133 cargo_2035_28784f9e\n1134 cargo_2035_291836b1\n1135 cargo_2035_293367aa\n1136 cargo_2035_30983d6f\n1137 cargo_2035_3116751f\n1138 cargo_2035_240505aa\n1139 cargo_2035_24329475\n1140 cargo_2035_2562161d\n1141 cargo_2035_259812ba\n1142 cargo_2035_26289c9c\n1143 cargo_2035_264112cb\n1144 cargo_2035_27332287\n1145 cargo_2035_2894900c\n1146 cargo_2035_293376a0\n1147 cargo_2035_30752552\n1148 cargo_2035_2405123d\n1149 cargo_2035_24107a93\n1150 cargo_2035_256236db\n1151 cargo_2035_264139d6\n1152 cargo_2035_271619b3\n1153 cargo_2035_2776497d\n1154 cargo_2035_28185e62\n1155 cargo_2035_28787286\n1156 cargo_2035_300031b2\n1157 cargo_2035_30986585\n1158 cargo_2035_3053771c\n1159 cargo_2035_3055766e\n1160 cargo_2035_30566b7f\n1161 cargo_2035_30586a0d\n1162 cargo_2035_305923dc\n1163 cargo_2035_30538eb4\n1164 cargo_2035_26674c75\n1165 cargo_2035_305390b2\n1166 cargo_2035_30540706\n1167 cargo_2035_2699108c\n1168 cargo_2035_305416be\n1169 cargo_2035_2699629a\n1170 cargo_2035_26998c89\n1171 cargo_2035_27001fd9\n1172 cargo_2035_270047f4\n1173 cargo_2035_27010339\n1174 cargo_2035_24078cf5\n1175 cargo_2035_27013019\n1176 cargo_2035_24086289\n1177 cargo_2035_270153a1\n1178 cargo_2035_279793a7\n1179 cargo_2035_30556020\n1180 cargo_2035_30558bb9\n1181 cargo_2035_27986589\n1182 cargo_2035_296012f2\n1183 cargo_2035_305596dd\n1184 cargo_2035_27990fb1\n1185 cargo_2035_28560cf3\n1186 cargo_2035_24059eec\n1187 cargo_2035_27992fd7\n1188 cargo_2035_30561eba\n1189 cargo_2035_30902c40\n1190 cargo_2035_26523187\n1191 cargo_2035_27994f4b\n1192 cargo_2035_27996833\n1193 cargo_2035_309063bf\n1194 cargo_2035_2702236e\n1195 cargo_2035_309095f5\n1196 cargo_2035_26708634\n1197 cargo_2035_28574c9e\n1198 cargo_2035_2961994f\n1199 cargo_2035_3091485d\n1200 cargo_2035_26664abb\n1201 cargo_2035_26712afd\n1202 cargo_2035_2800836a\n1203 cargo_2035_282185d4\n1204 cargo_2035_29623f7d\n1205 cargo_2035_309191b8\n1206 cargo_2035_270275e0\n1207 cargo_2035_309215fc\n1208 cargo_2035_26668451\n1209 cargo_2035_26717fe1\n1210 cargo_2035_28013c9c\n1211 cargo_2035_28223080\n1212 cargo_2035_28580f64\n1213 cargo_2035_2962829a\n1214 cargo_2035_30565f32\n1215 cargo_2035_23961648\n1216 cargo_2035_2508606f\n1217 cargo_2035_28179f0c\n1218 cargo_2035_28337739\n1219 cargo_2035_294052ec\n1220 cargo_2035_2986599e\n1221 cargo_2035_300120af\n1222 cargo_2035_3038348f\n1223 cargo_2035_2488299b\n1224 cargo_2035_260812ce\n1225 cargo_2035_2653076f\n1226 cargo_2035_267276bb\n1227 cargo_2035_30615a5f\n1228 cargo_2035_26092f5c\n1229 cargo_2035_267282bf\n1230 cargo_2035_28023e72\n1231 cargo_2035_28588628\n1232 cargo_2035_261157ef\n1233 cargo_2035_267318b6\n1234 cargo_2035_28590de6\n1235 cargo_2035_30618a20\n1236 cargo_2035_26116233\n1237 cargo_2035_266466d2\n1238 cargo_2035_26732f9a\n1239 cargo_2035_27209c03\n1240 cargo_2035_28026892\n1241 cargo_2035_28591d13\n1242 cargo_2035_305713ed\n1243 cargo_2035_2802936c\n1244 cargo_2035_30572f9e\n1245 cargo_2035_30941569\n1246 cargo_2035_24079d3d\n1247 cargo_2035_26052bd5\n1248 cargo_2035_26736d82\n1249 cargo_2035_272116eb\n1250 cargo_2035_28030c52\n1251 cargo_2035_28595b3f\n1252 cargo_2035_24705a40\n1253 cargo_2035_260557ec\n1254 cargo_2035_26740698\n1255 cargo_2035_28033d6d\n1256 cargo_2035_282632c3\n1257 cargo_2035_28598501\n1258 cargo_2035_306229ef\n1259 cargo_2035_260563cc\n1260 cargo_2035_266551be\n1261 cargo_2035_26741cfd\n1262 cargo_2035_272137ca\n1263 cargo_2035_28035141\n1264 cargo_2035_285998db\n1265 cargo_2035_24082aed\n1266 cargo_2035_24708cbd\n1267 cargo_2035_260600b3\n1268 cargo_2035_266599d5\n1269 cargo_2035_267444f1\n1270 cargo_2035_26758acb\n1271 cargo_2035_28189331\n1272 cargo_2035_2408320d\n1273 cargo_2035_24780f73\n1274 cargo_2035_2675916c\n1275 cargo_2035_28038a0d\n1276 cargo_2035_295946f5\n1277 cargo_2035_240849ef\n1278 cargo_2035_247100fa\n1279 cargo_2035_24781789\n1280 cargo_2035_265211f9\n1281 cargo_2035_2666283f\n1282 cargo_2035_27041e02\n1283 cargo_2035_28040bb2\n1284 cargo_2035_29595e82\n1285 cargo_2035_26063f93\n1286 cargo_2035_26760dc4\n1287 cargo_2035_26762015\n1288 cargo_2035_272162a0\n1289 cargo_2035_30676cd7\n1290 cargo_2035_311180e9\n1291 cargo_2035_24056bb2\n1292 cargo_2035_25867a30\n1293 cargo_2035_26064013\n1294 cargo_2035_2652287f\n1295 cargo_2035_27849bbb\n1296 cargo_2035_281911c1\n1297 cargo_2035_2406737e\n1298 cargo_2035_24711d72\n1299 cargo_2035_27042961\n1300 cargo_2035_27185855\n1301 cargo_2035_2408538f\n1302 cargo_2035_24713cb6\n1303 cargo_2035_26068bef\n1304 cargo_2035_265243d2\n1305 cargo_2035_27207bf9\n1306 cargo_2035_2819361f\n1307 cargo_2035_24087a28\n1308 cargo_2035_2587382d\n1309 cargo_2035_26072044\n1310 cargo_2035_26768e3c\n1311 cargo_2035_30579407\n1312 cargo_2035_30680c1a\n1313 cargo_2035_311221a0\n1314 cargo_2035_240887f6\n1315 cargo_2035_258758e9\n1316 cargo_2035_26770d2f\n1317 cargo_2035_270446ae\n1318 cargo_2035_24089e1f\n1319 cargo_2035_25877372\n1320 cargo_2035_26075fb3\n1321 cargo_2035_267711bb\n1322 cargo_2035_27871cb7\n1323 cargo_2035_2847991b\n1324 cargo_2035_306811dd\n1325 cargo_2035_31123808\n1326 cargo_2035_24090dbb\n1327 cargo_2035_26077710\n1328 cargo_2035_26528c75\n1329 cargo_2035_27976280\n1330 cargo_2035_28197cb0\n1331 cargo_2035_240579f7\n1332 cargo_2035_267472a9\n1333 cargo_2035_2704611b\n1334 cargo_2035_24058afe\n1335 cargo_2035_24722bbd\n1336 cargo_2035_25881862\n1337 cargo_2035_26080adb\n1338 cargo_2035_3058204f\n1339 cargo_2035_3068585e\n1340 cargo_2035_31127e0f\n1341 cargo_2035_2406078b\n1342 cargo_2035_247240bc\n1343 cargo_2035_2608403b\n1344 cargo_2035_27188adf\n1345 cargo_2035_2785059e\n1346 cargo_2035_2820173c\n1347 cargo_2035_306867b8\n1348 cargo_2035_31128225\n1349 cargo_2035_24061755\n1350 cargo_2035_24726882\n1351 cargo_2035_25885f8e\n1352 cargo_2035_26085c4b\n1353 cargo_2035_3058398b\n1354 cargo_2035_306879ac\n1355 cargo_2035_3112923f\n1356 cargo_2035_2406298f\n1357 cargo_2035_24727bec\n1358 cargo_2035_270515ec\n1359 cargo_2035_28552459\n1360 cargo_2035_2406345e\n1361 cargo_2035_25888bfc\n1362 cargo_2035_26685d6d\n1363 cargo_2035_27052574\n1364 cargo_2035_2719160a\n1365 cargo_2035_28553c7b\n1366 cargo_2035_296084b2\n1367 cargo_2035_240648fe\n1368 cargo_2035_2589008c\n1369 cargo_2035_25944814\n1370 cargo_2035_26753777\n1371 cargo_2035_29609375\n1372 cargo_2035_2406617c\n1373 cargo_2035_258928ec\n1374 cargo_2035_26094094\n1375 cargo_2035_27194e83\n1376 cargo_2035_28020d07\n1377 cargo_2035_30584e50\n1378 cargo_2035_30691be0\n1379 cargo_2035_31133103\n1380 cargo_2035_289624b9\n1381 cargo_2035_29363906\n1382 cargo_2035_293671b9\n1383 cargo_2035_26262559\n1384 cargo_2035_29368c12\n1385 cargo_2035_2626593e\n1386 cargo_2035_29371b64\n1387 cargo_2035_26266ac0\n1388 cargo_2035_2937220e\n1389 cargo_2035_29373648\n1390 cargo_2035_262690b4\n1391 cargo_2035_29375f86\n1392 cargo_2035_262732b4\n1393 cargo_2035_27910a64\n1394 cargo_2035_2937914c\n1395 cargo_2035_26274688\n1396 cargo_2035_29380f08\n1397 cargo_2035_25074103\n1398 cargo_2035_26276c26\n1399 cargo_2035_293820ba\n1400 cargo_2035_24110241\n1401 cargo_2035_25075d07\n1402 cargo_2035_262774da\n1403 cargo_2035_26460e62\n1404 cargo_2035_293839d1\n1405 cargo_2035_2411145a\n1406 cargo_2035_26278bd0\n1407 cargo_2035_29384348\n1408 cargo_2035_24112c1c\n1409 cargo_2035_26279bd5\n1410 cargo_2035_29385819\n1411 cargo_2035_241140b0\n1412 cargo_2035_250765f2\n1413 cargo_2035_26280694\n1414 cargo_2035_2820751f\n1415 cargo_2035_2938669e\n1416 cargo_2035_25568335\n1417 cargo_2035_30765a72\n1418 cargo_2035_30911c34\n1419 cargo_2035_26445c03\n1420 cargo_2035_264689cf\n1421 cargo_2035_270944f3\n1422 cargo_2035_29506247\n1423 cargo_2035_26447dfe\n1424 cargo_2035_26470f54\n1425 cargo_2035_27099281\n1426 cargo_2035_295087f4\n1427 cargo_2035_27298900\n1428 cargo_2035_309332c9\n1429 cargo_2035_23965a72\n1430 cargo_2035_2426886d\n1431 cargo_2035_26474214\n1432 cargo_2035_27166b4f\n1433 cargo_2035_27309e82\n1434 cargo_2035_27602f19\n1435 cargo_2035_28366ed2\n1436 cargo_2035_29848a88\n1437 cargo_2035_2494981d\n1438 cargo_2035_257822d4\n1439 cargo_2035_25959398\n1440 cargo_2035_27326d2f\n1441 cargo_2035_27604f33\n1442 cargo_2035_28846cd5\n1443 cargo_2035_30019793\n1444 cargo_2035_242701bc\n1445 cargo_2035_26476d14\n1446 cargo_2035_2732826c\n1447 cargo_2035_283736cd\n1448 cargo_2035_30030863\n1449 cargo_2035_2560364c\n1450 cargo_2035_26649c2d\n1451 cargo_2035_27267d5b\n1452 cargo_2035_25581498\n1453 cargo_2035_268324cc\n1454 cargo_2035_240932fa\n1455 cargo_2035_24275b2c\n1456 cargo_2035_26017d3a\n1457 cargo_2035_26255681\n1458 cargo_2035_26482a86\n1459 cargo_2035_272754f0\n1460 cargo_2035_27883c31\n1461 cargo_2035_28346f9e\n1462 cargo_2035_29495e62\n1463 cargo_2035_296566fb\n1464 cargo_2035_29828c84\n1465 cargo_2035_24098e61\n1466 cargo_2035_242819ae\n1467 cargo_2035_26260477\n1468 cargo_2035_26487d07\n1469 cargo_2035_272849ac\n1470 cargo_2035_278887e9\n1471 cargo_2035_29361fed\n1472 cargo_2035_2950014b\n1473 cargo_2035_29833b0f\n1474 cargo_2035_29998336\n1475 cargo_2035_241000fc\n1476 cargo_2035_24283ebe\n1477 cargo_2035_27289b4a\n1478 cargo_2035_27890a5f\n1479 cargo_2035_299993f8\n1480 cargo_2035_24101869\n1481 cargo_2035_2583471d\n1482 cargo_2035_26978bcf\n1483 cargo_2035_272459a5\n1484 cargo_2035_27291477\n1485 cargo_2035_278916d8\n1486 cargo_2035_28172868\n1487 cargo_2035_283542b0\n1488 cargo_2035_2983604c\n1489 cargo_2035_30000207\n1490 cargo_2035_30378594\n1491 cargo_2035_24103c21\n1492 cargo_2035_24285664\n1493 cargo_2035_2491656a\n1494 cargo_2035_27293c2c\n1495 cargo_2035_27893eee\n1496 cargo_2035_29666fa0\n1497 cargo_2035_241048fe\n1498 cargo_2035_24286830\n1499 cargo_2035_27295c68\n1500 cargo_2035_28357c15\n1501 cargo_2035_29326790\n1502 cargo_2035_29839f6b\n1503 cargo_2035_304009e7\n1504 cargo_2035_24105eab\n1505 cargo_2035_24288930\n1506 cargo_2035_272973af\n1507 cargo_2035_300022ec\n1508 cargo_2035_30148b7b\n1509 cargo_2035_30349477\n1510 cargo_2035_24106abd\n1511 cargo_2035_27300143\n1512 cargo_2035_28359b69\n1513 cargo_2035_298412e7\n1514 cargo_2035_3040535a\n1515 cargo_2035_30985367\n1516 cargo_2035_24108b6f\n1517 cargo_2035_262955e1\n1518 cargo_2035_273049b6\n1519 cargo_2035_28361344\n1520 cargo_2035_300043df\n1521 cargo_2035_29648bfd\n1522 cargo_2035_29652167\n1523 cargo_2035_28044392\n1524 cargo_2035_25422bfc\n1525 cargo_2035_25433c7f\n1526 cargo_2035_25448822\n1527 cargo_2035_25449647\n1528 cargo_2035_253910aa\n1529 cargo_2035_285579bf\n1530 cargo_2035_253931aa\n1531 cargo_2035_27018e28\n1532 cargo_2035_290410d2\n1533 cargo_2035_253951a4\n1534 cargo_2035_25662733\n1535 cargo_2035_2904349a\n1536 cargo_2035_299029f2\n1537 cargo_2035_25397c9e\n1538 cargo_2035_25664b65\n1539 cargo_2035_29045ad6\n1540 cargo_2035_25540ac0\n1541 cargo_2035_29904460\n1542 cargo_2035_253995c4\n1543 cargo_2035_25666f7e\n1544 cargo_2035_25692115\n1545 cargo_2035_30070e25\n1546 cargo_2035_3080809d\n1547 cargo_2035_3081966f\n1548 cargo_2035_25402112\n1549 cargo_2035_25695be6\n1550 cargo_2035_261876f9\n1551 cargo_2035_28751860\n1552 cargo_2035_30830a38\n1553 cargo_2035_286182c4\n1554 cargo_2035_29907088\n1555 cargo_2035_30834899\n1556 cargo_2035_27028ac4\n1557 cargo_2035_280121f4\n1558 cargo_2035_28579748\n1559 cargo_2035_30922a13\n1560 cargo_2035_277352c9\n1561 cargo_2035_27954309\n1562 cargo_2035_286208a5\n1563 cargo_2035_299100cc\n1564 cargo_2035_30078617\n1565 cargo_2035_30836a2e\n1566 cargo_2035_24479ac7\n1567 cargo_2035_25406576\n1568 cargo_2035_25673f2b\n1569 cargo_2035_2569954a\n1570 cargo_2035_26192c9a\n1571 cargo_2035_290543a2\n1572 cargo_2035_308379bb\n1573 cargo_2035_2862260e\n1574 cargo_2035_29912f7a\n1575 cargo_2035_3083806a\n1576 cargo_2035_28107862\n1577 cargo_2035_29310e28\n1578 cargo_2035_29469d40\n1579 cargo_2035_241214f4\n1580 cargo_2035_2655351d\n1581 cargo_2035_27427d95\n1582 cargo_2035_27737270\n1583 cargo_2035_27924f1f\n1584 cargo_2035_28108922\n1585 cargo_2035_2862328e\n1586 cargo_2035_29223e84\n1587 cargo_2035_2931168f\n1588 cargo_2035_29913cd4\n1589 cargo_2035_24132a6a\n1590 cargo_2035_25755207\n1591 cargo_2035_25780e0d\n1592 cargo_2035_26144acb\n1593 cargo_2035_2656444a\n1594 cargo_2035_28624b3e\n1595 cargo_2035_30799c1b\n1596 cargo_2035_24146b8e\n1597 cargo_2035_2554852c\n1598 cargo_2035_25757bf8\n1599 cargo_2035_261468e1\n1600 cargo_2035_265798bd\n1601 cargo_2035_27739bda\n1602 cargo_2035_27958d1d\n1603 cargo_2035_290591ad\n1604 cargo_2035_29940d1e\n1605 cargo_2035_30801530\n1606 cargo_2035_24150215\n1607 cargo_2035_25761ae7\n1608 cargo_2035_261508ff\n1609 cargo_2035_26583e8d\n1610 cargo_2035_26609199\n1611 cargo_2035_286318e0\n1612 cargo_2035_29064064\n1613 cargo_2035_29944e3b\n1614 cargo_2035_30093db6\n1615 cargo_2035_241511c0\n1616 cargo_2035_24856b68\n1617 cargo_2035_25787307\n1618 cargo_2035_268330c1\n1619 cargo_2035_274479d0\n1620 cargo_2035_28125352\n1621 cargo_2035_28632d51\n1622 cargo_2035_2906513e\n1623 cargo_2035_29232da3\n1624 cargo_2035_293207ce\n1625 cargo_2035_30318bbf\n1626 cargo_2035_24122981\n1627 cargo_2035_244652fe\n1628 cargo_2035_256835ef\n1629 cargo_2035_2578886a\n1630 cargo_2035_2615277c\n1631 cargo_2035_26586681\n1632 cargo_2035_2796370e\n1633 cargo_2035_29066efb\n1634 cargo_2035_30096130\n1635 cargo_2035_30199635\n1636 cargo_2035_241269e5\n1637 cargo_2035_24219a45\n1638 cargo_2035_254246f7\n1639 cargo_2035_25769b01\n1640 cargo_2035_2620946e\n1641 cargo_2035_26368138\n1642 cargo_2035_2714742a\n1643 cargo_2035_28773d79\n1644 cargo_2035_290705ee\n1645 cargo_2035_29717ac4\n1646 cargo_2035_29887b26\n1647 cargo_2035_29952c94\n1648 cargo_2035_30103c5f\n1649 cargo_2035_3081214c\n1650 cargo_2035_30845f90\n1651 cargo_2035_24127d30\n1652 cargo_2035_24471037\n1653 cargo_2035_25660438\n1654 cargo_2035_25689431\n1655 cargo_2035_25795c03\n1656 cargo_2035_26558fad\n1657 cargo_2035_26592bb8\n1658 cargo_2035_27967431\n1659 cargo_2035_28640eae\n1660 cargo_2035_301042d8\n1661 cargo_2035_302059fc\n1662 cargo_2035_241280ea\n1663 cargo_2035_2422106f\n1664 cargo_2035_254260cd\n1665 cargo_2035_25520e56\n1666 cargo_2035_25770ada\n1667 cargo_2035_26160f54\n1668 cargo_2035_262121b0\n1669 cargo_2035_26370ccd\n1670 cargo_2035_2907380b\n1671 cargo_2035_2932897a\n1672 cargo_2035_29954aa6\n1673 cargo_2035_299798d3\n1674 cargo_2035_308148ab\n1675 cargo_2035_3084708e\n1676 cargo_2035_2412976e\n1677 cargo_2035_24865054\n1678 cargo_2035_25632fa6\n1679 cargo_2035_26161da5\n1680 cargo_2035_26560bcc\n1681 cargo_2035_26594e92\n1682 cargo_2035_30207536\n1683 cargo_2035_24130899\n1684 cargo_2035_24223357\n1685 cargo_2035_254280fa\n1686 cargo_2035_25643a47\n1687 cargo_2035_26372d91\n1688 cargo_2035_287521e0\n1689 cargo_2035_29721474\n1690 cargo_2035_299560f8\n1691 cargo_2035_30816b49\n1692 cargo_2035_30849fbd\n1693 cargo_2035_24131cae\n1694 cargo_2035_25651899\n1695 cargo_2035_2616336b\n1696 cargo_2035_265626a5\n1697 cargo_2035_24133ef7\n1698 cargo_2035_242266ae\n1699 cargo_2035_25430b47\n1700 cargo_2035_25525a53\n1701 cargo_2035_25652355\n1702 cargo_2035_26165f6e\n1703 cargo_2035_2637575d\n1704 cargo_2035_26908615\n1705 cargo_2035_29723c08\n1706 cargo_2035_29959023\n1707 cargo_2035_30818a31\n1708 cargo_2035_308529c9\n1709 cargo_2035_241344ef\n1710 cargo_2035_24870e51\n1711 cargo_2035_25653f4a\n1712 cargo_2035_261663a9\n1713 cargo_2035_26565127\n1714 cargo_2035_302112d3\n1715 cargo_2035_24136513\n1716 cargo_2035_2423012c\n1717 cargo_2035_25435394\n1718 cargo_2035_25656b65\n1719 cargo_2035_25706ccd\n1720 cargo_2035_261691ea\n1721 cargo_2035_26379235\n1722 cargo_2035_28780089\n1723 cargo_2035_29728efd\n1724 cargo_2035_298954bc\n1725 cargo_2035_29963de3\n1726 cargo_2035_30823571\n1727 cargo_2035_30856a1d\n1728 cargo_2035_28647e31\n1729 cargo_2035_245433f5\n1730 cargo_2035_25123e60\n1731 cargo_2035_29079438\n1732 cargo_2035_30223407\n1733 cargo_2035_24554063\n1734 cargo_2035_25134cf2\n1735 cargo_2035_29090f0a\n1736 cargo_2035_30234fbb\n1737 cargo_2035_28680d4c\n1738 cargo_2035_2870276c\n1739 cargo_2035_28724ad3\n1740 cargo_2035_28648cbc\n1741 cargo_2035_28650f97\n1742 cargo_2035_25116f98\n1743 cargo_2035_28651ab4\n1744 cargo_2035_286520b7\n1745 cargo_2035_286536a4\n1746 cargo_2035_30189d21\n1747 cargo_2035_28654b58\n1748 cargo_2035_27462513\n1749 cargo_2035_28655add\n1750 cargo_2035_288524c7\n1751 cargo_2035_29517afb\n1752 cargo_2035_295287df\n1753 cargo_2035_27473b2d\n1754 cargo_2035_2953917e\n1755 cargo_2035_295502ba\n1756 cargo_2035_2512671e\n1757 cargo_2035_29092d76\n1758 cargo_2035_29647b76\n1759 cargo_2035_2454600f\n1760 cargo_2035_27506c1b\n1761 cargo_2035_2866037f\n1762 cargo_2035_28859587\n1763 cargo_2035_302360cd\n1764 cargo_2035_2957261e\n1765 cargo_2035_27517c06\n1766 cargo_2035_24548c4d\n1767 cargo_2035_27528153\n1768 cargo_2035_28662db7\n1769 cargo_2035_2886138a\n1770 cargo_2035_30238ddd\n1771 cargo_2035_29583bc4\n1772 cargo_2035_2959173c\n1773 cargo_2035_27529881\n1774 cargo_2035_27452dad\n1775 cargo_2035_286643b0\n1776 cargo_2035_28863a72\n1777 cargo_2035_302406cd\n1778 cargo_2035_2455085d\n1779 cargo_2035_29592319\n1780 cargo_2035_2951802a\n1781 cargo_2035_274530c1\n1782 cargo_2035_27454b61\n1783 cargo_2035_28666f31\n1784 cargo_2035_28854837\n1785 cargo_2035_30242a00\n1786 cargo_2035_295193b5\n1787 cargo_2035_29520008\n1788 cargo_2035_2745588c\n1789 cargo_2035_27456e7c\n1790 cargo_2035_286686a3\n1791 cargo_2035_302446f7\n1792 cargo_2035_24170a8e\n1793 cargo_2035_24555461\n1794 cargo_2035_2910052f\n1795 cargo_2035_29521a22\n1796 cargo_2035_2417132a\n1797 cargo_2035_251363f8\n1798 cargo_2035_29522007\n1799 cargo_2035_241723f6\n1800 cargo_2035_2745721b\n1801 cargo_2035_24173837\n1802 cargo_2035_27458ed6\n1803 cargo_2035_28291134\n1804 cargo_2035_2867161c\n1805 cargo_2035_302473e1\n1806 cargo_2035_24175b01\n1807 cargo_2035_245573bc\n1808 cargo_2035_2417651e\n1809 cargo_2035_28292e0d\n1810 cargo_2035_24177b78\n1811 cargo_2035_27459289\n1812 cargo_2035_2952454b\n1813 cargo_2035_25301943\n1814 cargo_2035_28378cd4\n1815 cargo_2035_30996f0d\n1816 cargo_2035_25345a4d\n1817 cargo_2035_245637e4\n1818 cargo_2035_25144a7f\n1819 cargo_2035_25378b17\n1820 cargo_2035_2841160a\n1821 cargo_2035_28522ee6\n1822 cargo_2035_30554f50\n1823 cargo_2035_2668430f\n1824 cargo_2035_279782b2\n1825 cargo_2035_279807eb\n1826 cargo_2035_25151592\n1827 cargo_2035_2530371e\n1828 cargo_2035_283791dd\n1829 cargo_2035_28490882\n1830 cargo_2035_31028978\n1831 cargo_2035_25007c94\n1832 cargo_2035_252101d8\n1833 cargo_2035_25306a04\n1834 cargo_2035_274740f1\n1835 cargo_2035_2779177f\n1836 cargo_2035_28686ce7\n1837 cargo_2035_302621cf\n1838 cargo_2035_249530bf\n1839 cargo_2035_2521292f\n1840 cargo_2035_253101ac\n1841 cargo_2035_27476713\n1842 cargo_2035_28688c13\n1843 cargo_2035_30264231\n1844 cargo_2035_310354b0\n1845 cargo_2035_279937eb\n1846 cargo_2035_28563c2e\n1847 cargo_2035_2495734c\n1848 cargo_2035_25216707\n1849 cargo_2035_25319e85\n1850 cargo_2035_27480e07\n1851 cargo_2035_27797f51\n1852 cargo_2035_2869300d\n1853 cargo_2035_30269e2b\n1854 cargo_2035_249599d9\n1855 cargo_2035_252198b4\n1856 cargo_2035_25324213\n1857 cargo_2035_2748239a\n1858 cargo_2035_27800528\n1859 cargo_2035_2869555f\n1860 cargo_2035_3027143c\n1861 cargo_2035_25326fb5\n1862 cargo_2035_24638362\n1863 cargo_2035_25164694\n1864 cargo_2035_25329b7e\n1865 cargo_2035_28392774\n1866 cargo_2035_285031e4\n1867 cargo_2035_2912885d\n1868 cargo_2035_30920826\n1869 cargo_2035_31054481\n1870 cargo_2035_249644e4\n1871 cargo_2035_25223ff1\n1872 cargo_2035_253322d9\n1873 cargo_2035_274877d1\n1874 cargo_2035_27804dc7\n1875 cargo_2035_28699a97\n1876 cargo_2035_301324be\n1877 cargo_2035_30275487\n1878 cargo_2035_30923b59\n1879 cargo_2035_24769930\n1880 cargo_2035_267212e8\n1881 cargo_2035_29631c1f\n1882 cargo_2035_30927391\n1883 cargo_2035_25339394\n1884 cargo_2035_2464435d\n1885 cargo_2035_25171d8f\n1886 cargo_2035_25342c84\n1887 cargo_2035_28509ad8\n1888 cargo_2035_29135a5e\n1889 cargo_2035_29555cd8\n1890 cargo_2035_31067f54\n1891 cargo_2035_250908ba\n1892 cargo_2035_26328b54\n1893 cargo_2035_27085cdf\n1894 cargo_2035_27320b3a\n1895 cargo_2035_28459c0f\n1896 cargo_2035_303874a2\n1897 cargo_2035_249729d4\n1898 cargo_2035_2523252d\n1899 cargo_2035_25350145\n1900 cargo_2035_268049c1\n1901 cargo_2035_27496aac\n1902 cargo_2035_27813f49\n1903 cargo_2035_28708662\n1904 cargo_2035_30284b81\n1905 cargo_2035_2535247e\n1906 cargo_2035_292508f9\n1907 cargo_2035_246513cf\n1908 cargo_2035_251779bf\n1909 cargo_2035_25355a9b\n1910 cargo_2035_26251331\n1911 cargo_2035_2851637d\n1912 cargo_2035_29141b4f\n1913 cargo_2035_2956047c\n1914 cargo_2035_31080c9e\n1915 cargo_2035_24168c56\n1916 cargo_2035_24779f94\n1917 cargo_2035_24977d42\n1918 cargo_2035_25236525\n1919 cargo_2035_2535901c\n1920 cargo_2035_27500a7f\n1921 cargo_2035_27817e33\n1922 cargo_2035_28712877\n1923 cargo_2035_292552a0\n1924 cargo_2035_302882a4\n1925 cargo_2035_241693b6\n1926 cargo_2035_249790c7\n1927 cargo_2035_25181926\n1928 cargo_2035_252386b5\n1929 cargo_2035_25363a5a\n1930 cargo_2035_275028bb\n1931 cargo_2035_278194c4\n1932 cargo_2035_282651ed\n1933 cargo_2035_28715ac1\n1934 cargo_2035_30170a9f\n1935 cargo_2035_30291b57\n1936 cargo_2035_2415252a\n1937 cargo_2035_24751d63\n1938 cargo_2035_25364f7d\n1939 cargo_2035_262224d9\n1940 cargo_2035_285206ca\n1941 cargo_2035_291463fe\n1942 cargo_2035_29565069\n1943 cargo_2035_3108971c\n1944 cargo_2035_26933205\n1945 cargo_2035_281324f7\n1946 cargo_2035_29017850\n1947 cargo_2035_29789bcc\n1948 cargo_2035_30100a8f\n1949 cargo_2035_241637d4\n1950 cargo_2035_24602cbb\n1951 cargo_2035_24762824\n1952 cargo_2035_25183d41\n1953 cargo_2035_25366c72\n1954 cargo_2035_26223dfd\n1955 cargo_2035_285216a3\n1956 cargo_2035_29147803\n1957 cargo_2035_292625a7\n1958 cargo_2035_30907673\n1959 cargo_2035_31091ed9\n1960 cargo_2035_241740cd\n1961 cargo_2035_24773431\n1962 cargo_2035_24982ae9\n1963 cargo_2035_2871850f\n1964 cargo_2035_301731e6\n1965 cargo_2035_302940c8\n1966 cargo_2035_30713d84\n1967 cargo_2035_24179925\n1968 cargo_2035_24604736\n1969 cargo_2035_24782db3\n1970 cargo_2035_2518553e\n1971 cargo_2035_25371c1d\n1972 cargo_2035_26225563\n1973 cargo_2035_2852422a\n1974 cargo_2035_2914965f\n1975 cargo_2035_3071496d\n1976 cargo_2035_30929e8b\n1977 cargo_2035_310961da\n1978 cargo_2035_2555662d\n1979 cargo_2035_26211787\n1980 cargo_2035_2814013f\n1981 cargo_2035_2877517e\n1982 cargo_2035_2948675d\n1983 cargo_2035_3084607d\n1984 cargo_2035_24180e71\n1985 cargo_2035_24783c85\n1986 cargo_2035_24985491\n1987 cargo_2035_251865aa\n1988 cargo_2035_28720cb7\n1989 cargo_2035_301750ad\n1990 cargo_2035_30296869\n1991 cargo_2035_241810e3\n1992 cargo_2035_24606dc8\n1993 cargo_2035_25187836\n1994 cargo_2035_253754b2\n1995 cargo_2035_26227d1e\n1996 cargo_2035_282714e0\n1997 cargo_2035_28526fa6\n1998 cargo_2035_29151cf4\n1999 cargo_2035_30717901\n2000 cargo_2035_30951e9c\n2001 cargo_2035_31100fa8\n2002 cargo_2035_25521a67\n2003 cargo_2035_25557237\n2004 cargo_2035_265049c2\n2005 cargo_2035_27968e56\n2006 cargo_2035_28144e02\n2007 cargo_2035_29022113\n2008 cargo_2035_2998072a\n2009 cargo_2035_30848126\n2010 cargo_2035_24182ef5\n2011 cargo_2035_24987678\n2012 cargo_2035_2872244d\n2013 cargo_2035_301772a2\n2014 cargo_2035_30298048\n2015 cargo_2035_24183f03\n2016 cargo_2035_246086ea\n2017 cargo_2035_24785547\n2018 cargo_2035_251901b5\n2019 cargo_2035_253803a8\n2020 cargo_2035_26229d1c\n2021 cargo_2035_28275be0\n2022 cargo_2035_28528bcc\n2023 cargo_2035_291533e7\n2024 cargo_2035_30953045\n2025 cargo_2035_311053bb\n2026 cargo_2035_241844a4\n2027 cargo_2035_24786714\n2028 cargo_2035_24989440\n2029 cargo_2035_28725e9f\n2030 cargo_2035_30180de9\n2031 cargo_2035_30301071\n2032 cargo_2035_3072258f\n2033 cargo_2035_24153944\n2034 cargo_2035_246118a8\n2035 cargo_2035_25192f73\n2036 cargo_2035_2538457f\n2037 cargo_2035_26232d94\n2038 cargo_2035_2828097c\n2039 cargo_2035_285305c1\n2040 cargo_2035_29155b85\n2041 cargo_2035_3059672e\n2042 cargo_2035_30887f7e\n2043 cargo_2035_26214004\n2044 cargo_2035_2659848c\n2045 cargo_2035_269096bb\n2046 cargo_2035_27969133\n2047 cargo_2035_28153443\n2048 cargo_2035_2864256f\n2049 cargo_2035_24155978\n2050 cargo_2035_24613ae8\n2051 cargo_2035_24629e1c\n2052 cargo_2035_25388926\n2053 cargo_2035_26234a55\n2054 cargo_2035_2828446e\n2055 cargo_2035_2853242d\n2056 cargo_2035_29158708\n2057 cargo_2035_30598d85\n2058 cargo_2035_30889c75\n2059 cargo_2035_25528802\n2060 cargo_2035_262165d9\n2061 cargo_2035_26911f09\n2062 cargo_2035_28157fe2\n2063 cargo_2035_28644c31\n2064 cargo_2035_30855af5\n2065 cargo_2035_241565dd\n2066 cargo_2035_24630ccf\n2067 cargo_2035_24754e3d\n2068 cargo_2035_28729306\n2069 cargo_2035_2915970f\n2070 cargo_2035_30184f37\n2071 cargo_2035_303051d4\n2072 cargo_2035_30599d46\n2073 cargo_2035_3072860a\n2074 cargo_2035_2660128e\n2075 cargo_2035_2712040b\n2076 cargo_2035_27434b24\n2077 cargo_2035_27945cb3\n2078 cargo_2035_2815837b\n2079 cargo_2035_29029ab3\n2080 cargo_2035_29332682\n2081 cargo_2035_24157265\n2082 cargo_2035_246159a6\n2083 cargo_2035_24631851\n2084 cargo_2035_25196584\n2085 cargo_2035_25273954\n2086 cargo_2035_26236a59\n2087 cargo_2035_28288e49\n2088 cargo_2035_28421130\n2089 cargo_2035_285358b0\n2090 cargo_2035_30600c5c\n2091 cargo_2035_308916cf\n2092 cargo_2035_309981eb\n2093 cargo_2035_24205ad5\n2094 cargo_2035_26035cbf\n2095 cargo_2035_311367b9\n2096 cargo_2035_26038f0e\n2097 cargo_2035_3002057d\n2098 cargo_2035_30024917\n2099 cargo_2035_3002807b\n2100 cargo_2035_30877215\n2101 cargo_2035_26459649\n2102 cargo_2035_26461c00\n2103 cargo_2035_293881ea\n2104 cargo_2035_30604d4d\n2105 cargo_2035_2507818c\n2106 cargo_2035_2939020b\n2107 cargo_2035_3015300c\n2108 cargo_2035_2644186c\n2109 cargo_2035_29393e69\n2110 cargo_2035_2431298a\n2111 cargo_2035_25080e52\n2112 cargo_2035_29395e50\n2113 cargo_2035_2985567c\n2114 cargo_2035_3015569e\n2115 cargo_2035_303772d3\n2116 cargo_2035_26444022\n2117 cargo_2035_27091de7\n2118 cargo_2035_283297a8\n2119 cargo_2035_29397d1c\n2120 cargo_2035_2985743f\n2121 cargo_2035_26446716\n2122 cargo_2035_27095461\n2123 cargo_2035_2833446c\n2124 cargo_2035_29401bff\n2125 cargo_2035_2986287d\n2126 cargo_2035_3015895b\n2127 cargo_2035_24212926\n2128 cargo_2035_264485e7\n2129 cargo_2035_271002fa\n2130 cargo_2035_2833806b\n2131 cargo_2035_294064a6\n2132 cargo_2035_29866f8c\n2133 cargo_2035_30160fdd\n2134 cargo_2035_30780f4e\n2135 cargo_2035_2418652e\n2136 cargo_2035_24893301\n2137 cargo_2035_250876ae\n2138 cargo_2035_25450484\n2139 cargo_2035_28300de1\n2140 cargo_2035_28817762\n2141 cargo_2035_30384456\n2142 cargo_2035_24187721\n2143 cargo_2035_249151e5\n2144 cargo_2035_25575445\n2145 cargo_2035_270633eb\n2146 cargo_2035_27287ca2\n2147 cargo_2035_28311194\n2148 cargo_2035_28355240\n2149 cargo_2035_2882831f\n2150 cargo_2035_29837958\n2151 cargo_2035_2418866f\n2152 cargo_2035_24736c95\n2153 cargo_2035_250895c5\n2154 cargo_2035_25577e26\n2155 cargo_2035_28322c0e\n2156 cargo_2035_28839efb\n2157 cargo_2035_29757f75\n2158 cargo_2035_30386cd5\n2159 cargo_2035_30490926\n2160 cargo_2035_24189cae\n2161 cargo_2035_24948a7e\n2162 cargo_2035_28333e64\n2163 cargo_2035_28372f26\n2164 cargo_2035_298597fb\n2165 cargo_2035_24190e85\n2166 cargo_2035_2488330c\n2167 cargo_2035_25091711\n2168 cargo_2035_254808c1\n2169 cargo_2035_2591945e\n2170 cargo_2035_27605520\n2171 cargo_2035_2833924e\n2172 cargo_2035_28847e4a\n2173 cargo_2035_2986763f\n2174 cargo_2035_303885d1\n2175 cargo_2035_24191f4b\n2176 cargo_2035_24357c60\n2177 cargo_2035_250390fb\n2178 cargo_2035_25492057\n2179 cargo_2035_25920420\n2180 cargo_2035_26850d7c\n2181 cargo_2035_27547614\n2182 cargo_2035_276073f3\n2183 cargo_2035_28374b01\n2184 cargo_2035_29761789\n2185 cargo_2035_30438bc3\n2186 cargo_2035_3065574b\n2187 cargo_2035_241927a4\n2188 cargo_2035_24777367\n2189 cargo_2035_24887f7a\n2190 cargo_2035_25040146\n2191 cargo_2035_25094cb0\n2192 cargo_2035_25580746\n2193 cargo_2035_259227b1\n2194 cargo_2035_26004836\n2195 cargo_2035_28341adc\n2196 cargo_2035_288491dd\n2197 cargo_2035_30391c82\n2198 cargo_2035_2419446e\n2199 cargo_2035_24891edd\n2200 cargo_2035_2509676b\n2201 cargo_2035_25813d36\n2202 cargo_2035_28343c5d\n2203 cargo_2035_28851cd5\n2204 cargo_2035_30393df9\n2205 cargo_2035_24195202\n2206 cargo_2035_24489cfc\n2207 cargo_2035_248940fe\n2208 cargo_2035_258162f6\n2209 cargo_2035_26016dce\n2210 cargo_2035_28301f49\n2211 cargo_2035_28345590\n2212 cargo_2035_28818673\n2213 cargo_2035_296552f6\n2214 cargo_2035_298271b4\n2215 cargo_2035_241976c3\n2216 cargo_2035_24490319\n2217 cargo_2035_24896735\n2218 cargo_2035_25452681\n2219 cargo_2035_258182ea\n2220 cargo_2035_268619aa\n2221 cargo_2035_27251744\n2222 cargo_2035_28302a76\n2223 cargo_2035_28810ebb\n2224 cargo_2035_30395196\n2225 cargo_2035_308675c3\n2226 cargo_2035_241980ef\n2227 cargo_2035_244912ef\n2228 cargo_2035_2489871c\n2229 cargo_2035_25717a6d\n2230 cargo_2035_258200b2\n2231 cargo_2035_28303939\n2232 cargo_2035_283479c0\n2233 cargo_2035_28820904\n2234 cargo_2035_29829ab7\n2235 cargo_2035_24199833\n2236 cargo_2035_24492b79\n2237 cargo_2035_24900db8\n2238 cargo_2035_25100a96\n2239 cargo_2035_25454111\n2240 cargo_2035_25822a90\n2241 cargo_2035_2601943f\n2242 cargo_2035_2725356a\n2243 cargo_2035_2830458c\n2244 cargo_2035_28821e25\n2245 cargo_2035_30397fc7\n2246 cargo_2035_306628ab\n2247 cargo_2035_30869e77\n2248 cargo_2035_242006b2\n2249 cargo_2035_249026dc\n2250 cargo_2035_25722f31\n2251 cargo_2035_25824351\n2252 cargo_2035_260205b4\n2253 cargo_2035_27280625\n2254 cargo_2035_2830577a\n2255 cargo_2035_28349ab4\n2256 cargo_2035_28822575\n2257 cargo_2035_29831d3f\n2258 cargo_2035_242017e9\n2259 cargo_2035_24494587\n2260 cargo_2035_249054b0\n2261 cargo_2035_25102d34\n2262 cargo_2035_25586f4e\n2263 cargo_2035_2582761d\n2264 cargo_2035_264334c0\n2265 cargo_2035_27255be6\n2266 cargo_2035_28306069\n2267 cargo_2035_28823ab2\n2268 cargo_2035_303991bf\n2269 cargo_2035_3087102f\n2270 cargo_2035_24202ea3\n2271 cargo_2035_24246b56\n2272 cargo_2035_24495f43\n2273 cargo_2035_24907fba\n2274 cargo_2035_25829324\n2275 cargo_2035_28307b2f\n2276 cargo_2035_28351841\n2277 cargo_2035_28824db0\n2278 cargo_2035_24203172\n2279 cargo_2035_2449627a\n2280 cargo_2035_24909e7e\n2281 cargo_2035_25105ed0\n2282 cargo_2035_25931767\n2283 cargo_2035_272589e6\n2284 cargo_2035_28308a6a\n2285 cargo_2035_28825efc\n2286 cargo_2035_29834845\n2287 cargo_2035_3040263b\n2288 cargo_2035_308735fc\n2289 cargo_2035_27072f8c\n2290 cargo_2035_27290dcd\n2291 cargo_2035_284464f9\n2292 cargo_2035_30367d19\n2293 cargo_2035_270753d0\n2294 cargo_2035_272946d9\n2295 cargo_2035_2844962e\n2296 cargo_2035_30389d17\n2297 cargo_2035_24919c54\n2298 cargo_2035_25464169\n2299 cargo_2035_25839afd\n2300 cargo_2035_260293df\n2301 cargo_2035_27076a95\n2302 cargo_2035_2726272f\n2303 cargo_2035_27296778\n2304 cargo_2035_278946b7\n2305 cargo_2035_28450672\n2306 cargo_2035_25447a3b\n2307 cargo_2035_25390349\n2308 cargo_2035_25392443\n2309 cargo_2035_289740cc\n2310 cargo_2035_29040244\n2311 cargo_2035_292071fb\n2312 cargo_2035_30059ce0\n2313 cargo_2035_25394dd8\n2314 cargo_2035_28976077\n2315 cargo_2035_290426fc\n2316 cargo_2035_2920970d\n2317 cargo_2035_253962d4\n2318 cargo_2035_2566354d\n2319 cargo_2035_27156d7f\n2320 cargo_2035_27912d20\n2321 cargo_2035_28978035\n2322 cargo_2035_29044784\n2323 cargo_2035_29211799\n2324 cargo_2035_25398c54\n2325 cargo_2035_2569195a\n2326 cargo_2035_26819aec\n2327 cargo_2035_27914c15\n2328 cargo_2035_28980f52\n2329 cargo_2035_290463d9\n2330 cargo_2035_292130a4\n2331 cargo_2035_307973ab\n2332 cargo_2035_25646c6a\n2333 cargo_2035_256688f1\n2334 cargo_2035_26507219\n2335 cargo_2035_2773395b\n2336 cargo_2035_27917ddf\n2337 cargo_2035_28094373\n2338 cargo_2035_28616ab5\n2339 cargo_2035_28983493\n2340 cargo_2035_29216b09\n2341 cargo_2035_29305e15\n2342 cargo_2035_297778e2\n2343 cargo_2035_30073953\n2344 cargo_2035_254080de\n2345 cargo_2035_2575401e\n2346 cargo_2035_26362a1a\n2347 cargo_2035_2689565f\n2348 cargo_2035_28758400\n2349 cargo_2035_29056147\n2350 cargo_2035_29937dea\n2351 cargo_2035_300826bd\n2352 cargo_2035_307988bf\n2353 cargo_2035_25409c6b\n2354 cargo_2035_261957d0\n2355 cargo_2035_26373463\n2356 cargo_2035_27137373\n2357 cargo_2035_27925e32\n2358 cargo_2035_29057c56\n2359 cargo_2035_292241dd\n2360 cargo_2035_297032af\n2361 cargo_2035_298739bf\n2362 cargo_2035_2993838b\n2363 cargo_2035_25413456\n2364 cargo_2035_25758843\n2365 cargo_2035_26147a52\n2366 cargo_2035_26392bf9\n2367 cargo_2035_269250fd\n2368 cargo_2035_28762f2f\n2369 cargo_2035_29876c6c\n2370 cargo_2035_29916df1\n2371 cargo_2035_308023fd\n2372 cargo_2035_254145f6\n2373 cargo_2035_25550e4c\n2374 cargo_2035_26393f36\n2375 cargo_2035_271414fb\n2376 cargo_2035_28996660\n2377 cargo_2035_29229f82\n2378 cargo_2035_29877749\n2379 cargo_2035_29917f7e\n2380 cargo_2035_30090425\n2381 cargo_2035_25043736\n2382 cargo_2035_25417114\n2383 cargo_2035_25537446\n2384 cargo_2035_2576224d\n2385 cargo_2035_26151475\n2386 cargo_2035_263969de\n2387 cargo_2035_26929e8d\n2388 cargo_2035_28767f72\n2389 cargo_2035_29319bbd\n2390 cargo_2035_29710daf\n2391 cargo_2035_299454c0\n2392 cargo_2035_30805cfd\n2393 cargo_2035_242156fa\n2394 cargo_2035_25419db3\n2395 cargo_2035_25514ecd\n2396 cargo_2035_25765830\n2397 cargo_2035_261540db\n2398 cargo_2035_263644bc\n2399 cargo_2035_26897c00\n2400 cargo_2035_287696c2\n2401 cargo_2035_29712696\n2402 cargo_2035_29882219\n2403 cargo_2035_30097e83\n2404 cargo_2035_308071a3\n2405 cargo_2035_30841778\n2406 cargo_2035_24216888\n2407 cargo_2035_25420363\n2408 cargo_2035_26365bf8\n2409 cargo_2035_2683518b\n2410 cargo_2035_27145019\n2411 cargo_2035_29002d6d\n2412 cargo_2035_29016834\n2413 cargo_2035_2923548d\n2414 cargo_2035_2988461b\n2415 cargo_2035_30809b31\n2416 cargo_2035_24217795\n2417 cargo_2035_25421e17\n2418 cargo_2035_25516d73\n2419 cargo_2035_257670e0\n2420 cargo_2035_26156c45\n2421 cargo_2035_262071c0\n2422 cargo_2035_26366864\n2423 cargo_2035_287715ee\n2424 cargo_2035_29068909\n2425 cargo_2035_29885501\n2426 cargo_2035_29950719\n2427 cargo_2035_30101206\n2428 cargo_2035_308105ef\n2429 cargo_2035_30843d4f\n2430 cargo_2035_24218339\n2431 cargo_2035_25423857\n2432 cargo_2035_26367739\n2433 cargo_2035_2714637e\n2434 cargo_2035_274509d0\n2435 cargo_2035_27938d37\n2436 cargo_2035_290046e2\n2437 cargo_2035_29018e44\n2438 cargo_2035_292371a9\n2439 cargo_2035_295983d1\n2440 cargo_2035_29716bb8\n2441 cargo_2035_2979023a\n2442 cargo_2035_29886428\n2443 cargo_2035_299267e2\n2444 cargo_2035_2995196e\n2445 cargo_2035_30102afd\n2446 cargo_2035_30811cd2\n2447 cargo_2035_24222070\n2448 cargo_2035_254275a1\n2449 cargo_2035_261774e1\n2450 cargo_2035_28606e04\n2451 cargo_2035_29720a0b\n2452 cargo_2035_29955ea9\n2453 cargo_2035_30815fa3\n2454 cargo_2035_24225592\n2455 cargo_2035_254292df\n2456 cargo_2035_2552461d\n2457 cargo_2035_26374690\n2458 cargo_2035_2690704c\n2459 cargo_2035_28763dfd\n2460 cargo_2035_29957ae2\n2461 cargo_2035_30817c5a\n2462 cargo_2035_242287eb\n2463 cargo_2035_25432ecf\n2464 cargo_2035_25527058\n2465 cargo_2035_2565467f\n2466 cargo_2035_263777ac\n2467 cargo_2035_26910b88\n2468 cargo_2035_2877810c\n2469 cargo_2035_2972647f\n2470 cargo_2035_29961ae9\n2471 cargo_2035_302120cc\n2472 cargo_2035_30821ffc\n2473 cargo_2035_30854fc7\n2474 cargo_2035_27364275\n2475 cargo_2035_276799bc\n2476 cargo_2035_27408dab\n2477 cargo_2035_27771a6a\n2478 cargo_2035_27425936\n2479 cargo_2035_2763972f\n2480 cargo_2035_27774770\n2481 cargo_2035_27777176\n2482 cargo_2035_28961dcc\n2483 cargo_2035_28963403\n2484 cargo_2035_28908794\n2485 cargo_2035_27654690\n2486 cargo_2035_27658494\n2487 cargo_2035_30785cbb\n2488 cargo_2035_2432331f\n2489 cargo_2035_276661e4\n2490 cargo_2035_27381636\n2491 cargo_2035_27554b3f\n2492 cargo_2035_275566f2\n2493 cargo_2035_2755880b\n2494 cargo_2035_273858c4\n2495 cargo_2035_27560f09\n2496 cargo_2035_2756251f\n2497 cargo_2035_275696fd\n2498 cargo_2035_275712ec\n2499 cargo_2035_2941583e\n2500 cargo_2035_29742603\n2501 cargo_2035_30758cf7\n2502 cargo_2035_24309db6\n2503 cargo_2035_2467601d\n2504 cargo_2035_26306022\n2505 cargo_2035_26463a7e\n2506 cargo_2035_26955320\n2507 cargo_2035_27580a4a\n2508 cargo_2035_293437f4\n2509 cargo_2035_3118141a\n2510 cargo_2035_24797827\n2511 cargo_2035_27581f9f\n2512 cargo_2035_296832d5\n2513 cargo_2035_3064198a\n2514 cargo_2035_246792d0\n2515 cargo_2035_247981aa\n2516 cargo_2035_26311684\n2517 cargo_2035_26957bae\n2518 cargo_2035_27584f66\n2519 cargo_2035_29049393\n2520 cargo_2035_293459ec\n2521 cargo_2035_294215cb\n2522 cargo_2035_297499bc\n2523 cargo_2035_24680a0b\n2524 cargo_2035_2480008b\n2525 cargo_2035_2595120b\n2526 cargo_2035_26313c43\n2527 cargo_2035_26959cf1\n2528 cargo_2035_27394837\n2529 cargo_2035_27587fe5\n2530 cargo_2035_2817686c\n2531 cargo_2035_2934789a\n2532 cargo_2035_29423ea1\n2533 cargo_2035_30773848\n2534 cargo_2035_24681817\n2535 cargo_2035_24801096\n2536 cargo_2035_2595211e\n2537 cargo_2035_26960823\n2538 cargo_2035_27589fdc\n2539 cargo_2035_293484af\n2540 cargo_2035_29424596\n2541 cargo_2035_2975170a\n2542 cargo_2035_246833c0\n2543 cargo_2035_259147c0\n2544 cargo_2035_26318dde\n2545 cargo_2035_26962ebe\n2546 cargo_2035_2759395c\n2547 cargo_2035_29350a33\n2548 cargo_2035_29426993\n2549 cargo_2035_30778b86\n2550 cargo_2035_311936c4\n2551 cargo_2035_24684e93\n2552 cargo_2035_2480442e\n2553 cargo_2035_25597273\n2554 cargo_2035_26322822\n2555 cargo_2035_2696360b\n2556 cargo_2035_27595ed3\n2557 cargo_2035_28180409\n2558 cargo_2035_2935168d\n2559 cargo_2035_2942738f\n2560 cargo_2035_2434605b\n2561 cargo_2035_25008ef4\n2562 cargo_2035_25997ad3\n2563 cargo_2035_275967e6\n2564 cargo_2035_28903337\n2565 cargo_2035_30446083\n2566 cargo_2035_306499b4\n2567 cargo_2035_24348b57\n2568 cargo_2035_250198ca\n2569 cargo_2035_25488e7c\n2570 cargo_2035_263250f7\n2571 cargo_2035_27599f05\n2572 cargo_2035_30468f63\n2573 cargo_2035_306506f3\n2574 cargo_2035_24350bad\n2575 cargo_2035_25030adb\n2576 cargo_2035_2547263c\n2577 cargo_2035_254890ad\n2578 cargo_2035_25999d1a\n2579 cargo_2035_27541172\n2580 cargo_2035_27601dca\n2581 cargo_2035_30651f30\n2582 cargo_2035_2435287b\n2583 cargo_2035_25037eed\n2584 cargo_2035_25490343\n2585 cargo_2035_26329637\n2586 cargo_2035_27603b66\n2587 cargo_2035_28799499\n2588 cargo_2035_297592c3\n2589 cargo_2035_30498d83\n2590 cargo_2035_30652c13\n2591 cargo_2035_243543d4\n2592 cargo_2035_2480987a\n2593 cargo_2035_25038750\n2594 cargo_2035_26001ec5\n2595 cargo_2035_26331f8c\n2596 cargo_2035_26848d3b\n2597 cargo_2035_29760071\n2598 cargo_2035_3043656c\n2599 cargo_2035_30653d3a\n2600 cargo_2035_2436427e\n2601 cargo_2035_25606743\n2602 cargo_2035_25713158\n2603 cargo_2035_2592487d\n2604 cargo_2035_25965e5f\n2605 cargo_2035_26857c0c\n2606 cargo_2035_27355d69\n2607 cargo_2035_27404686\n2608 cargo_2035_27700fac\n2609 cargo_2035_289130b2\n2610 cargo_2035_29701a1e\n2611 cargo_2035_298251fc\n2612 cargo_2035_305281f3\n2613 cargo_2035_306592b5\n2614 cargo_2035_2437257d\n2615 cargo_2035_24444001\n2616 cargo_2035_25012e23\n2617 cargo_2035_257205f9\n2618 cargo_2035_25991370\n2619 cargo_2035_26349618\n2620 cargo_2035_27623ee3\n2621 cargo_2035_289166fd\n2622 cargo_2035_30413936\n2623 cargo_2035_30451ce5\n2624 cargo_2035_24376512\n2625 cargo_2035_24446788\n2626 cargo_2035_2501441c\n2627 cargo_2035_25456e6e\n2628 cargo_2035_2572416f\n2629 cargo_2035_2592948a\n2630 cargo_2035_268674a6\n2631 cargo_2035_276278c7\n2632 cargo_2035_28918c37\n2633 cargo_2035_304150fc\n2634 cargo_2035_3045572a\n2635 cargo_2035_3066427e\n2636 cargo_2035_242494c7\n2637 cargo_2035_24284e13\n2638 cargo_2035_26407a33\n2639 cargo_2035_288163f7\n2640 cargo_2035_298105b4\n2641 cargo_2035_30536eb6\n2642 cargo_2035_311646d8\n2643 cargo_2035_24251270\n2644 cargo_2035_24386404\n2645 cargo_2035_24414181\n2646 cargo_2035_24517490\n2647 cargo_2035_248396e1\n2648 cargo_2035_25617d8b\n2649 cargo_2035_257344e7\n2650 cargo_2035_25910e19\n2651 cargo_2035_2612743d\n2652 cargo_2035_2687780d\n2653 cargo_2035_289246b6\n2654 cargo_2035_29181680\n2655 cargo_2035_2966414c\n2656 cargo_2035_3046594a\n2657 cargo_2035_24253dc1\n2658 cargo_2035_243928ee\n2659 cargo_2035_246683e6\n2660 cargo_2035_24824023\n2661 cargo_2035_25022d69\n2662 cargo_2035_25739081\n2663 cargo_2035_26131de2\n2664 cargo_2035_26979781\n2665 cargo_2035_27263231\n2666 cargo_2035_27714827\n2667 cargo_2035_28785021\n2668 cargo_2035_29184872\n2669 cargo_2035_29667ac9\n2670 cargo_2035_30423a5d\n2671 cargo_2035_30471e77\n2672 cargo_2035_306687af\n2673 cargo_2035_2425453a\n2674 cargo_2035_24394a30\n2675 cargo_2035_2446072f\n2676 cargo_2035_24520425\n2677 cargo_2035_246699cd\n2678 cargo_2035_2482594a\n2679 cargo_2035_25023899\n2680 cargo_2035_25742017\n2681 cargo_2035_2629074c\n2682 cargo_2035_277631cd\n2683 cargo_2035_289279e2\n2684 cargo_2035_2895051d\n2685 cargo_2035_29450716\n2686 cargo_2035_304248b1\n2687 cargo_2035_30473cd2\n2688 cargo_2035_242556a3\n2689 cargo_2035_24395939\n2690 cargo_2035_24419c31\n2691 cargo_2035_245216c6\n2692 cargo_2035_248443c0\n2693 cargo_2035_25050772\n2694 cargo_2035_25622998\n2695 cargo_2035_25743efc\n2696 cargo_2035_26980d34\n2697 cargo_2035_2716044e\n2698 cargo_2035_27414728\n2699 cargo_2035_27896f85\n2700 cargo_2035_28928667\n2701 cargo_2035_298156ae\n2702 cargo_2035_2984278d\n2703 cargo_2035_30474038\n2704 cargo_2035_24256d41\n2705 cargo_2035_243329ea\n2706 cargo_2035_24398db8\n2707 cargo_2035_24462dc8\n2708 cargo_2035_245225f9\n2709 cargo_2035_248273c0\n2710 cargo_2035_2502591f\n2711 cargo_2035_259375f2\n2712 cargo_2035_2594512e\n2713 cargo_2035_26294398\n2714 cargo_2035_2688798e\n2715 cargo_2035_289292f2\n2716 cargo_2035_2984394c\n2717 cargo_2035_30426770\n2718 cargo_2035_304770c9\n2719 cargo_2035_30671c81\n2720 cargo_2035_26041244\n2721 cargo_2035_26281078\n2722 cargo_2035_29364bba\n2723 cargo_2035_250722fe\n2724 cargo_2035_2627117e\n2725 cargo_2035_29377e04\n2726 cargo_2035_242718b8\n2727 cargo_2035_25962811\n2728 cargo_2035_26335ad1\n2729 cargo_2035_27697d57\n2730 cargo_2035_296982ce\n2731 cargo_2035_30525224\n2732 cargo_2035_24273e66\n2733 cargo_2035_26635666\n2734 cargo_2035_271047fc\n2735 cargo_2035_27270447\n2736 cargo_2035_28469704\n2737 cargo_2035_24277072\n2738 cargo_2035_255840ad\n2739 cargo_2035_26256cbb\n2740 cargo_2035_26483436\n2741 cargo_2035_272780ff\n2742 cargo_2035_2788408b\n2743 cargo_2035_29496198\n2744 cargo_2035_30034fcb\n2745 cargo_2035_24290db0\n2746 cargo_2035_273032d0\n2747 cargo_2035_278978da\n2748 cargo_2035_28453f8a\n2749 cargo_2035_30406ccb\n2750 cargo_2035_27773f51\n2751 cargo_2035_27781f41\n2752 cargo_2035_289661e2\n2753 cargo_2035_28897646\n2754 cargo_2035_24318ce9\n2755 cargo_2035_24320406\n2756 cargo_2035_307817f9\n2757 cargo_2035_24325a30\n2758 cargo_2035_29196123\n2759 cargo_2035_30789188\n2760 cargo_2035_243278e6\n2761 cargo_2035_28873a60\n2762 cargo_2035_307923f8\n2763 cargo_2035_288810ba\n2764 cargo_2035_275748a6\n2765 cargo_2035_28892d68\n2766 cargo_2035_31176568\n2767 cargo_2035_25077210\n2768 cargo_2035_26302550\n2769 cargo_2035_27391972\n2770 cargo_2035_27681a11\n2771 cargo_2035_28170cdc\n2772 cargo_2035_288934b0\n2773 cargo_2035_294184e4\n2774 cargo_2035_30509b7e\n2775 cargo_2035_30763033\n2776 cargo_2035_2431415f\n2777 cargo_2035_24337a4d\n2778 cargo_2035_26314be8\n2779 cargo_2035_275887ca\n2780 cargo_2035_288993c3\n2781 cargo_2035_29690285\n2782 cargo_2035_30645f1a\n2783 cargo_2035_31189bb6\n2784 cargo_2035_24347ad9\n2785 cargo_2035_25461d27\n2786 cargo_2035_255981d1\n2787 cargo_2035_25916ad8\n2788 cargo_2035_25998908\n2789 cargo_2035_26324524\n2790 cargo_2035_27346b96\n2791 cargo_2035_27692095\n2792 cargo_2035_28904f1d\n2793 cargo_2035_28943dbc\n2794 cargo_2035_30343157\n2795 cargo_2035_3045764a\n2796 cargo_2035_3051925a\n2797 cargo_2035_243514c8\n2798 cargo_2035_25479eba\n2799 cargo_2035_256002bf\n2800 cargo_2035_2600012f\n2801 cargo_2035_273480fc\n2802 cargo_2035_2740052a\n2803 cargo_2035_27694013\n2804 cargo_2035_28906d38\n2805 cargo_2035_3049746e\n2806 cargo_2035_3052181f\n2807 cargo_2035_2435598d\n2808 cargo_2035_25481f51\n2809 cargo_2035_25602c3a\n2810 cargo_2035_260031a8\n2811 cargo_2035_263336c5\n2812 cargo_2035_2684910e\n2813 cargo_2035_273507c5\n2814 cargo_2035_27401842\n2815 cargo_2035_27696962\n2816 cargo_2035_2890936b\n2817 cargo_2035_28967131\n2818 cargo_2035_30037b14\n2819 cargo_2035_30437832\n2820 cargo_2035_30524b23\n2821 cargo_2035_2435997d\n2822 cargo_2035_2570957c\n2823 cargo_2035_259634f4\n2824 cargo_2035_2633663b\n2825 cargo_2035_26852c33\n2826 cargo_2035_27610861\n2827 cargo_2035_28910be2\n2828 cargo_2035_30440fb3\n2829 cargo_2035_306564ee\n2830 cargo_2035_2436859a\n2831 cargo_2035_2444256d\n2832 cargo_2035_248166c8\n2833 cargo_2035_250109ce\n2834 cargo_2035_2509822f\n2835 cargo_2035_257150d5\n2836 cargo_2035_25925d1c\n2837 cargo_2035_26008fc4\n2838 cargo_2035_276187fe\n2839 cargo_2035_28819786\n2840 cargo_2035_28971b18\n2841 cargo_2035_306606c7\n2842 cargo_2035_24373741\n2843 cargo_2035_2483333c\n2844 cargo_2035_25013a32\n2845 cargo_2035_2550193d\n2846 cargo_2035_256110f4\n2847 cargo_2035_25721b55\n2848 cargo_2035_25969e3c\n2849 cargo_2035_26121add\n2850 cargo_2035_263505ab\n2851 cargo_2035_26864880\n2852 cargo_2035_269584f3\n2853 cargo_2035_27351731\n2854 cargo_2035_28917d03\n2855 cargo_2035_28972b55\n2856 cargo_2035_29175c12\n2857 cargo_2035_29441e3f\n2858 cargo_2035_29658685\n2859 cargo_2035_29804fca\n2860 cargo_2035_30042f02\n2861 cargo_2035_30366564\n2862 cargo_2035_304526bb\n2863 cargo_2035_31159a6e\n2864 cargo_2035_2437902a\n2865 cargo_2035_24447a02\n2866 cargo_2035_250151e9\n2867 cargo_2035_255033bc\n2868 cargo_2035_25726386\n2869 cargo_2035_2635618b\n2870 cargo_2035_26870713\n2871 cargo_2035_27176465\n2872 cargo_2035_27629d4c\n2873 cargo_2035_27707ea0\n2874 cargo_2035_288138ab\n2875 cargo_2035_30044ebd\n2876 cargo_2035_30416fb5\n2877 cargo_2035_304589dc\n2878 cargo_2035_306664cd\n2879 cargo_2035_307454dc\n2880 cargo_2035_24381760\n2881 cargo_2035_24448c2a\n2882 cargo_2035_25016256\n2883 cargo_2035_25458da2\n2884 cargo_2035_25728f42\n2885 cargo_2035_25974a3e\n2886 cargo_2035_26872fb9\n2887 cargo_2035_2763212b\n2888 cargo_2035_2892178d\n2889 cargo_2035_304171fb\n2890 cargo_2035_3046053c\n2891 cargo_2035_30667047\n2892 cargo_2035_2429901f\n2893 cargo_2035_24430044\n2894 cargo_2035_24788b05\n2895 cargo_2035_25017837\n2896 cargo_2035_25616d3d\n2897 cargo_2035_26126f39\n2898 cargo_2035_26406ea6\n2899 cargo_2035_27177a3d\n2900 cargo_2035_27362be3\n2901 cargo_2035_2816107b\n2902 cargo_2035_29809ea4\n2903 cargo_2035_30632b33\n2904 cargo_2035_30979513\n2905 cargo_2035_243318e8\n2906 cargo_2035_2439600e\n2907 cargo_2035_244611c8\n2908 cargo_2035_246700d7\n2909 cargo_2035_24826203\n2910 cargo_2035_2502450d\n2911 cargo_2035_25744b77\n2912 cargo_2035_259435ad\n2913 cargo_2035_25983134\n2914 cargo_2035_26885262\n2915 cargo_2035_27537a81\n2916 cargo_2035_27716c6c\n2917 cargo_2035_291866db\n2918 cargo_2035_294511d6\n2919 cargo_2035_296690f0\n2920 cargo_2035_29816b56\n2921 cargo_2035_304255a8\n2922 cargo_2035_304751a1\n2923 cargo_2035_305057ea\n2924 cargo_2035_30670fc1\n2925 cargo_2035_30754541\n2926 cargo_2035_27424c6b\n2927 cargo_2035_27638692\n2928 cargo_2035_2736581e\n2929 cargo_2035_276426df\n2930 cargo_2035_28964cfc\n2931 cargo_2035_273681d8\n2932 cargo_2035_2765064f\n2933 cargo_2035_30783f4c\n2934 cargo_2035_2919150e\n2935 cargo_2035_307867bd\n2936 cargo_2035_27661966\n2937 cargo_2035_29197691\n2938 cargo_2035_2756351e\n2939 cargo_2035_2467357f\n2940 cargo_2035_262984ba\n2941 cargo_2035_263004db\n2942 cargo_2035_27390510\n2943 cargo_2035_275734cc\n2944 cargo_2035_29416264\n2945 cargo_2035_30510543\n2946 cargo_2035_31180d28\n2947 cargo_2035_2590832d\n2948 cargo_2035_25949f4a\n2949 cargo_2035_26309f47\n2950 cargo_2035_27583715\n2951 cargo_2035_2889644f\n2952 cargo_2035_2968597c\n2953 cargo_2035_30642e8d\n2954 cargo_2035_31184b29\n2955 cargo_2035_244035bc\n2956 cargo_2035_26621112\n2957 cargo_2035_276851a1\n2958 cargo_2035_28898249\n2959 cargo_2035_2968668a\n2960 cargo_2035_311854e6\n2961 cargo_2035_243358b3\n2962 cargo_2035_259095fa\n2963 cargo_2035_2631286e\n2964 cargo_2035_275856f2\n2965 cargo_2035_2968814c\n2966 cargo_2035_29750053\n2967 cargo_2035_30514eb7\n2968 cargo_2035_306447c1\n2969 cargo_2035_31186ea8\n2970 cargo_2035_24336d35\n2971 cargo_2035_29689907\n2972 cargo_2035_31187527\n2973 cargo_2035_24339294\n2974 cargo_2035_25912fcf\n2975 cargo_2035_275900e9\n2976 cargo_2035_296925fd\n2977 cargo_2035_29752b8a\n2978 cargo_2035_30776c88\n2979 cargo_2035_3119118e\n2980 cargo_2035_24340e90\n2981 cargo_2035_248031c8\n2982 cargo_2035_2595437b\n2983 cargo_2035_29693fd8\n2984 cargo_2035_3119237c\n2985 cargo_2035_24341472\n2986 cargo_2035_259956bf\n2987 cargo_2035_27592e9e\n2988 cargo_2035_28901011\n2989 cargo_2035_296949a1\n2990 cargo_2035_29753968\n2991 cargo_2035_30647e06\n2992 cargo_2035_243538de\n2993 cargo_2035_2943274e\n2994 cargo_2035_30499991\n2995 cargo_2035_2435809d\n2996 cargo_2035_26851535\n2997 cargo_2035_274020f7\n2998 cargo_2035_3043943d\n2999 cargo_2035_2436144d\n3000 cargo_2035_25494e4d\n3001 cargo_2035_25710a16\n3002 cargo_2035_259232cc\n3003 cargo_2035_2685480d\n3004 cargo_2035_27548e3e\n3005 cargo_2035_27612492\n3006 cargo_2035_28911839\n3007 cargo_2035_2976318f\n3008 cargo_2035_304426f1\n3009 cargo_2035_306576f5\n3010 cargo_2035_3079515f\n3011 cargo_2035_243623c9\n3012 cargo_2035_2504288d\n3013 cargo_2035_25711c52\n3014 cargo_2035_268555e0\n3015 cargo_2035_28969e6f\n3016 cargo_2035_30039d5a\n3017 cargo_2035_24365501\n3018 cargo_2035_244400eb\n3019 cargo_2035_2500969c\n3020 cargo_2035_2549786d\n3021 cargo_2035_26007d29\n3022 cargo_2035_2685924a\n3023 cargo_2035_27616be5\n3024 cargo_2035_2880824a\n3025 cargo_2035_2897078c\n3026 cargo_2035_29765f65\n3027 cargo_2035_30410dbd\n3028 cargo_2035_30445c4d\n3029 cargo_2035_30739a22\n3030 cargo_2035_2436666a\n3031 cargo_2035_24895628\n3032 cargo_2035_25583184\n3033 cargo_2035_25817c54\n3034 cargo_2035_2686085b\n3035 cargo_2035_24370c3b\n3036 cargo_2035_24443600\n3037 cargo_2035_25011181\n3038 cargo_2035_254994ba\n3039 cargo_2035_25968796\n3040 cargo_2035_259802dc\n3041 cargo_2035_26862c71\n3042 cargo_2035_271736b0\n3043 cargo_2035_2762171e\n3044 cargo_2035_27703053\n3045 cargo_2035_30412ea1\n3046 cargo_2035_30661d48\n3047 cargo_2035_30741521\n3048 cargo_2035_24371185\n3049 cargo_2035_2571805c\n3050 cargo_2035_25927761\n3051 cargo_2035_26863d75\n3052 cargo_2035_274065d1\n3053 cargo_2035_27704172\n3054 cargo_2035_30450009\n3055 cargo_2035_2437580d\n3056 cargo_2035_25723937\n3057 cargo_2035_2770686f\n3058 cargo_2035_289440af\n3059 cargo_2035_30043c3d\n3060 cargo_2035_30454d74\n3061 cargo_2035_2438071f\n3062 cargo_2035_25727e41\n3063 cargo_2035_26871f29\n3064 cargo_2035_277085d8\n3065 cargo_2035_30459683\n3066 cargo_2035_24391e74\n3067 cargo_2035_24417fcb\n3068 cargo_2035_24519a64\n3069 cargo_2035_24869511\n3070 cargo_2035_25620fa8\n3071 cargo_2035_25738e52\n3072 cargo_2035_259328a2\n3073 cargo_2035_26130914\n3074 cargo_2035_2688262f\n3075 cargo_2035_273311f1\n3076 cargo_2035_27413e55\n3077 cargo_2035_28926218\n3078 cargo_2035_29813085\n3079 cargo_2035_29814b2c\n3080 cargo_2035_30470e7f\n3081 cargo_2035_3075152b\n3082 cargo_2035_243938c2\n3083 cargo_2035_25740ed2\n3084 cargo_2035_25934959\n3085 cargo_2035_26883a06\n3086 cargo_2035_277156cc\n3087 cargo_2035_29027cd7\n3088 cargo_2035_304725ef\n3089 cargo_2035_24397c61\n3090 cargo_2035_24671903\n3091 cargo_2035_25936c93\n3092 cargo_2035_261335de\n3093 cargo_2035_26886ea0\n3094 cargo_2035_27415131\n3095 cargo_2035_277172c8\n3096 cargo_2035_29670e28\n3097 cargo_2035_304760cc\n3098 cargo_2035_27668ded\n3099 cargo_2035_2739773a\n3100 cargo_2035_27690ab3\n3101 cargo_2035_27712d33\n3102 cargo_2035_27419e0e\n3103 cargo_2035_276368a0\n3104 cargo_2035_27640d67\n3105 cargo_2035_27776cf7\n3106 cargo_2035_28960de6\n3107 cargo_2035_288779f1\n3108 cargo_2035_2441371f\n3109 cargo_2035_248380c0\n3110 cargo_2035_258998c6\n3111 cargo_2035_260123ec\n3112 cargo_2035_29663203\n3113 cargo_2035_31163f79\n3114 cargo_2035_24416295\n3115 cargo_2035_24841641\n3116 cargo_2035_26129e1a\n3117 cargo_2035_31165896\n3118 cargo_2035_24420b4e\n3119 cargo_2035_24845d58\n3120 cargo_2035_262935d5\n3121 cargo_2035_27162a72\n3122 cargo_2035_29339197\n3123 cargo_2035_294124db\n3124 cargo_2035_31170515\n3125 cargo_2035_27370eb6\n3126 cargo_2035_27651a0f\n3127 cargo_2035_289411a0\n3128 cargo_2035_2766785e\n3129 cargo_2035_296403b9\n3130 cargo_2035_2964583e\n3131 cargo_2035_28073c8d\n3132 cargo_2035_2809595e\n3133 cargo_2035_2812892d\n3134 cargo_2035_28065342\n3135 cargo_2035_28069dcc\n3136 cargo_2035_2807479d\n3137 cargo_2035_28078681\n3138 cargo_2035_25644d6f\n3139 cargo_2035_2618647d\n3140 cargo_2035_268207f7\n3141 cargo_2035_2773233d\n3142 cargo_2035_27915bd2\n3143 cargo_2035_28090be2\n3144 cargo_2035_29214bae\n3145 cargo_2035_24477419\n3146 cargo_2035_25404e85\n3147 cargo_2035_25671fe1\n3148 cargo_2035_2569701c\n3149 cargo_2035_27134dc7\n3150 cargo_2035_28754814\n3151 cargo_2035_29052155\n3152 cargo_2035_29909952\n3153 cargo_2035_30835473\n3154 cargo_2035_24143c1c\n3155 cargo_2035_25781e1e\n3156 cargo_2035_2792611c\n3157 cargo_2035_281127fd\n3158 cargo_2035_2862576f\n3159 cargo_2035_28992184\n3160 cargo_2035_29225316\n3161 cargo_2035_2931357b\n3162 cargo_2035_29782f1b\n3163 cargo_2035_29939451\n3164 cargo_2035_25759ce3\n3165 cargo_2035_257846b4\n3166 cargo_2035_26148d48\n3167 cargo_2035_265819d8\n3168 cargo_2035_26607807\n3169 cargo_2035_28629391\n3170 cargo_2035_29062cbb\n3171 cargo_2035_29942f58\n3172 cargo_2035_24467c13\n3173 cargo_2035_25685545\n3174 cargo_2035_25766383\n3175 cargo_2035_26155c19\n3176 cargo_2035_26588e8f\n3177 cargo_2035_2863581b\n3178 cargo_2035_30201c95\n3179 cargo_2035_24470784\n3180 cargo_2035_248628e8\n3181 cargo_2035_25068f83\n3182 cargo_2035_25688043\n3183 cargo_2035_257940f5\n3184 cargo_2035_26502a92\n3185 cargo_2035_26591afc\n3186 cargo_2035_27428e6d\n3187 cargo_2035_28138762\n3188 cargo_2035_29005d6e\n3189 cargo_2035_292382aa\n3190 cargo_2035_293275b6\n3191 cargo_2035_2979113e\n3192 cargo_2035_299784da\n3193 cargo_2035_302046ea\n3194 cargo_2035_30324068\n3195 cargo_2035_25434d71\n3196 cargo_2035_2637834f\n3197 cargo_2035_287793e7\n3198 cargo_2035_29727213\n3199 cargo_2035_2979556f\n3200 cargo_2035_29962710\n3201 cargo_2035_30822e94\n3202 cargo_2035_293664fd\n3203 cargo_2035_24885497\n3204 cargo_2035_2675144d\n3205 cargo_2035_28340ef5\n3206 cargo_2035_2884889b\n3207 cargo_2035_29868372\n3208 cargo_2035_24498d9d\n3209 cargo_2035_24913699\n3210 cargo_2035_26079865\n3211 cargo_2035_28310ad6\n3212 cargo_2035_28827a2f\n3213 cargo_2035_30980e29\n3214 cargo_2035_245009bf\n3215 cargo_2035_26436cce\n3216 cargo_2035_2753471b\n3217 cargo_2035_283124d4\n3218 cargo_2035_28356749\n3219 cargo_2035_28829543\n3220 cargo_2035_29838885\n3221 cargo_2035_3098264f\n3222 cargo_2035_24504749\n3223 cargo_2035_24924b2f\n3224 cargo_2035_2584468a\n3225 cargo_2035_26439237\n3226 cargo_2035_27192a4b\n3227 cargo_2035_272263ef\n3228 cargo_2035_283160d6\n3229 cargo_2035_288333ed\n3230 cargo_2035_24532325\n3231 cargo_2035_25112180\n3232 cargo_2035_24565818\n3233 cargo_2035_2514549b\n3234 cargo_2035_29101fc8\n3235 cargo_2035_30245bf4\n3236 cargo_2035_24576d01\n3237 cargo_2035_251563a4\n3238 cargo_2035_29112e93\n3239 cargo_2035_30256573\n3240 cargo_2035_24587d08\n3241 cargo_2035_2516764f\n3242 cargo_2035_29123af6\n3243 cargo_2035_30267a36\n3244 cargo_2035_24598596\n3245 cargo_2035_25178b01\n3246 cargo_2035_2913407d\n3247 cargo_2035_3027877d\n3248 cargo_2035_246093f8\n3249 cargo_2035_251899b1\n3250 cargo_2035_291450e6\n3251 cargo_2035_3028912f\n3252 cargo_2035_24620571\n3253 cargo_2035_25200753\n3254 cargo_2035_2915629f\n3255 cargo_2035_30300343\n3256 cargo_2035_24533e9d\n3257 cargo_2035_25113c59\n3258 cargo_2035_291676cc\n3259 cargo_2035_30311568\n3260 cargo_2035_24534089\n3261 cargo_2035_25114bf3\n3262 cargo_2035_29080d9a\n3263 cargo_2035_30224dfe\n3264 cargo_2035_24535535\n3265 cargo_2035_25115f55\n3266 cargo_2035_290812ba\n3267 cargo_2035_3022581b\n3268 cargo_2035_24536591\n3269 cargo_2035_29082fde\n3270 cargo_2035_30226817\n3271 cargo_2035_29642536\n3272 cargo_2035_2453789c\n3273 cargo_2035_251173df\n3274 cargo_2035_29083dbf\n3275 cargo_2035_30227230\n3276 cargo_2035_2453848f\n3277 cargo_2035_251187a2\n3278 cargo_2035_29084c59\n3279 cargo_2035_302288f9\n3280 cargo_2035_29644e84\n3281 cargo_2035_24539e5a\n3282 cargo_2035_2511982a\n3283 cargo_2035_29085fb1\n3284 cargo_2035_30229204\n3285 cargo_2035_2454042a\n3286 cargo_2035_2512069c\n3287 cargo_2035_29086eca\n3288 cargo_2035_30230137\n3289 cargo_2035_245417aa\n3290 cargo_2035_2512126b\n3291 cargo_2035_29087425\n3292 cargo_2035_30231f3f\n3293 cargo_2035_245426d1\n3294 cargo_2035_251229a9\n3295 cargo_2035_288561e6\n3296 cargo_2035_29088a8c\n3297 cargo_2035_24544d1b\n3298 cargo_2035_25124641\n3299 cargo_2035_290899d3\n3300 cargo_2035_2454550a\n3301 cargo_2035_286594e3\n3302 cargo_2035_30235517\n3303 cargo_2035_24547cba\n3304 cargo_2035_251275b8\n3305 cargo_2035_286611aa\n3306 cargo_2035_30237bcb\n3307 cargo_2035_24549aa1\n3308 cargo_2035_251309fa\n3309 cargo_2035_28251e90\n3310 cargo_2035_29096cf6\n3311 cargo_2035_24552e52\n3312 cargo_2035_251339c6\n3313 cargo_2035_26239af8\n3314 cargo_2035_2825490c\n3315 cargo_2035_288559cd\n3316 cargo_2035_24553cf4\n3317 cargo_2035_2513589e\n3318 cargo_2035_262407ce\n3319 cargo_2035_28255990\n3320 cargo_2035_24556d68\n3321 cargo_2035_251376fe\n3322 cargo_2035_26243d78\n3323 cargo_2035_282587c0\n3324 cargo_2035_29102c4e\n3325 cargo_2035_24558974\n3326 cargo_2035_251391b6\n3327 cargo_2035_262450d4\n3328 cargo_2035_28260acb\n3329 cargo_2035_291046ac\n3330 cargo_2035_30138cb4\n3331 cargo_2035_24559baf\n3332 cargo_2035_24560bf0\n3333 cargo_2035_24657e60\n3334 cargo_2035_251419c4\n3335 cargo_2035_25312985\n3336 cargo_2035_28489dfe\n3337 cargo_2035_29106837\n3338 cargo_2035_31027a06\n3339 cargo_2035_24561379\n3340 cargo_2035_24658c64\n3341 cargo_2035_29526fa2\n3342 cargo_2035_310389d2\n3343 cargo_2035_24562b52\n3344 cargo_2035_24951b0d\n3345 cargo_2035_25240f28\n3346 cargo_2035_253672f7\n3347 cargo_2035_27465d36\n3348 cargo_2035_27821b1c\n3349 cargo_2035_286771a1\n3350 cargo_2035_30253518\n3351 cargo_2035_245648fc\n3352 cargo_2035_25146e59\n3353 cargo_2035_25280ece\n3354 cargo_2035_28422587\n3355 cargo_2035_28533899\n3356 cargo_2035_2911095a\n3357 cargo_2035_30997d7e\n3358 cargo_2035_2813937d\n3359 cargo_2035_245664b5\n3360 cargo_2035_28433dc1\n3361 cargo_2035_29531c67\n3362 cargo_2035_3100879b\n3363 cargo_2035_2456752e\n3364 cargo_2035_251485d1\n3365 cargo_2035_25296d3c\n3366 cargo_2035_284343cb\n3367 cargo_2035_28547470\n3368 cargo_2035_2911340e\n3369 cargo_2035_31021bff\n3370 cargo_2035_28056c42\n3371 cargo_2035_24568664\n3372 cargo_2035_29533c68\n3373 cargo_2035_31022179\n3374 cargo_2035_24569c9b\n3375 cargo_2035_25150c7e\n3376 cargo_2035_25300f58\n3377 cargo_2035_2854906a\n3378 cargo_2035_291150e9\n3379 cargo_2035_31025385\n3380 cargo_2035_24570183\n3381 cargo_2035_2953570e\n3382 cargo_2035_31026d41\n3383 cargo_2035_28071c55\n3384 cargo_2035_245710da\n3385 cargo_2035_25152f02\n3386 cargo_2035_25305759\n3387 cargo_2035_28380511\n3388 cargo_2035_28491a13\n3389 cargo_2035_29117563\n3390 cargo_2035_31030cb2\n3391 cargo_2035_28072952\n3392 cargo_2035_29013df9\n3393 cargo_2035_2924636c\n3394 cargo_2035_30058c6c\n3395 cargo_2035_24572793\n3396 cargo_2035_28381a5c\n3397 cargo_2035_29537604\n3398 cargo_2035_31031585\n3399 cargo_2035_3103288d\n3400 cargo_2035_24573973\n3401 cargo_2035_2515430e\n3402 cargo_2035_253097c8\n3403 cargo_2035_284939f7\n3404 cargo_2035_291193e6\n3405 cargo_2035_31034f25\n3406 cargo_2035_24574eb5\n3407 cargo_2035_27793873\n3408 cargo_2035_295407c8\n3409 cargo_2035_280802ce\n3410 cargo_2035_29456fbe\n3411 cargo_2035_300636b1\n3412 cargo_2035_24575266\n3413 cargo_2035_25157a44\n3414 cargo_2035_25314e13\n3415 cargo_2035_28495b0c\n3416 cargo_2035_291213b0\n3417 cargo_2035_31039a47\n3418 cargo_2035_2457777f\n3419 cargo_2035_28385738\n3420 cargo_2035_2954235b\n3421 cargo_2035_310408c2\n3422 cargo_2035_24578ae0\n3423 cargo_2035_2515938f\n3424 cargo_2035_25318b67\n3425 cargo_2035_284978ac\n3426 cargo_2035_29124403\n3427 cargo_2035_31043083\n3428 cargo_2035_24579158\n3429 cargo_2035_28387b06\n3430 cargo_2035_295441ed\n3431 cargo_2035_31044b06\n3432 cargo_2035_24580b1b\n3433 cargo_2035_2463474f\n3434 cargo_2035_251619d9\n3435 cargo_2035_25322deb\n3436 cargo_2035_28388d87\n3437 cargo_2035_28499ed2\n3438 cargo_2035_29125452\n3439 cargo_2035_31047956\n3440 cargo_2035_24581970\n3441 cargo_2035_28390e99\n3442 cargo_2035_29546952\n3443 cargo_2035_306073eb\n3444 cargo_2035_31048be2\n3445 cargo_2035_310508e0\n3446 cargo_2035_24582d92\n3447 cargo_2035_24636403\n3448 cargo_2035_25163b6b\n3449 cargo_2035_253279d2\n3450 cargo_2035_285026b1\n3451 cargo_2035_291279ed\n3452 cargo_2035_3105225e\n3453 cargo_2035_24583736\n3454 cargo_2035_29548f48\n3455 cargo_2035_30130cc1\n3456 cargo_2035_31053df7\n3457 cargo_2035_24584c4b\n3458 cargo_2035_24639048\n3459 cargo_2035_2476692f\n3460 cargo_2035_25165610\n3461 cargo_2035_25331137\n3462 cargo_2035_28393dad\n3463 cargo_2035_2850493c\n3464 cargo_2035_29129b7d\n3465 cargo_2035_31056a34\n3466 cargo_2035_24585d02\n3467 cargo_2035_24767b97\n3468 cargo_2035_28394484\n3469 cargo_2035_29551e3b\n3470 cargo_2035_30611e58\n3471 cargo_2035_31057dce\n3472 cargo_2035_24586366\n3473 cargo_2035_24641f89\n3474 cargo_2035_251684f8\n3475 cargo_2035_253367e3\n3476 cargo_2035_28395ddc\n3477 cargo_2035_28506dd0\n3478 cargo_2035_29131538\n3479 cargo_2035_24588b67\n3480 cargo_2035_28396354\n3481 cargo_2035_295530bf\n3482 cargo_2035_30613613\n3483 cargo_2035_31062215\n3484 cargo_2035_245891bd\n3485 cargo_2035_246430d5\n3486 cargo_2035_25170e0d\n3487 cargo_2035_253405d8\n3488 cargo_2035_28508390\n3489 cargo_2035_291338ca\n3490 cargo_2035_309317ae\n3491 cargo_2035_31065cce\n3492 cargo_2035_24590b3e\n3493 cargo_2035_28398d0d\n3494 cargo_2035_31066a7c\n3495 cargo_2035_24591b8d\n3496 cargo_2035_24645417\n3497 cargo_2035_247721f4\n3498 cargo_2035_251720cb\n3499 cargo_2035_25344657\n3500 cargo_2035_28399239\n3501 cargo_2035_2851042d\n3502 cargo_2035_291364df\n3503 cargo_2035_309359c8\n3504 cargo_2035_310699b3\n3505 cargo_2035_245923da\n3506 cargo_2035_24774936\n3507 cargo_2035_29556a00\n3508 cargo_2035_31070bbb\n3509 cargo_2035_31072d52\n3510 cargo_2035_2619899c\n3511 cargo_2035_281159ae\n3512 cargo_2035_29314166\n3513 cargo_2035_2947357d\n3514 cargo_2035_24593a0e\n3515 cargo_2035_246470f6\n3516 cargo_2035_2517482e\n3517 cargo_2035_253493b5\n3518 cargo_2035_28513880\n3519 cargo_2035_291388e3\n3520 cargo_2035_29248646\n3521 cargo_2035_310742de\n3522 cargo_2035_24594dc3\n3523 cargo_2035_29249bf1\n3524 cargo_2035_306209aa\n3525 cargo_2035_31075478\n3526 cargo_2035_24595b88\n3527 cargo_2035_24650f4f\n3528 cargo_2035_251767f5\n3529 cargo_2035_25353f2b\n3530 cargo_2035_26250689\n3531 cargo_2035_2851579b\n3532 cargo_2035_29140f98\n3533 cargo_2035_29251730\n3534 cargo_2035_31078970\n3535 cargo_2035_25536380\n3536 cargo_2035_26202a6f\n3537 cargo_2035_26551be4\n3538 cargo_2035_26928cef\n3539 cargo_2035_2796180b\n3540 cargo_2035_28122897\n3541 cargo_2035_24596fc0\n3542 cargo_2035_28405eb1\n3543 cargo_2035_31079c7f\n3544 cargo_2035_2459771f\n3545 cargo_2035_2465232e\n3546 cargo_2035_25179673\n3547 cargo_2035_25358b93\n3548 cargo_2035_26252317\n3549 cargo_2035_28517b21\n3550 cargo_2035_29142cc8\n3551 cargo_2035_3108323d\n3552 cargo_2035_24599c63\n3553 cargo_2035_26808424\n3554 cargo_2035_28407ba4\n3555 cargo_2035_29256ec8\n3556 cargo_2035_306249e8\n3557 cargo_2035_310846aa\n3558 cargo_2035_24600e8d\n3559 cargo_2035_24654e34\n3560 cargo_2035_2536256f\n3561 cargo_2035_2622180d\n3562 cargo_2035_26809373\n3563 cargo_2035_28408fd3\n3564 cargo_2035_28519919\n3565 cargo_2035_29144fb6\n3566 cargo_2035_29259952\n3567 cargo_2035_3108726c\n3568 cargo_2035_2551555d\n3569 cargo_2035_25553a7e\n3570 cargo_2035_262066f7\n3571 cargo_2035_26898ada\n3572 cargo_2035_269329eb\n3573 cargo_2035_2813198d\n3574 cargo_2035_287708d6\n3575 cargo_2035_29481145\n3576 cargo_2035_308421f2\n3577 cargo_2035_2460180d\n3578 cargo_2035_267800ea\n3579 cargo_2035_28409049\n3580 cargo_2035_29260f62\n3581 cargo_2035_30885f28\n3582 cargo_2035_31088084\n3583 cargo_2035_2506569a\n3584 cargo_2035_26499a66\n3585 cargo_2035_28133c56\n3586 cargo_2035_29323224\n3587 cargo_2035_29482af8\n3588 cargo_2035_2997575e\n3589 cargo_2035_250666c1\n3590 cargo_2035_2551704b\n3591 cargo_2035_26900375\n3592 cargo_2035_26934195\n3593 cargo_2035_279654cc\n3594 cargo_2035_281357e4\n3595 cargo_2035_287720a7\n3596 cargo_2035_29483fb5\n3597 cargo_2035_308448a8\n3598 cargo_2035_246033c6\n3599 cargo_2035_26802e89\n3600 cargo_2035_28412984\n3601 cargo_2035_30712fed\n3602 cargo_2035_30918c5c\n3603 cargo_2035_310926f0\n3604 cargo_2035_310944c5\n3605 cargo_2035_2460534f\n3606 cargo_2035_26811552\n3607 cargo_2035_28299145\n3608 cargo_2035_28413b2b\n3609 cargo_2035_2926731d\n3610 cargo_2035_307150a5\n3611 cargo_2035_3094056e\n3612 cargo_2035_310975e4\n3613 cargo_2035_24607886\n3614 cargo_2035_2681345f\n3615 cargo_2035_28272702\n3616 cargo_2035_28415415\n3617 cargo_2035_29272144\n3618 cargo_2035_30952cdb\n3619 cargo_2035_31101a05\n3620 cargo_2035_26199927\n3621 cargo_2035_2795952c\n3622 cargo_2035_28148c12\n3623 cargo_2035_28628911\n3624 cargo_2035_294635f2\n3625 cargo_2035_29784f94\n3626 cargo_2035_308516a2\n3627 cargo_2035_24610616\n3628 cargo_2035_26815901\n3629 cargo_2035_282765da\n3630 cargo_2035_28417d7e\n3631 cargo_2035_2927637f\n3632 cargo_2035_308861d0\n3633 cargo_2035_2504813e\n3634 cargo_2035_2656385f\n3635 cargo_2035_271181c0\n3636 cargo_2035_27432c75\n3637 cargo_2035_281529b8\n3638 cargo_2035_29026b6b\n3639 cargo_2035_29474995\n3640 cargo_2035_29793543\n3641 cargo_2035_303311f0\n3642 cargo_2035_24612a55\n3643 cargo_2035_26782b0f\n3644 cargo_2035_28281c90\n3645 cargo_2035_30124e81\n3646 cargo_2035_308881d9\n3647 cargo_2035_24614314\n3648 cargo_2035_24992d21\n3649 cargo_2035_26784d55\n3650 cargo_2035_28285d0d\n3651 cargo_2035_28420500\n3652 cargo_2035_29283dd0\n3653 cargo_2035_3012623b\n3654 cargo_2035_30727de6\n3655 cargo_2035_30890ee1\n3656 cargo_2035_31113cd7\n3657 cargo_2035_27769102\n3658 cargo_2035_2763705c\n3659 cargo_2035_3079182e\n3660 cargo_2035_2467862b\n3661 cargo_2035_26307516\n3662 cargo_2035_26308d2b\n3663 cargo_2035_26956b11\n3664 cargo_2035_27582038\n3665 cargo_2035_281749ae\n3666 cargo_2035_29344fc5\n3667 cargo_2035_29420e39\n3668 cargo_2035_243885e7\n3669 cargo_2035_24667c13\n3670 cargo_2035_257360c1\n3671 cargo_2035_25921579\n3672 cargo_2035_2687977f\n3673 cargo_2035_27713e43\n3674 cargo_2035_28948cca\n3675 cargo_2035_26982160\n3676 cargo_2035_2699301a\n3677 cargo_2035_27038e62\n3678 cargo_2035_27057aaf\n3679 cargo_2035_269834c6\n3680 cargo_2035_305936cf\n3681 cargo_2035_26985dda\n3682 cargo_2035_30594fc6\n3683 cargo_2035_26673478\n3684 cargo_2035_269906db\n3685 cargo_2035_26992d5c\n3686 cargo_2035_26995df5\n3687 cargo_2035_26999a9c\n3688 cargo_2035_27000096\n3689 cargo_2035_30549dae\n3690 cargo_2035_2700842e\n3691 cargo_2035_305552bd\n3692 cargo_2035_279881cc\n3693 cargo_2035_26706236\n3694 cargo_2035_280027f9\n3695 cargo_2035_28212cc3\n3696 cargo_2035_28571890\n3697 cargo_2035_29617162\n3698 cargo_2035_30564fc0\n3699 cargo_2035_309159a7\n3700 cargo_2035_27026ccc\n3701 cargo_2035_30917ed4\n3702 cargo_2035_26669a27\n3703 cargo_2035_270294d8\n3704 cargo_2035_309251ce\n3705 cargo_2035_270324c8\n3706 cargo_2035_24703cd9\n3707 cargo_2035_26048d66\n3708 cargo_2035_26723d81\n3709 cargo_2035_2858548c\n3710 cargo_2035_24714139\n3711 cargo_2035_24770ef8\n3712 cargo_2035_2651961f\n3713 cargo_2035_28019053\n3714 cargo_2035_28586159\n3715 cargo_2035_24725994\n3716 cargo_2035_28022bfa\n3717 cargo_2035_2474683e\n3718 cargo_2035_261140fa\n3719 cargo_2035_267304f9\n3720 cargo_2035_27208c94\n3721 cargo_2035_280248e7\n3722 cargo_2035_28025623\n3723 cargo_2035_30570d47\n3724 cargo_2035_30702ff0\n3725 cargo_2035_30936853\n3726 cargo_2035_24747a78\n3727 cargo_2035_26547da1\n3728 cargo_2035_2474845c\n3729 cargo_2035_260499e6\n3730 cargo_2035_26733e36\n3731 cargo_2035_28027463\n3732 cargo_2035_285930ac\n3733 cargo_2035_30703c19\n3734 cargo_2035_24749505\n3735 cargo_2035_25855618\n3736 cargo_2035_26050585\n3737 cargo_2035_266487cd\n3738 cargo_2035_267341bb\n3739 cargo_2035_272100d7\n3740 cargo_2035_28262978\n3741 cargo_2035_30704d88\n3742 cargo_2035_2475032b\n3743 cargo_2035_25857b33\n3744 cargo_2035_26650415\n3745 cargo_2035_2703667d\n3746 cargo_2035_247048ed\n3747 cargo_2035_26053ca8\n3748 cargo_2035_26651916\n3749 cargo_2035_267387ea\n3750 cargo_2035_28032840\n3751 cargo_2035_28596198\n3752 cargo_2035_30621ebd\n3753 cargo_2035_30705138\n3754 cargo_2035_309426ac\n3755 cargo_2035_247064df\n3756 cargo_2035_25861071\n3757 cargo_2035_30945438\n3758 cargo_2035_24707a15\n3759 cargo_2035_25862dda\n3760 cargo_2035_25863643\n3761 cargo_2035_2655231c\n3762 cargo_2035_27039903\n3763 cargo_2035_30946e1b\n3764 cargo_2035_24709b09\n3765 cargo_2035_260613e8\n3766 cargo_2035_266612a3\n3767 cargo_2035_267458ff\n3768 cargo_2035_27215887\n3769 cargo_2035_28600c4b\n3770 cargo_2035_30575b08\n3771 cargo_2035_24712cac\n3772 cargo_2035_260664ae\n3773 cargo_2035_26764fa8\n3774 cargo_2035_27196c40\n3775 cargo_2035_278615ec\n3776 cargo_2035_28192da8\n3777 cargo_2035_306771d1\n3778 cargo_2035_31119aa3\n3779 cargo_2035_24715bf7\n3780 cargo_2035_25872639\n3781 cargo_2035_26704153\n3782 cargo_2035_282679c4\n3783 cargo_2035_247160ea\n3784 cargo_2035_26525f18\n3785 cargo_2035_27043007\n3786 cargo_2035_272188cc\n3787 cargo_2035_29599b73\n3788 cargo_2035_24717b08\n3789 cargo_2035_25874fb7\n3790 cargo_2035_260731b9\n3791 cargo_2035_26526c23\n3792 cargo_2035_27869087\n3793 cargo_2035_281950d9\n3794 cargo_2035_24718653\n3795 cargo_2035_260745ad\n3796 cargo_2035_3058093b\n3797 cargo_2035_247199e7\n3798 cargo_2035_2673793f\n3799 cargo_2035_27045b8b\n3800 cargo_2035_2722068b\n3801 cargo_2035_24720d71\n3802 cargo_2035_25879cb6\n3803 cargo_2035_26371891\n3804 cargo_2035_296028b0\n3805 cargo_2035_30581013\n3806 cargo_2035_24721efa\n3807 cargo_2035_26078732\n3808 cargo_2035_27222d62\n3809 cargo_2035_2823725b\n3810 cargo_2035_24723498\n3811 cargo_2035_2588356d\n3812 cargo_2035_29605e39\n3813 cargo_2035_247286ec\n3814 cargo_2035_26088002\n3815 cargo_2035_267790e5\n3816 cargo_2035_27852e31\n3817 cargo_2035_28472c10\n3818 cargo_2035_30688284\n3819 cargo_2035_31130f80\n3820 cargo_2035_24729dff\n3821 cargo_2035_258893cc\n3822 cargo_2035_2609033b\n3823 cargo_2035_26535180\n3824 cargo_2035_267529ba\n3825 cargo_2035_278534d4\n3826 cargo_2035_282047bd\n3827 cargo_2035_284739fe\n3828 cargo_2035_284742cd\n3829 cargo_2035_24730213\n3830 cargo_2035_266869df\n3831 cargo_2035_27053527\n3832 cargo_2035_28554029\n3833 cargo_2035_24731a1b\n3834 cargo_2035_25891a58\n3835 cargo_2035_2653673e\n3836 cargo_2035_26680697\n3837 cargo_2035_26687f9d\n3838 cargo_2035_26755d3e\n3839 cargo_2035_270544e2\n3840 cargo_2035_28555cd1\n3841 cargo_2035_29610b05\n3842 cargo_2035_305775cb\n3843 cargo_2035_25125f88\n3844 cargo_2035_288580d3\n3845 cargo_2035_2909135a\n3846 cargo_2035_28860e20\n3847 cargo_2035_2909369c\n3848 cargo_2035_25128e01\n3849 cargo_2035_29094c98\n3850 cargo_2035_25129f83\n3851 cargo_2035_28250510\n3852 cargo_2035_2886270f\n3853 cargo_2035_29095c7f\n3854 cargo_2035_25131c86\n3855 cargo_2035_282526cf\n3856 cargo_2035_28853a42\n3857 cargo_2035_29097b62\n3858 cargo_2035_24551570\n3859 cargo_2035_25132413\n3860 cargo_2035_262387c9\n3861 cargo_2035_28253551\n3862 cargo_2035_29098b12\n3863 cargo_2035_2624272c\n3864 cargo_2035_28257492\n3865 cargo_2035_251387eb\n3866 cargo_2035_2624482b\n3867 cargo_2035_28259ec2\n3868 cargo_2035_29523cae\n3869 cargo_2035_24655751\n3870 cargo_2035_251408e6\n3871 cargo_2035_252685d8\n3872 cargo_2035_26246ba6\n3873 cargo_2035_28261173\n3874 cargo_2035_26715230\n3875 cargo_2035_27982bab\n3876 cargo_2035_27983c11\n3877 cargo_2035_26520996\n3878 cargo_2035_2670544a\n3879 cargo_2035_28000476\n3880 cargo_2035_280014d5\n3881 cargo_2035_28211269\n3882 cargo_2035_28570aab\n3883 cargo_2035_296165e2\n3884 cargo_2035_26527462\n3885 cargo_2035_27024e87\n3886 cargo_2035_309133cc\n3887 cargo_2035_26709fdb\n3888 cargo_2035_280044d9\n3889 cargo_2035_2800569c\n3890 cargo_2035_282149f0\n3891 cargo_2035_28215b44\n3892 cargo_2035_28575ac9\n3893 cargo_2035_29620fcc\n3894 cargo_2035_2476579c\n3895 cargo_2035_26665296\n3896 cargo_2035_24768c2b\n3897 cargo_2035_26534830\n3898 cargo_2035_27031f7f\n3899 cargo_2035_280160af\n3900 cargo_2035_28226a35\n3901 cargo_2035_28583dac\n3902 cargo_2035_30926af9\n3903 cargo_2035_24771740\n3904 cargo_2035_260702ef\n3905 cargo_2035_267258a3\n3906 cargo_2035_28021b14\n3907 cargo_2035_2858710d\n3908 cargo_2035_305698a2\n3909 cargo_2035_30684b3c\n3910 cargo_2035_24775c13\n3911 cargo_2035_258987df\n3912 cargo_2035_26548206\n3913 cargo_2035_26647272\n3914 cargo_2035_270350bb\n3915 cargo_2035_30938db5\n3916 cargo_2035_247761a7\n3917 cargo_2035_25856dd4\n3918 cargo_2035_26051a77\n3919 cargo_2035_26549b15\n3920 cargo_2035_267359f4\n3921 cargo_2035_280288df\n3922 cargo_2035_28594ab5\n3923 cargo_2035_309397d3\n3924 cargo_2035_2478425c\n3925 cargo_2035_2498656c\n3926 cargo_2035_252452b7\n3927 cargo_2035_25376780\n3928 cargo_2035_275099e2\n3929 cargo_2035_27826228\n3930 cargo_2035_287212cf\n3931 cargo_2035_29271b24\n3932 cargo_2035_301764d8\n3933 cargo_2035_30297b64\n3934 cargo_2035_24787aaf\n3935 cargo_2035_24990028\n3936 cargo_2035_25249085\n3937 cargo_2035_25385a5e\n3938 cargo_2035_27513257\n3939 cargo_2035_2783053a\n3940 cargo_2035_28239aef\n3941 cargo_2035_287264b5\n3942 cargo_2035_2927965e\n3943 cargo_2035_30181bb3\n3944 cargo_2035_3030231d\n3945 cargo_2035_30724c68\n3946 cargo_2035_31109fa8\n3947 cargo_2035_2415421a\n3948 cargo_2035_24752d8d\n3949 cargo_2035_28727d5d\n3950 cargo_2035_30182a44\n3951 cargo_2035_303035eb\n3952 cargo_2035_305977f2\n3953 cargo_2035_307253e8\n3954 cargo_2035_2475323c\n3955 cargo_2035_2519433c\n3956 cargo_2035_25252198\n3957 cargo_2035_25270e83\n3958 cargo_2035_27515fae\n3959 cargo_2035_2783309b\n3960 cargo_2035_28240683\n3961 cargo_2035_28728bd7\n3962 cargo_2035_29282142\n3963 cargo_2035_30183ae6\n3964 cargo_2035_30304a6c\n3965 cargo_2035_3111290e\n3966 cargo_2035_28658af2\n3967 cargo_2035_3018810c\n3968 cargo_2035_27451b0f\n3969 cargo_2035_26994d63\n3970 cargo_2035_295617a2\n3971 cargo_2035_246562f8\n3972 cargo_2035_25207162\n3973 cargo_2035_27461954\n3974 cargo_2035_27788ead\n3975 cargo_2035_246609f6\n3976 cargo_2035_25334b9e\n3977 cargo_2035_28389049\n3978 cargo_2035_285009dc\n3979 cargo_2035_31049f79\n3980 cargo_2035_25143476\n3981 cargo_2035_25356cb8\n3982 cargo_2035_2840031c\n3983 cargo_2035_285118ad\n3984 cargo_2035_291085b0\n3985 cargo_2035_3107191d\n3986 cargo_2035_25298b39\n3987 cargo_2035_28435477\n3988 cargo_2035_2854828d\n3989 cargo_2035_310232ba\n3990 cargo_2035_28066b69\n3991 cargo_2035_2807091b\n3992 cargo_2035_251537fc\n3993 cargo_2035_25307872\n3994 cargo_2035_28492f55\n3995 cargo_2035_28075556\n3996 cargo_2035_25155243\n3997 cargo_2035_2531154d\n3998 cargo_2035_2838330c\n3999 cargo_2035_28494989\n4000 cargo_2035_31036a94\n4001 cargo_2035_28079623\n4002 cargo_2035_300629c9\n4003 cargo_2035_251585b7\n4004 cargo_2035_2531697a\n4005 cargo_2035_28496ea6\n4006 cargo_2035_310413a4\n4007 cargo_2035_2463308e\n4008 cargo_2035_25160cbd\n4009 cargo_2035_25320ede\n4010 cargo_2035_28498dcc\n4011 cargo_2035_31045175\n4012 cargo_2035_2463514c\n4013 cargo_2035_25162c77\n4014 cargo_2035_25325fbb\n4015 cargo_2035_28501030\n4016 cargo_2035_29126103\n4017 cargo_2035_2773423f\n4018 cargo_2035_28097bde\n4019 cargo_2035_25648081\n4020 cargo_2035_26509f1a\n4021 cargo_2035_28099adf\n4022 cargo_2035_28619cab\n4023 cargo_2035_289869a1\n4024 cargo_2035_29219965\n4025 cargo_2035_29307aa3\n4026 cargo_2035_30959c64\n4027 cargo_2035_2464089a\n4028 cargo_2035_251667de\n4029 cargo_2035_25333fed\n4030 cargo_2035_26796f15\n4031 cargo_2035_28505516\n4032 cargo_2035_291309f9\n4033 cargo_2035_30134eb2\n4034 cargo_2035_31058d76\n4035 cargo_2035_25407174\n4036 cargo_2035_25674e25\n4037 cargo_2035_25700195\n4038 cargo_2035_27136743\n4039 cargo_2035_27923e81\n4040 cargo_2035_28989e68\n4041 cargo_2035_29055cb1\n4042 cargo_2035_292220eb\n4043 cargo_2035_24642cab\n4044 cargo_2035_251691ce\n4045 cargo_2035_25338da8\n4046 cargo_2035_28507fcb\n4047 cargo_2035_29132922\n4048 cargo_2035_30928e53\n4049 cargo_2035_31063fbe\n4050 cargo_2035_2464627f\n4051 cargo_2035_25173ebe\n4052 cargo_2035_25347cd5\n4053 cargo_2035_28401e24\n4054 cargo_2035_28512999\n4055 cargo_2035_291379e0\n4056 cargo_2035_24649458\n4057 cargo_2035_25175d52\n4058 cargo_2035_25351d51\n4059 cargo_2035_28403b14\n4060 cargo_2035_2851434e\n4061 cargo_2035_29139f57\n4062 cargo_2035_2955871d\n4063 cargo_2035_31076def\n4064 cargo_2035_24653e4e\n4065 cargo_2035_25180a30\n4066 cargo_2035_25360915\n4067 cargo_2035_26220299\n4068 cargo_2035_285188d6\n4069 cargo_2035_291430ad\n4070 cargo_2035_29563229\n4071 cargo_2035_30948989\n4072 cargo_2035_31085392\n4073 cargo_2035_271481f4\n4074 cargo_2035_28141e9c\n4075 cargo_2035_27669b28\n4076 cargo_2035_27565c33\n4077 cargo_2035_24096e9c\n4078 cargo_2035_24279b99\n4079 cargo_2035_24819223\n4080 cargo_2035_26258fa4\n4081 cargo_2035_264850d0\n4082 cargo_2035_2728187d\n4083 cargo_2035_27886456\n4084 cargo_2035_294980f2\n4085 cargo_2035_27701110\n4086 cargo_2035_27641289\n4087 cargo_2035_27778be3\n4088 cargo_2035_26630594\n4089 cargo_2035_2754616c\n4090 cargo_2035_27695e0a\n4091 cargo_2035_29687240\n4092 cargo_2035_30523c2b\n4093 cargo_2035_263393bf\n4094 cargo_2035_2717130b\n4095 cargo_2035_27699b7e\n4096 cargo_2035_29436a50\n4097 cargo_2035_297006dc\n4098 cargo_2035_30527791\n4099 cargo_2035_24830604\n4100 cargo_2035_2576374a\n4101 cargo_2035_259663b0\n4102 cargo_2035_2611836a\n4103 cargo_2035_26344dec\n4104 cargo_2035_29172a4f\n4105 cargo_2035_29438ec0\n4106 cargo_2035_30529e66\n4107 cargo_2035_31156e4e\n4108 cargo_2035_248345bd\n4109 cargo_2035_25687f46\n4110 cargo_2035_25970a11\n4111 cargo_2035_260026f9\n4112 cargo_2035_261229a8\n4113 cargo_2035_2917602d\n4114 cargo_2035_294428b8\n4115 cargo_2035_296596b8\n4116 cargo_2035_31160a12\n4117 cargo_2035_29646776\n4118 cargo_2035_29649b9b\n4119 cargo_2035_29650857\n4120 cargo_2035_248615d0\n4121 cargo_2035_25768b4f\n4122 cargo_2035_25793fbf\n4123 cargo_2035_26157095\n4124 cargo_2035_2655634e\n4125 cargo_2035_26590374\n4126 cargo_2035_28637399\n4127 cargo_2035_2906937e\n4128 cargo_2035_30203441\n4129 cargo_2035_3002241c\n4130 cargo_2035_300260a9\n4131 cargo_2035_283303be\n4132 cargo_2035_29398e31\n4133 cargo_2035_29858978\n4134 cargo_2035_283356bc\n4135 cargo_2035_294020eb\n4136 cargo_2035_29863dcd\n4137 cargo_2035_249049aa\n4138 cargo_2035_250883d0\n4139 cargo_2035_28437317\n4140 cargo_2035_30385e81\n4141 cargo_2035_24926945\n4142 cargo_2035_24950c2b\n4143 cargo_2035_27096cbb\n4144 cargo_2035_27167a4e\n4145 cargo_2035_24886540\n4146 cargo_2035_30031b94\n4147 cargo_2035_248887ca\n4148 cargo_2035_25095618\n4149 cargo_2035_26479f36\n4150 cargo_2035_27103e73\n4151 cargo_2035_2846824e\n4152 cargo_2035_303924ee\n4153 cargo_2035_24890253\n4154 cargo_2035_258127bd\n4155 cargo_2035_2489229e\n4156 cargo_2035_25097cf5\n4157 cargo_2035_25582e91\n4158 cargo_2035_258149f2\n4159 cargo_2035_26341120\n4160 cargo_2035_268960c9\n4161 cargo_2035_27105f51\n4162 cargo_2035_27250292\n4163 cargo_2035_27272043\n4164 cargo_2035_284700fc\n4165 cargo_2035_30394d9b\n4166 cargo_2035_30866514\n4167 cargo_2035_248994de\n4168 cargo_2035_258217f3\n4169 cargo_2035_24901e53\n4170 cargo_2035_251011a8\n4171 cargo_2035_255858c8\n4172 cargo_2035_2582374f\n4173 cargo_2035_27067848\n4174 cargo_2035_27254eea\n4175 cargo_2035_284414b9\n4176 cargo_2035_30398aa7\n4177 cargo_2035_30870365\n4178 cargo_2035_24903504\n4179 cargo_2035_258259b1\n4180 cargo_2035_26403821\n4181 cargo_2035_26866b08\n4182 cargo_2035_293604e6\n4183 cargo_2035_249064db\n4184 cargo_2035_25104023\n4185 cargo_2035_25828070\n4186 cargo_2035_2602221a\n4187 cargo_2035_2706971d\n4188 cargo_2035_27257191\n4189 cargo_2035_272830a1\n4190 cargo_2035_284437b9\n4191 cargo_2035_304011fc\n4192 cargo_2035_30872552\n4193 cargo_2035_24908db7\n4194 cargo_2035_25830628\n4195 cargo_2035_24910fe6\n4196 cargo_2035_25589ca9\n4197 cargo_2035_26024f61\n4198 cargo_2035_27259fbe\n4199 cargo_2035_27288e8b\n4200 cargo_2035_284457c7\n4201 cargo_2035_29362122\n4202 cargo_2035_304038a7\n4203 cargo_2035_30874d9f\n4204 cargo_2035_249126e4\n4205 cargo_2035_257323b3\n4206 cargo_2035_258334f4\n4207 cargo_2035_260256c6\n4208 cargo_2035_27234101\n4209 cargo_2035_249144c2\n4210 cargo_2035_25835f67\n4211 cargo_2035_26027a5e\n4212 cargo_2035_2707320e\n4213 cargo_2035_27256a4d\n4214 cargo_2035_272927be\n4215 cargo_2035_28447775\n4216 cargo_2035_2491771b\n4217 cargo_2035_2583619d\n4218 cargo_2035_27260cb3\n4219 cargo_2035_3046743a\n4220 cargo_2035_23980ddb\n4221 cargo_2035_24918446\n4222 cargo_2035_254639fb\n4223 cargo_2035_2583810a\n4224 cargo_2035_260288d3\n4225 cargo_2035_26437bd1\n4226 cargo_2035_26881b70\n4227 cargo_2035_27261600\n4228 cargo_2035_283134ee\n4229 cargo_2035_28830df4\n4230 cargo_2035_300012b7\n4231 cargo_2035_3014726c\n4232 cargo_2035_249211b8\n4233 cargo_2035_25841300\n4234 cargo_2035_272641b7\n4235 cargo_2035_24925592\n4236 cargo_2035_25845b7f\n4237 cargo_2035_260321ed\n4238 cargo_2035_27079fe8\n4239 cargo_2035_27227813\n4240 cargo_2035_3054745a\n4241 cargo_2035_26984023\n4242 cargo_2035_26672e78\n4243 cargo_2035_2698869f\n4244 cargo_2035_27006851\n4245 cargo_2035_25229c36\n4246 cargo_2035_27464d5a\n4247 cargo_2035_27810437\n4248 cargo_2035_29527a36\n4249 cargo_2035_31060614\n4250 cargo_2035_24962b83\n4251 cargo_2035_28678dd7\n4252 cargo_2035_29109a9d\n4253 cargo_2035_30254ce1\n4254 cargo_2035_2497357e\n4255 cargo_2035_252624a2\n4256 cargo_2035_25291b11\n4257 cargo_2035_27467bc3\n4258 cargo_2035_27843d26\n4259 cargo_2035_286791f6\n4260 cargo_2035_3025500c\n4261 cargo_2035_249846ef\n4262 cargo_2035_28681870\n4263 cargo_2035_2911155d\n4264 cargo_2035_30257de4\n4265 cargo_2035_249954f8\n4266 cargo_2035_2526694d\n4267 cargo_2035_252979a2\n4268 cargo_2035_27469a17\n4269 cargo_2035_278479e2\n4270 cargo_2035_28682e4c\n4271 cargo_2035_30258620\n4272 cargo_2035_25004e40\n4273 cargo_2035_251492bf\n4274 cargo_2035_2868367c\n4275 cargo_2035_291143d7\n4276 cargo_2035_3025997f\n4277 cargo_2035_28067de6\n4278 cargo_2035_2500531d\n4279 cargo_2035_25208d8a\n4280 cargo_2035_253027d7\n4281 cargo_2035_27471938\n4282 cargo_2035_2778947a\n4283 cargo_2035_28684dc0\n4284 cargo_2035_30260350\n4285 cargo_2035_25006809\n4286 cargo_2035_286857c7\n4287 cargo_2035_29116502\n4288 cargo_2035_30261f0b\n4289 cargo_2035_2495237b\n4290 cargo_2035_28687d59\n4291 cargo_2035_29118079\n4292 cargo_2035_30263e22\n4293 cargo_2035_249545bd\n4294 cargo_2035_28689082\n4295 cargo_2035_29120663\n4296 cargo_2035_30265b44\n4297 cargo_2035_2495590b\n4298 cargo_2035_25214b24\n4299 cargo_2035_253157f8\n4300 cargo_2035_2747885b\n4301 cargo_2035_277951a7\n4302 cargo_2035_28690714\n4303 cargo_2035_30266ac0\n4304 cargo_2035_24956173\n4305 cargo_2035_28692fdd\n4306 cargo_2035_29122bbe\n4307 cargo_2035_3026839c\n4308 cargo_2035_249586eb\n4309 cargo_2035_28694036\n4310 cargo_2035_3027079e\n4311 cargo_2035_30912130\n4312 cargo_2035_249600fa\n4313 cargo_2035_28696b50\n4314 cargo_2035_302722fc\n4315 cargo_2035_30916888\n4316 cargo_2035_2496112e\n4317 cargo_2035_25221e81\n4318 cargo_2035_25328f66\n4319 cargo_2035_2748502e\n4320 cargo_2035_27802e52\n4321 cargo_2035_28697d72\n4322 cargo_2035_302733ff\n4323 cargo_2035_24963dcb\n4324 cargo_2035_28698f37\n4325 cargo_2035_3027437a\n4326 cargo_2035_24965df2\n4327 cargo_2035_28700e86\n4328 cargo_2035_302761f0\n4329 cargo_2035_24966eac\n4330 cargo_2035_2522591d\n4331 cargo_2035_25337827\n4332 cargo_2035_26797e7b\n4333 cargo_2035_27489a0c\n4334 cargo_2035_278065d4\n4335 cargo_2035_28701732\n4336 cargo_2035_301366ed\n4337 cargo_2035_30277d07\n4338 cargo_2035_24967a51\n4339 cargo_2035_267984e0\n4340 cargo_2035_28703c87\n4341 cargo_2035_30137503\n4342 cargo_2035_302797bb\n4343 cargo_2035_30930746\n4344 cargo_2035_24968b44\n4345 cargo_2035_252271b1\n4346 cargo_2035_25341bfe\n4347 cargo_2035_26799bee\n4348 cargo_2035_27491387\n4349 cargo_2035_27808a56\n4350 cargo_2035_2823497b\n4351 cargo_2035_28704e2b\n4352 cargo_2035_30280a1e\n4353 cargo_2035_30932ebf\n4354 cargo_2035_25546307\n4355 cargo_2035_26906f37\n4356 cargo_2035_27956e39\n4357 cargo_2035_281099ec\n4358 cargo_2035_28759679\n4359 cargo_2035_29470421\n4360 cargo_2035_297811c3\n4361 cargo_2035_300830e7\n4362 cargo_2035_24970172\n4363 cargo_2035_25230171\n4364 cargo_2035_253465e2\n4365 cargo_2035_268012e0\n4366 cargo_2035_27493b8c\n4367 cargo_2035_27811279\n4368 cargo_2035_28706be9\n4369 cargo_2035_30282a37\n4370 cargo_2035_249716bb\n4371 cargo_2035_26803f1b\n4372 cargo_2035_2870703a\n4373 cargo_2035_30283bb5\n4374 cargo_2035_3093725a\n4375 cargo_2035_24974146\n4376 cargo_2035_26805c8d\n4377 cargo_2035_287092a2\n4378 cargo_2035_30285a50\n4379 cargo_2035_24975494\n4380 cargo_2035_25234034\n4381 cargo_2035_253545ff\n4382 cargo_2035_268068c1\n4383 cargo_2035_274982b5\n4384 cargo_2035_278158ce\n4385 cargo_2035_28710f0a\n4386 cargo_2035_29252437\n4387 cargo_2035_30286bc9\n4388 cargo_2035_2497699d\n4389 cargo_2035_26807be2\n4390 cargo_2035_28711db6\n4391 cargo_2035_30287ee8\n4392 cargo_2035_24978bbb\n4393 cargo_2035_28714686\n4394 cargo_2035_30169e6e\n4395 cargo_2035_30290bfe\n4396 cargo_2035_3094919a\n4397 cargo_2035_24980adf\n4398 cargo_2035_25182f61\n4399 cargo_2035_287165aa\n4400 cargo_2035_3017173f\n4401 cargo_2035_302927d2\n4402 cargo_2035_30896070\n4403 cargo_2035_2498109b\n4404 cargo_2035_2524172f\n4405 cargo_2035_25368bed\n4406 cargo_2035_27504c74\n4407 cargo_2035_27822c33\n4408 cargo_2035_28717df1\n4409 cargo_2035_2926329b\n4410 cargo_2035_301728c4\n4411 cargo_2035_3029376e\n4412 cargo_2035_24983403\n4413 cargo_2035_25243b5b\n4414 cargo_2035_25372727\n4415 cargo_2035_27507939\n4416 cargo_2035_27824da1\n4417 cargo_2035_28235740\n4418 cargo_2035_28719e33\n4419 cargo_2035_29266f08\n4420 cargo_2035_301749e3\n4421 cargo_2035_30295d47\n4422 cargo_2035_249884c2\n4423 cargo_2035_25247eaf\n4424 cargo_2035_25381199\n4425 cargo_2035_275117eb\n4426 cargo_2035_27828ffa\n4427 cargo_2035_2872309a\n4428 cargo_2035_29275d67\n4429 cargo_2035_301785a9\n4430 cargo_2035_30299577\n4431 cargo_2035_30721d2e\n4432 cargo_2035_311066e6\n4433 cargo_2035_249913f3\n4434 cargo_2035_25387aec\n4435 cargo_2035_29281c64\n4436 cargo_2035_30125b3c\n4437 cargo_2035_2499386c\n4438 cargo_2035_252729bc\n4439 cargo_2035_2824165f\n4440 cargo_2035_292841fc\n4441 cargo_2035_30127d42\n4442 cargo_2035_276566d1\n4443 cargo_2035_27568e5d\n4444 cargo_2035_297418ee\n4445 cargo_2035_27572a45\n4446 cargo_2035_29743bb5\n4447 cargo_2035_307597e4\n4448 cargo_2035_30761fc6\n4449 cargo_2035_311757d0\n4450 cargo_2035_265337dc\n4451 cargo_2035_26718a11\n4452 cargo_2035_28224554\n4453 cargo_2035_27962f56\n4454 cargo_2035_28124c5b\n4455 cargo_2035_29478d1a\n4456 cargo_2035_300948ad\n4457 cargo_2035_2505467c\n4458 cargo_2035_2555214c\n4459 cargo_2035_262042bb\n4460 cargo_2035_264961b4\n4461 cargo_2035_28126af7\n4462 cargo_2035_28768aa2\n4463 cargo_2035_29479d60\n4464 cargo_2035_29787ff3\n4465 cargo_2035_308405ca\n4466 cargo_2035_25063b2c\n4467 cargo_2035_281299ad\n4468 cargo_2035_29321553\n4469 cargo_2035_2997353d\n4470 cargo_2035_30319583\n4471 cargo_2035_25067560\n4472 cargo_2035_26501425\n4473 cargo_2035_268370b6\n4474 cargo_2035_28137a66\n4475 cargo_2035_28194839\n4476 cargo_2035_293254ee\n4477 cargo_2035_29977fb8\n4478 cargo_2035_3032335e\n4479 cargo_2035_2506900e\n4480 cargo_2035_265032a9\n4481 cargo_2035_28142948\n4482 cargo_2035_3010513f\n4483 cargo_2035_30325e6f\n4484 cargo_2035_250456a2\n4485 cargo_2035_26188c73\n4486 cargo_2035_28146de9\n4487 cargo_2035_28617b11\n4488 cargo_2035_29981859\n4489 cargo_2035_30327dbc\n4490 cargo_2035_25047c63\n4491 cargo_2035_26210f98\n4492 cargo_2035_28151c14\n4493 cargo_2035_286392c8\n4494 cargo_2035_29984ffa\n4495 cargo_2035_2505143d\n4496 cargo_2035_26217c4e\n4497 cargo_2035_27154bd0\n4498 cargo_2035_28159dea\n4499 cargo_2035_28645f9d\n4500 cargo_2035_29011aab\n4501 cargo_2035_2998825e\n4502 cargo_2035_300559dc\n4503 cargo_2035_303342b5\n4504 cargo_2035_25079aad\n4505 cargo_2035_255698d7\n4506 cargo_2035_29391d21\n4507 cargo_2035_30376286\n4508 cargo_2035_25142d1d\n4509 cargo_2035_28676ac4\n4510 cargo_2035_29107662\n4511 cargo_2035_30252a42\n4512 cargo_2035_25147c9f\n4513 cargo_2035_2529486d\n4514 cargo_2035_28544ad8\n4515 cargo_2035_3101914e\n4516 cargo_2035_25405481\n4517 cargo_2035_25672507\n4518 cargo_2035_279215dc\n4519 cargo_2035_290536e9\n4520 cargo_2035_29220802\n4521 cargo_2035_2977952d\n4522 cargo_2035_2541043a\n4523 cargo_2035_25756033\n4524 cargo_2035_26145914\n4525 cargo_2035_26196fcf\n4526 cargo_2035_263845f1\n4527 cargo_2035_27138ada\n4528 cargo_2035_293121ae\n4529 cargo_2035_29874c8b\n4530 cargo_2035_29914f17\n4531 cargo_2035_30800b66\n4532 cargo_2035_26197540\n4533 cargo_2035_269247f2\n4534 cargo_2035_281138c1\n4535 cargo_2035_28761e71\n4536 cargo_2035_29472ee7\n4537 cargo_2035_251848e6\n4538 cargo_2035_25369512\n4539 cargo_2035_26224390\n4540 cargo_2035_28523192\n4541 cargo_2035_29148459\n4542 cargo_2035_29567bef\n4543 cargo_2035_251884aa\n4544 cargo_2035_253778c7\n4545 cargo_2035_262289cd\n4546 cargo_2035_2827366d\n4547 cargo_2035_28527f5a\n4548 cargo_2035_29152a8a\n4549 cargo_2035_29571903\n4550 cargo_2035_30718061\n4551 cargo_2035_3110239d\n4552 cargo_2035_2519114d\n4553 cargo_2035_253822af\n4554 cargo_2035_26231141\n4555 cargo_2035_28277bd0\n4556 cargo_2035_285297e3\n4557 cargo_2035_291541ba\n4558 cargo_2035_2957417d\n4559 cargo_2035_3110783e\n4560 cargo_2035_25193314\n4561 cargo_2035_253865fc\n4562 cargo_2035_26233af0\n4563 cargo_2035_28282a50\n4564 cargo_2035_284197c9\n4565 cargo_2035_2853151a\n4566 cargo_2035_291576ed\n4567 cargo_2035_29576332\n4568 cargo_2035_31110ab7\n4569 cargo_2035_26215757\n4570 cargo_2035_279708b8\n4571 cargo_2035_28155e2d\n4572 cargo_2035_28643282\n4573 cargo_2035_2998663e\n4574 cargo_2035_30332424\n4575 cargo_2035_25195f6c\n4576 cargo_2035_252717b1\n4577 cargo_2035_262353a8\n4578 cargo_2035_2828633e\n4579 cargo_2035_285348cd\n4580 cargo_2035_29578c30\n4581 cargo_2035_28656cb8\n4582 cargo_2035_30232b8e\n4583 cargo_2035_25218b47\n4584 cargo_2035_25323abd\n4585 cargo_2035_2746385a\n4586 cargo_2035_27799772\n4587 cargo_2035_2867577c\n4588 cargo_2035_30251c63\n4589 cargo_2035_2808436d\n4590 cargo_2035_25251ce8\n4591 cargo_2035_27466ccf\n4592 cargo_2035_27832bd7\n4593 cargo_2035_295301fc\n4594 cargo_2035_31104424\n4595 cargo_2035_252651bf\n4596 cargo_2035_27468581\n4597 cargo_2035_27846940\n4598 cargo_2035_29532ee9\n4599 cargo_2035_31020778\n4600 cargo_2035_25267308\n4601 cargo_2035_27470bb1\n4602 cargo_2035_27848e77\n4603 cargo_2035_28436303\n4604 cargo_2035_29534dc6\n4605 cargo_2035_310248b8\n4606 cargo_2035_25209607\n4607 cargo_2035_274729db\n4608 cargo_2035_27790895\n4609 cargo_2035_29536c79\n4610 cargo_2035_310297de\n4611 cargo_2035_28076174\n4612 cargo_2035_3006062b\n4613 cargo_2035_252118d9\n4614 cargo_2035_274754f6\n4615 cargo_2035_277920ff\n4616 cargo_2035_28382a65\n4617 cargo_2035_29538cf9\n4618 cargo_2035_31033cc7\n4619 cargo_2035_25213839\n4620 cargo_2035_274772f4\n4621 cargo_2035_27794891\n4622 cargo_2035_28384012\n4623 cargo_2035_29541590\n4624 cargo_2035_310370ab\n4625 cargo_2035_252159b4\n4626 cargo_2035_2747971a\n4627 cargo_2035_27796dec\n4628 cargo_2035_28386f11\n4629 cargo_2035_2954341c\n4630 cargo_2035_310428b5\n4631 cargo_2035_25217c5e\n4632 cargo_2035_274810ef\n4633 cargo_2035_277984ff\n4634 cargo_2035_295458e3\n4635 cargo_2035_306050d4\n4636 cargo_2035_31046133\n4637 cargo_2035_25220e0f\n4638 cargo_2035_27483b37\n4639 cargo_2035_27801a5e\n4640 cargo_2035_28391b4c\n4641 cargo_2035_29547e5a\n4642 cargo_2035_30129c95\n4643 cargo_2035_30608c5b\n4644 cargo_2035_31051dd0\n4645 cargo_2035_25222c51\n4646 cargo_2035_27486d56\n4647 cargo_2035_27803837\n4648 cargo_2035_29549fce\n4649 cargo_2035_3061099f\n4650 cargo_2035_31055ddb\n4651 cargo_2035_25224798\n4652 cargo_2035_27488a52\n4653 cargo_2035_27805373\n4654 cargo_2035_295529ea\n4655 cargo_2035_301354fe\n4656 cargo_2035_310598ab\n4657 cargo_2035_310613a3\n4658 cargo_2035_2522683a\n4659 cargo_2035_27490c6e\n4660 cargo_2035_278070bc\n4661 cargo_2035_28397f6c\n4662 cargo_2035_2955453b\n4663 cargo_2035_30614cc6\n4664 cargo_2035_31064a2a\n4665 cargo_2035_25228b0e\n4666 cargo_2035_274929b8\n4667 cargo_2035_278097a4\n4668 cargo_2035_31068235\n4669 cargo_2035_25231e91\n4670 cargo_2035_27494e07\n4671 cargo_2035_27812ae5\n4672 cargo_2035_284025d5\n4673 cargo_2035_29557a54\n4674 cargo_2035_30619620\n4675 cargo_2035_310739f8\n4676 cargo_2035_26831735\n4677 cargo_2035_2812071d\n4678 cargo_2035_29476027\n4679 cargo_2035_29994ca4\n4680 cargo_2035_30091058\n4681 cargo_2035_2523330f\n4682 cargo_2035_27497c8c\n4683 cargo_2035_27814dbb\n4684 cargo_2035_284041c4\n4685 cargo_2035_29559f10\n4686 cargo_2035_3107737f\n4687 cargo_2035_25235555\n4688 cargo_2035_27499723\n4689 cargo_2035_27816ab6\n4690 cargo_2035_2840690e\n4691 cargo_2035_2925494a\n4692 cargo_2035_2956231b\n4693 cargo_2035_30623c77\n4694 cargo_2035_31081ef9\n4695 cargo_2035_25237e08\n4696 cargo_2035_275010f4\n4697 cargo_2035_278184c3\n4698 cargo_2035_2956418d\n4699 cargo_2035_3062517d\n4700 cargo_2035_31086049\n4701 cargo_2035_252398e0\n4702 cargo_2035_267919c1\n4703 cargo_2035_27503ba2\n4704 cargo_2035_27820a1a\n4705 cargo_2035_2841006e\n4706 cargo_2035_295669f0\n4707 cargo_2035_31090b5f\n4708 cargo_2035_25242d7d\n4709 cargo_2035_268100f0\n4710 cargo_2035_275058b8\n4711 cargo_2035_27823265\n4712 cargo_2035_2926501f\n4713 cargo_2035_2956847e\n4714 cargo_2035_31095ee3\n4715 cargo_2035_25244ca0\n4716 cargo_2035_26812a5c\n4717 cargo_2035_27508c43\n4718 cargo_2035_27825827\n4719 cargo_2035_2827061f\n4720 cargo_2035_29270660\n4721 cargo_2035_29570c6c\n4722 cargo_2035_3109983b\n4723 cargo_2035_2524689b\n4724 cargo_2035_26814cb1\n4725 cargo_2035_27510f7a\n4726 cargo_2035_27827a16\n4727 cargo_2035_282747ea\n4728 cargo_2035_29274647\n4729 cargo_2035_295735c3\n4730 cargo_2035_3110356d\n4731 cargo_2035_25248641\n4732 cargo_2035_26781809\n4733 cargo_2035_275122f9\n4734 cargo_2035_27829110\n4735 cargo_2035_28278c6d\n4736 cargo_2035_284185cc\n4737 cargo_2035_2927880c\n4738 cargo_2035_29575ce1\n4739 cargo_2035_30723715\n4740 cargo_2035_31108bc0\n4741 cargo_2035_26599127\n4742 cargo_2035_281549bf\n4743 cargo_2035_2933034d\n4744 cargo_2035_294856a8\n4745 cargo_2035_29794f15\n4746 cargo_2035_25250f48\n4747 cargo_2035_26783e09\n4748 cargo_2035_27514970\n4749 cargo_2035_27831f8d\n4750 cargo_2035_28283adb\n4751 cargo_2035_29577c34\n4752 cargo_2035_3072632b\n4753 cargo_2035_31111793\n4754 cargo_2035_25253bfc\n4755 cargo_2035_267853ee\n4756 cargo_2035_27516bce\n4757 cargo_2035_27834e1b\n4758 cargo_2035_28287a92\n4759 cargo_2035_29285c16\n4760 cargo_2035_2957954d\n4761 cargo_2035_31114b72\n4762 cargo_2035_2525404e\n4763 cargo_2035_252749fb\n4764 cargo_2035_27518a5f\n4765 cargo_2035_27835938\n4766 cargo_2035_287302ea\n4767 cargo_2035_29160929\n4768 cargo_2035_292868ac\n4769 cargo_2035_30306105\n4770 cargo_2035_27495634\n4771 cargo_2035_286636ad\n4772 cargo_2035_30239f04\n4773 cargo_2035_28667e27\n4774 cargo_2035_29099faf\n4775 cargo_2035_302439a9\n4776 cargo_2035_28672bd1\n4777 cargo_2035_29103fc1\n4778 cargo_2035_30248744\n4779 cargo_2035_2672666b\n4780 cargo_2035_28106a99\n4781 cargo_2035_25269aed\n4782 cargo_2035_25295a57\n4783 cargo_2035_25304f66\n4784 cargo_2035_25308546\n4785 cargo_2035_25313694\n4786 cargo_2035_253179ba\n4787 cargo_2035_25321a14\n4788 cargo_2035_25403e01\n4789 cargo_2035_25670262\n4790 cargo_2035_25696b7e\n4791 cargo_2035_268220e6\n4792 cargo_2035_2713336b\n4793 cargo_2035_27919414\n4794 cargo_2035_28985350\n4795 cargo_2035_290510ce\n4796 cargo_2035_29218bc7\n4797 cargo_2035_30074147\n4798 cargo_2035_30958c6b\n4799 cargo_2035_25330c11\n4800 cargo_2035_301315a9\n4801 cargo_2035_27135850\n4802 cargo_2035_281018b5\n4803 cargo_2035_253351f8\n4804 cargo_2035_25343ba4\n4805 cargo_2035_28245cc8\n4806 cargo_2035_25348083\n4807 cargo_2035_28119e25\n4808 cargo_2035_297855d8\n4809 cargo_2035_2683480a\n4810 cargo_2035_26931386\n4811 cargo_2035_2714484d\n4812 cargo_2035_281277c7\n4813 cargo_2035_29015ee7\n4814 cargo_2035_2536168c\n4815 cargo_2035_292578d5\n4816 cargo_2035_25365154\n4817 cargo_2035_2926152c\n4818 cargo_2035_25370005\n4819 cargo_2035_29264a0f\n4820 cargo_2035_253730f6\n4821 cargo_2035_26226176\n4822 cargo_2035_2826989c\n4823 cargo_2035_28525077\n4824 cargo_2035_2915012f\n4825 cargo_2035_2956946a\n4826 cargo_2035_31098e2b\n4827 cargo_2035_25374fdc\n4828 cargo_2035_284142bf\n4829 cargo_2035_29268cf5\n4830 cargo_2035_3071603b\n4831 cargo_2035_253797f7\n4832 cargo_2035_284169b7\n4833 cargo_2035_29273505\n4834 cargo_2035_307200df\n4835 cargo_2035_25383f86\n4836 cargo_2035_29277841\n4837 cargo_2035_30123357\n4838 cargo_2035_25415e14\n4839 cargo_2035_2576051f\n4840 cargo_2035_26149c03\n4841 cargo_2035_26394084\n4842 cargo_2035_29317b43\n4843 cargo_2035_29708fc6\n4844 cargo_2035_29878db7\n4845 cargo_2035_29918a58\n4846 cargo_2035_30803011\n4847 cargo_2035_25416e22\n4848 cargo_2035_2555115c\n4849 cargo_2035_263956ce\n4850 cargo_2035_279329aa\n4851 cargo_2035_289985d3\n4852 cargo_2035_2970903d\n4853 cargo_2035_29879783\n4854 cargo_2035_2992047b\n4855 cargo_2035_30804be7\n4856 cargo_2035_27648c7b\n4857 cargo_2035_26671779\n4858 cargo_2035_26722ae5\n4859 cargo_2035_2801721a\n4860 cargo_2035_28018c74\n4861 cargo_2035_28227148\n4862 cargo_2035_28584c14\n4863 cargo_2035_27375e72\n4864 cargo_2035_27657b6c\n4865 cargo_2035_27723e32\n4866 cargo_2035_2755556c\n4867 cargo_2035_27559c28\n4868 cargo_2035_297372f5\n4869 cargo_2035_27682afc\n4870 cargo_2035_29638b61\n4871 cargo_2035_26200051\n4872 cargo_2035_27960276\n4873 cargo_2035_28118d3f\n4874 cargo_2035_28764fe7\n4875 cargo_2035_29475ea6\n4876 cargo_2035_2811700d\n4877 cargo_2035_2808294f\n4878 cargo_2035_294573cd\n4879 cargo_2035_30064693\n4880 cargo_2035_25539724\n4881 cargo_2035_28085edd\n4882 cargo_2035_25541209\n4883 cargo_2035_28091df5\n4884 cargo_2035_28750b60\n4885 cargo_2035_2946144a\n4886 cargo_2035_299051bd\n4887 cargo_2035_255701ce\n4888 cargo_2035_293944bd\n4889 cargo_2035_2557179a\n4890 cargo_2035_27092495\n4891 cargo_2035_295054bf\n4892 cargo_2035_25574502\n4893 cargo_2035_2950956c\n4894 cargo_2035_30013631\n4895 cargo_2035_2561922c\n4896 cargo_2035_26409d4c\n4897 cargo_2035_27412b96\n4898 cargo_2035_27761f29\n4899 cargo_2035_28181aca\n4900 cargo_2035_29812927\n4901 cargo_2035_28045f8a\n4902 cargo_2035_2565018d\n4903 cargo_2035_26511524\n4904 cargo_2035_27443ada\n4905 cargo_2035_28103c51\n4906 cargo_2035_286215e1\n4907 cargo_2035_28988f25\n4908 cargo_2035_29221f4e\n4909 cargo_2035_30960cb1\n4910 cargo_2035_25655326\n4911 cargo_2035_26168755\n4912 cargo_2035_2656781e\n4913 cargo_2035_268464f8\n4914 cargo_2035_279719b7\n4915 cargo_2035_2948814f\n4916 cargo_2035_29894038\n4917 cargo_2035_302134a9\n4918 cargo_2035_27948535\n4919 cargo_2035_28145c36\n4920 cargo_2035_29293f38\n4921 cargo_2035_294527c7\n4922 cargo_2035_29773128\n4923 cargo_2035_27673078\n4924 cargo_2035_276770f7\n4925 cargo_2035_25714117\n4926 cargo_2035_27172c1a\n4927 cargo_2035_27550617\n4928 cargo_2035_27702cb4\n4929 cargo_2035_3044768e\n4930 cargo_2035_257460e9\n4931 cargo_2035_2594625b\n4932 cargo_2035_2598494d\n4933 cargo_2035_26414e0c\n4934 cargo_2035_271635a9\n4935 cargo_2035_2818611e\n4936 cargo_2035_28788e42\n4937 cargo_2035_291877d4\n4938 cargo_2035_2934019a\n4939 cargo_2035_29413d7f\n4940 cargo_2035_29817c27\n4941 cargo_2035_30506221\n4942 cargo_2035_3075590a\n4943 cargo_2035_30987fc7\n4944 cargo_2035_31171e1b\n4945 cargo_2035_300178eb\n4946 cargo_2035_277307fe\n4947 cargo_2035_28083917\n4948 cargo_2035_30066ec9\n4949 cargo_2035_295026e5\n4950 cargo_2035_30154103\n4951 cargo_2035_307692d4\n4952 cargo_2035_2701256b\n4953 cargo_2035_27030e75\n4954 cargo_2035_26987021\n4955 cargo_2035_269896dd\n4956 cargo_2035_26675802\n4957 cargo_2035_27011b37\n4958 cargo_2035_279843af\n4959 cargo_2035_28559bda\n4960 cargo_2035_30560d6b\n4961 cargo_2035_2670122a\n4962 cargo_2035_2856701d\n4963 cargo_2035_296129e8\n4964 cargo_2035_26663623\n4965 cargo_2035_26710159\n4966 cargo_2035_27854918\n4967 cargo_2035_28006a7d\n4968 cargo_2035_282164f1\n4969 cargo_2035_29621aac\n4970 cargo_2035_267139b2\n4971 cargo_2035_280109ee\n4972 cargo_2035_282190c1\n4973 cargo_2035_29624926\n4974 cargo_2035_30609362\n4975 cargo_2035_2671490c\n4976 cargo_2035_2801156f\n4977 cargo_2035_2822008a\n4978 cargo_2035_2857892b\n4979 cargo_2035_29625ba9\n4980 cargo_2035_2801447b\n4981 cargo_2035_30924fc8\n4982 cargo_2035_2605955c\n4983 cargo_2035_26724729\n4984 cargo_2035_30673e13\n4985 cargo_2035_26541d47\n4986 cargo_2035_270334a9\n4987 cargo_2035_27034619\n4988 cargo_2035_2825633e\n4989 cargo_2035_258586a0\n4990 cargo_2035_26550dca\n4991 cargo_2035_26652ccd\n4992 cargo_2035_2703752e\n4993 cargo_2035_25859957\n4994 cargo_2035_26054371\n4995 cargo_2035_267398be\n4996 cargo_2035_272121e1\n4997 cargo_2035_27873d7d\n4998 cargo_2035_28597faa\n4999 cargo_2035_30573866\n5000 cargo_2035_30706a64\n5001 cargo_2035_30943975\n5002 cargo_2035_258607e2\n5003 cargo_2035_26654865\n5004 cargo_2035_28034622\n5005 cargo_2035_3094460c\n5006 cargo_2035_25864a99\n5007 cargo_2035_26660dcd\n5008 cargo_2035_27040656\n5009 cargo_2035_2586678b\n5010 cargo_2035_26062c3f\n5011 cargo_2035_26746742\n5012 cargo_2035_28039dda\n5013 cargo_2035_2819034a\n5014 cargo_2035_28602768\n5015 cargo_2035_3067552c\n5016 cargo_2035_30950599\n5017 cargo_2035_31117e26\n5018 cargo_2035_25868b7f\n5019 cargo_2035_26682f18\n5020 cargo_2035_26763f16\n5021 cargo_2035_295969f6\n5022 cargo_2035_30576666\n5023 cargo_2035_2586987c\n5024 cargo_2035_26693379\n5025 cargo_2035_29597134\n5026 cargo_2035_25870bc4\n5027 cargo_2035_260670b8\n5028 cargo_2035_30578cdb\n5029 cargo_2035_30678b81\n5030 cargo_2035_31120920\n5031 cargo_2035_25871c08\n5032 cargo_2035_267657c8\n5033 cargo_2035_267667cd\n5034 cargo_2035_25878c72\n5035 cargo_2035_2607609d\n5036 cargo_2035_26773511\n5037 cargo_2035_272210c7\n5038 cargo_2035_28236391\n5039 cargo_2035_28480eb0\n5040 cargo_2035_30682647\n5041 cargo_2035_311245dd\n5042 cargo_2035_25880141\n5043 cargo_2035_26529f80\n5044 cargo_2035_2674853e\n5045 cargo_2035_27048863\n5046 cargo_2035_2960318a\n5047 cargo_2035_258825f7\n5048 cargo_2035_26082ae6\n5049 cargo_2035_26531501\n5050 cargo_2035_2718772b\n5051 cargo_2035_27877bfa\n5052 cargo_2035_279873bb\n5053 cargo_2035_2820006a\n5054 cargo_2035_25884287\n5055 cargo_2035_2653201c\n5056 cargo_2035_26683e96\n5057 cargo_2035_27050989\n5058 cargo_2035_28551b28\n5059 cargo_2035_2960695b\n5060 cargo_2035_25886c22\n5061 cargo_2035_271890a9\n5062 cargo_2035_29607a5f\n5063 cargo_2035_27671ab8\n5064 cargo_2035_30508015\n5065 cargo_2035_2591107f\n5066 cargo_2035_266231e2\n5067 cargo_2035_276869b4\n5068 cargo_2035_30774ed6\n5069 cargo_2035_25935949\n5070 cargo_2035_25942655\n5071 cargo_2035_2598220f\n5072 cargo_2035_261328fc\n5073 cargo_2035_26291e82\n5074 cargo_2035_26412cd0\n5075 cargo_2035_27159476\n5076 cargo_2035_281846dc\n5077 cargo_2035_287866ed\n5078 cargo_2035_2918543e\n5079 cargo_2035_29338617\n5080 cargo_2035_30504feb\n5081 cargo_2035_30753949\n5082 cargo_2035_311693d8\n5083 cargo_2035_276630b4\n5084 cargo_2035_26034968\n5085 cargo_2035_26039a94\n5086 cargo_2035_30875d13\n5087 cargo_2035_27047822\n5088 cargo_2035_27991e2e\n5089 cargo_2035_28203854\n5090 cargo_2035_28562de2\n5091 cargo_2035_27995a4b\n5092 cargo_2035_28565bf4\n5093 cargo_2035_30905572\n5094 cargo_2035_270216fc\n5095 cargo_2035_309086e5\n5096 cargo_2035_26103907\n5097 cargo_2035_26729393\n5098 cargo_2035_285899d2\n5099 cargo_2035_30616c80\n5100 cargo_2035_30695596\n5101 cargo_2035_26057468\n5102 cargo_2035_26657127\n5103 cargo_2035_2674260e\n5104 cargo_2035_28036bdd\n5105 cargo_2035_307074f9\n5106 cargo_2035_26058365\n5107 cargo_2035_2665850e\n5108 cargo_2035_26743ba6\n5109 cargo_2035_26757fd7\n5110 cargo_2035_27214364\n5111 cargo_2035_28037a4c\n5112 cargo_2035_2826480c\n5113 cargo_2035_30574851\n5114 cargo_2035_3067488c\n5115 cargo_2035_30947435\n5116 cargo_2035_31116776\n5117 cargo_2035_26065727\n5118 cargo_2035_28266815\n5119 cargo_2035_2606999f\n5120 cargo_2035_27217104\n5121 cargo_2035_260711e8\n5122 cargo_2035_27867bb5\n5123 cargo_2035_3067986a\n5124 cargo_2035_31121366\n5125 cargo_2035_26083bfc\n5126 cargo_2035_260865e2\n5127 cargo_2035_27851415\n5128 cargo_2035_27998afe\n5129 cargo_2035_2820242d\n5130 cargo_2035_260872d9\n5131 cargo_2035_27190a75\n5132 cargo_2035_28009041\n5133 cargo_2035_26089b05\n5134 cargo_2035_30689de6\n5135 cargo_2035_3113160d\n5136 cargo_2035_26091da4\n5137 cargo_2035_2847562d\n5138 cargo_2035_26093694\n5139 cargo_2035_26754131\n5140 cargo_2035_271937d4\n5141 cargo_2035_282057f4\n5142 cargo_2035_28476074\n5143 cargo_2035_306906eb\n5144 cargo_2035_3113227e\n5145 cargo_2035_28150b10\n5146 cargo_2035_267077e8\n5147 cargo_2035_24092ad2\n5148 cargo_2035_26254355\n5149 cargo_2035_2648108f\n5150 cargo_2035_272735a5\n5151 cargo_2035_27882e60\n5152 cargo_2035_29494175\n5153 cargo_2035_30033354\n5154 cargo_2035_26438fae\n5155 cargo_2035_27077f91\n5156 cargo_2035_2729965c\n5157 cargo_2035_27895231\n5158 cargo_2035_28451608\n5159 cargo_2035_304048d2\n5160 cargo_2035_26317274\n5161 cargo_2035_27688cdf\n5162 cargo_2035_28178163\n5163 cargo_2035_30516e56\n5164 cargo_2035_23973732\n5165 cargo_2035_27064f1d\n5166 cargo_2035_27274caa\n5167 cargo_2035_28438e2a\n5168 cargo_2035_26434d33\n5169 cargo_2035_27070385\n5170 cargo_2035_27285603\n5171 cargo_2035_28444ecd\n5172 cargo_2035_26457b48\n5173 cargo_2035_29898851\n5174 cargo_2035_281110da\n5175 cargo_2035_29471c3c\n5176 cargo_2035_26986132\n5177 cargo_2035_27005cba\n5178 cargo_2035_279810c7\n5179 cargo_2035_279859e0\n5180 cargo_2035_2819675f\n5181 cargo_2035_2798901c\n5182 cargo_2035_26698828\n5183 cargo_2035_28564b8d\n5184 cargo_2035_26700cb6\n5185 cargo_2035_285667a0\n5186 cargo_2035_30602a7c\n5187 cargo_2035_26702c8c\n5188 cargo_2035_27997b33\n5189 cargo_2035_279996df\n5190 cargo_2035_28208d10\n5191 cargo_2035_28568f00\n5192 cargo_2035_2961347e\n5193 cargo_2035_30603eae\n5194 cargo_2035_267033e4\n5195 cargo_2035_28209177\n5196 cargo_2035_28569a20\n5197 cargo_2035_29614c5a\n5198 cargo_2035_3056326c\n5199 cargo_2035_30910b82\n5200 cargo_2035_2800334d\n5201 cargo_2035_28213a84\n5202 cargo_2035_28573e7d\n5203 cargo_2035_2961838e\n5204 cargo_2035_2671125c\n5205 cargo_2035_28007a33\n5206 cargo_2035_282179c7\n5207 cargo_2035_28577671\n5208 cargo_2035_2962221c\n5209 cargo_2035_26666bba\n5210 cargo_2035_26716532\n5211 cargo_2035_28222feb\n5212 cargo_2035_29627bb0\n5213 cargo_2035_26670d25\n5214 cargo_2035_26720a77\n5215 cargo_2035_296304d9\n5216 cargo_2035_306121c8\n5217 cargo_2035_276754d4\n5218 cargo_2035_266209c9\n5219 cargo_2035_2768406f\n5220 cargo_2035_27020f54\n5221 cargo_2035_270142da\n5222 cargo_2035_2701951c\n5223 cargo_2035_30903e68\n5224 cargo_2035_267690aa\n5225 cargo_2035_2721922a\n5226 cargo_2035_29600337\n5227 cargo_2035_27186030\n5228 cargo_2035_27875365\n5229 cargo_2035_28198c49\n5230 cargo_2035_3068317d\n5231 cargo_2035_31125ff0\n5232 cargo_2035_26749de1\n5233 cargo_2035_27049839\n5234 cargo_2035_28238364\n5235 cargo_2035_305429c3\n5236 cargo_2035_26719f2f\n5237 cargo_2035_28015cf9\n5238 cargo_2035_28225dc1\n5239 cargo_2035_2858132b\n5240 cargo_2035_296294a5\n5241 cargo_2035_30567289\n5242 cargo_2035_2701660a\n5243 cargo_2035_24969979\n5244 cargo_2035_26800b28\n5245 cargo_2035_28705cc9\n5246 cargo_2035_302813a9\n5247 cargo_2035_30934758\n5248 cargo_2035_296416b8\n5249 cargo_2035_26821344\n5250 cargo_2035_28092930\n5251 cargo_2035_28576686\n5252 cargo_2035_276800eb\n5253 cargo_2035_2769154b\n5254 cargo_2035_30518cdb\n5255 cargo_2035_2811483d\n5256 cargo_2035_30088fde\n5257 cargo_2035_27002201\n5258 cargo_2035_269978b8\n5259 cargo_2035_270175ec\n5260 cargo_2035_27023cb7\n5261 cargo_2035_27025135\n5262 cargo_2035_2709769d\n5263 cargo_2035_29507a68\n5264 cargo_2035_27376018\n5265 cargo_2035_276599dd\n5266 cargo_2035_29192c4a\n5267 cargo_2035_27384289\n5268 cargo_2035_27389cfa\n5269 cargo_2035_274843dc\n5270 cargo_2035_28657686\n5271 cargo_2035_288578f3\n5272 cargo_2035_30233d13\n5273 cargo_2035_24178a77\n5274 cargo_2035_274604b8\n5275 cargo_2035_28293025\n5276 cargo_2035_28673411\n5277 cargo_2035_30249c66\n5278 cargo_2035_2769311b\n5279 cargo_2035_305200c4\n5280 cargo_2035_28088a6e\n5281 cargo_2035_300695cb\n5282 cargo_2035_282286c2\n5283 cargo_2035_30568fd9\n5284 cargo_2035_252997d0\n5285 cargo_2035_2871369a\n5286 cargo_2035_28735ded\n5287 cargo_2035_3018758c\n5288 cargo_2035_29529cf6\n5289 cargo_2035_31082498\n5290 cargo_2035_310938e9\n5291 cargo_2035_2938995c\n5292 cargo_2035_286694a7\n5293 cargo_2035_28691976\n5294 cargo_2035_286499eb\n5295 cargo_2035_28665fc1\n5296 cargo_2035_3024190c\n5297 cargo_2035_28670d50\n5298 cargo_2035_30246083\n5299 cargo_2035_28674806\n5300 cargo_2035_29105e81\n5301 cargo_2035_295257da\n5302 cargo_2035_301396b8\n5303 cargo_2035_30250919\n5304 cargo_2035_3018660b\n5305 cargo_2035_30191324\n5306 cargo_2035_25357642\n5307 cargo_2035_29253538\n\n\n\nid1 &lt;- vessel_location_match  %&gt;% \n  select(vessel_hr) %&gt;% \n  rename(id = vessel_hr) \n\nid2 &lt;- vessel_location_match  %&gt;% \n  select(cargo) %&gt;% \n  rename(id = cargo)\n\ncargo_vessel_nodes &lt;- rbind(id1,id2) %&gt;% \n  distinct() \n\ncargo_vessel_edges &lt;- vessel_location_match %&gt;% \n  select(vessel_hr,cargo) %&gt;% \n  distinct() %&gt;%\n  group_by(vessel_hr, cargo) %&gt;%\n  rename(source = vessel_hr, target = cargo)%&gt;%\n  filter(source!=target) %&gt;% \n  ungroup\n\ncargo_vessel_graph &lt;- tbl_graph(nodes = cargo_vessel_nodes,\n                       edges = cargo_vessel_edges,\n                       directed = FALSE)\n\n\ncargo_vessel_graph %&gt;%\n  ggraph(layout = 'nicely') +\n  geom_edge_link() +\n  geom_node_point() + \n  theme_graph()\n\nFinding anomalies in vessel movement by comparing end time (calculated by dwell) with next time (the next time the vessel is detected at the next location).\n\nab_vessel_mvmt &lt;- vessel_location %&gt;%\n  mutate(time = ymd_hms(time)) %&gt;% \n  mutate(next_time = ymd_hms(next_time)) %&gt;% \n  mutate(end_time = ymd_hms(end_time)) %&gt;% \n  filter(end_time != next_time) \n\nab_vessel_mvmt_agg &lt;- ab_vessel_mvmt %&gt;% \n  distinct() %&gt;% \n  group_by(source) %&gt;% \n  summarise(weights = n()) %&gt;%\n  arrange(desc(weights))\nab_vessel_mvmt_agg\n\n# A tibble: 19 × 2\n   source                  weights\n   &lt;chr&gt;                     &lt;int&gt;\n 1 City of Paackland          2816\n 2 City of Lomark             2357\n 3 City of South Paackland    2183\n 4 City of Himark             1555\n 5 City of Haacklee           1287\n 6 Cod Table                  1016\n 7 Nav C                       707\n 8 Exit East                   643\n 9 Wrasse Beds                 588\n10 Nav 2                       515\n11 Tuna Shelf                  505\n12 Nemo Reef                   461\n13 Ghoti Preserve              262\n14 Nav 1                       161\n15 Nav 3                       149\n16 Nav D                       108\n17 Nav A                        53\n18 Nav E                        28\n19 Nav B                        22\n\n\nOverview of Harbor Report\n\ndistinct_harbor_report &lt;- harbor_report_edges %&gt;% \n  select(source,target,date) %&gt;% \n  filter(source %in% unlist(fishing_vessel_list)) %&gt;%\n  distinct() %&gt;% \n  arrange(source, date) %&gt;%\n  mutate(target = fct_infreq(target))\n\n\nggplot(distinct_harbor_report) +\n  geom_bar(aes(x = target))\n\n\n\n\n\n\n\n\nOverview of Vessels Location by Transponder Ping\n\ntransponder_location &lt;- mc2_edges %&gt;% \n  filter(event3 == \"TransponderPing\") %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;%\n  filter(source %in% c(\"City of Haacklee\",\n                       \"City of Lomark\",\n                       \"City of Himark\",\n                       \"City of Paackland\",\n                       \"City of South Paackland\",\n                       \"City of Port Grove\")) %&gt;% \n  select(source, target, time) %&gt;%\n  mutate(source = fct_infreq(source))\n\nggplot(transponder_location) +\n  geom_bar(aes(x = source))\n\n\n\n\n\n\n\n\nA quick comparison between the two bar chart, we can conclude that port activities for fishing vessels are highest at City of Paackland and least at City of Himark. Also, there is no fishing vessels that visits City of Port Grove."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#examine-the-seasonal-trends-and-anomalies-in-the-port-exit-records",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#examine-the-seasonal-trends-and-anomalies-in-the-port-exit-records",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "We examine the cargo_list and realised that there are some records that shows negative tonnage for their cargoes. This is abnormal as all cargoes should have positive qty_tons value.\n\nnegative_ton_cargo_by_city &lt;- cargo_list %&gt;% \n  filter(qty_tons &lt;= 0) %&gt;% \n  arrange(qty_tons) %&gt;% \n  group_by(city) %&gt;% \n  summarise(total_qty_ton_neg = sum(qty_tons)) %&gt;% \n  arrange(total_qty_ton_neg)\n\npositive_ton_cargo_by_city &lt;- cargo_list %&gt;% \n  filter(qty_tons &gt; 0) %&gt;% \n  arrange(qty_tons) %&gt;% \n  group_by(city) %&gt;% \n  summarise(total_qty_ton_pos = sum(qty_tons)) %&gt;% \n  arrange(desc(total_qty_ton_pos))\n\nnegative_ton_cargo_by_city \n\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  &lt;chr&gt;                               &lt;dbl&gt;\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n\npositive_ton_cargo_by_city\n\n# A tibble: 5 × 2\n  city                    total_qty_ton_pos\n  &lt;chr&gt;                               &lt;dbl&gt;\n1 City of Paackland                  34653.\n2 City of Himark                     32839.\n3 City of Lomark                     23721.\n4 City of South Paackland            20790.\n5 City of Haacklee                   14988.\n\n\n\npositive_ton_cargo_by_city$city &lt;- factor(positive_ton_cargo_by_city$city, \n                                           levels = rev(positive_ton_cargo_by_city$city[order(positive_ton_cargo_by_city$total_qty_ton_pos)]))\n\nggplot(positive_ton_cargo_by_city, aes(x = city)) +\n  geom_bar(aes(y = total_qty_ton_pos), \n           stat = \"identity\", \n           position = \"dodge\", fill = \"blue\", alpha = 0.6) +  # Positive quantities\n  labs(title = \"Quantities by City\",\n       x = \"\",\n       y = \"Total Quantity (tons)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThere seems to be suspicious activities going on at each cities when we look at the negative values in qty_ton.\n\nnegative_ton_cargo_by_city\n\n# A tibble: 5 × 2\n  city                    total_qty_ton_neg\n  &lt;chr&gt;                               &lt;dbl&gt;\n1 City of Paackland                  -224. \n2 City of Himark                     -173. \n3 City of South Paackland            -139. \n4 City of Lomark                     -115. \n5 City of Haacklee                    -77.8\n\n\nNext, we will remove the negative quantity and then find the aggregated value by the type of fish, the city, and the date of transaction.\n\nfish_by_port_agg &lt;- cargo_list %&gt;%\n  distinct() %&gt;%\n  filter(qty_tons &gt; 0) %&gt;% \n  group_by(name, city, date) %&gt;%\n  summarise(total_qty_ton = sum(qty_tons)) %&gt;%\n  ungroup() %&gt;% \n  mutate(month = month(date, \n                       label = TRUE, \n                       abbr = TRUE))\n\nSecondly, when we observe the heatmap, we also realised that the data only covers the month from Feb to Nov in year 2035.\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;%\n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n# Function to create a calendar heat map\ncreate_heatmap &lt;- function(data, city, f) {\n  ggplot(data, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in\", city),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n}\n\n\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c)\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#understanding-the-types-of-fish-that-should-be-in-the-market",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#understanding-the-types-of-fish-that-should-be-in-the-market",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "region_fish_species &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"Region\") %&gt;% \n  select(Name, fish_species_present, Activities, kind)\n\n\nword_list &lt;- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"species\", 1:max_elements) \n\nword_df &lt;- as_tibble(word_df) %&gt;% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %&gt;% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %&gt;% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %&gt;% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %&gt;% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %&gt;%\n  mutate_at(vars(species1:species5), trimws)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nregion_fish_species &lt;- region_fish_species %&gt;%\n  cbind(word_df) \n  \nregion_fish_species\n\n                 Name\n1           Cod Table\n2      Ghoti Preserve\n3         Wrasse Beds\n4           Nemo Reef\n5 Don Limpet Preserve\n6          Tuna Shelf\n                                                                                                  fish_species_present\n1                                             Cod/Gadus n.specificatae, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n2                       Wrasse/Labridae n.refert, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Offidiaa/Piscis osseus\n3                                             Wrasse/Labridae n.refert, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n4 Wrasse/Labridae n.refert, Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis\n5  Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Sockfish/Pisces foetida\n6                         Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Harland/Piscis sapidum\n                         Activities                kind species1 species2\n1                Commercial fishing      Fishing Ground      Cod Birdseye\n2     Research, Tourism, Recreation Ecological Preserve   Wrasse Beauvoir\n3                Commercial fishing      Fishing Ground   Wrasse Birdseye\n4               Recreation, Tourism Ecological Preserve   Wrasse     Tuna\n5               Recreation, Tourism Ecological Preserve     Tuna Birdseye\n6 Commercial fishing, Sport fishing      Fishing Ground     Tuna Birdseye\n  species3 species4 species5\n1 Beauvoir     &lt;NA&gt;     &lt;NA&gt;\n2  Helenaa Offidiaa     &lt;NA&gt;\n3 Beauvoir     &lt;NA&gt;     &lt;NA&gt;\n4 Birdseye Beauvoir  Helenaa\n5 Beauvoir  Helenaa Sockfish\n6 Beauvoir  Harland     &lt;NA&gt;\n\n\n\n# Convert data to long format\nregion_fish_species_long &lt;- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long &lt;- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %&gt;% \n  na.omit() %&gt;%\n  mutate_at(vars(Presence), trimws)\n\nVisualising the Species presence in each Region\n\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nFrom the above visualisation, we can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species would have fished illegal. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c) %&gt;% \n    filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\"))\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#understanding-the-types-of-fish-that-should-not-be-in-the-market",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#understanding-the-types-of-fish-that-should-not-be-in-the-market",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "region_fish_species &lt;- mc2_nodes %&gt;% \n  filter(entity3 == \"Region\") %&gt;% \n  select(Name, fish_species_present, Activities, kind)\n\n\nword_list &lt;- strsplit(region_fish_species$fish_species_present, \"\\\\,\")\n\nmax_elements &lt;- max(lengths(word_list))\n\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"species\", 1:max_elements) \n\nword_df &lt;- as_tibble(word_df) %&gt;% \n  mutate(species1 = str_replace(species1, \"/.*\", \"\")) %&gt;% \n  mutate(species2 = str_replace(species2, \"/.*\", \"\")) %&gt;% \n  mutate(species3 = str_replace(species3, \"/.*\", \"\")) %&gt;% \n  mutate(species4 = str_replace(species4, \"/.*\", \"\")) %&gt;% \n  mutate(species5 = str_replace(species5 , \"/.*\", \"\")) %&gt;%\n  mutate_at(vars(species1:species5), trimws)\nclass(word_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nregion_fish_species &lt;- region_fish_species %&gt;%\n  cbind(word_df) \n  \nregion_fish_species\n\n                 Name\n1           Cod Table\n2      Ghoti Preserve\n3         Wrasse Beds\n4           Nemo Reef\n5 Don Limpet Preserve\n6          Tuna Shelf\n                                                                                                  fish_species_present\n1                                             Cod/Gadus n.specificatae, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n2                       Wrasse/Labridae n.refert, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Offidiaa/Piscis osseus\n3                                             Wrasse/Labridae n.refert, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n4 Wrasse/Labridae n.refert, Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis\n5  Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Sockfish/Pisces foetida\n6                         Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Harland/Piscis sapidum\n                         Activities                kind species1 species2\n1                Commercial fishing      Fishing Ground      Cod Birdseye\n2     Research, Tourism, Recreation Ecological Preserve   Wrasse Beauvoir\n3                Commercial fishing      Fishing Ground   Wrasse Birdseye\n4               Recreation, Tourism Ecological Preserve   Wrasse     Tuna\n5               Recreation, Tourism Ecological Preserve     Tuna Birdseye\n6 Commercial fishing, Sport fishing      Fishing Ground     Tuna Birdseye\n  species3 species4 species5\n1 Beauvoir     &lt;NA&gt;     &lt;NA&gt;\n2  Helenaa Offidiaa     &lt;NA&gt;\n3 Beauvoir     &lt;NA&gt;     &lt;NA&gt;\n4 Birdseye Beauvoir  Helenaa\n5 Beauvoir  Helenaa Sockfish\n6 Beauvoir  Harland     &lt;NA&gt;\n\n\n\n# Convert data to long format\nregion_fish_species_long &lt;- pivot_longer(region_fish_species, cols = starts_with(\"species\"), names_to = \"Species\", values_to = \"Presence\")\n\n# Filter out empty values and trim away leading and trailing whitespace\nregion_fish_species_long &lt;- region_fish_species_long[region_fish_species_long$Presence != \"\", ] %&gt;% \n  na.omit() %&gt;%\n  mutate_at(vars(Presence), trimws)\n\nVisualising the Species presence in each Region\n\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nFrom the above visualisation, we can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species would have fished illegal. Below shows the visualisation of the species and qty_ton that flows through each city by months.\n\n# Create an empty list to store heatmaps\nheatmaps &lt;- list()\n\n# Iterate over each city\ncities &lt;- unique(cargo_list$city)\nfor (c in cities) {\n  # Filter the data for the current city\n  heatmap_data &lt;- fish_by_port_agg %&gt;% \n    filter(city == c) %&gt;% \n    filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\"))\n  \n  # Create the heatmap for the current city\n  heatmap &lt;- create_heatmap(heatmap_data, c, name)\n  \n  # Store the heatmap in the list\n  heatmaps[[c]] &lt;- heatmap\n}\n\n# Print or visualize the heatmaps\nfor (c in cities) {\n  print(heatmaps[[c]])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;% \n  filter(name %in% c(\"Sockfish\", \"Offidiaa\", \"Helenaa\")) %&gt;% \n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton))\n\nggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\nFrom this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively.\nProbable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#changes-in-commercial-fishing",
    "href": "Take-home Exercise/Take-home_Ex03/Take-home_Ex03.html#changes-in-commercial-fishing",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Firstly, we take a look at the species caught across the months (Feb to Nov 2035).\n\n# Create an overall Oceanus heat map for all types of fish\nfish_agg &lt;- fish_by_port_agg  %&gt;%\n  distinct() %&gt;%\n  group_by(name,month) %&gt;%\n  summarise(total_qty_ton = sum(total_qty_ton)) \n\noceanus_heatmap &lt;- ggplot(fish_agg, aes(x = month, y = name, fill = total_qty_ton)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n    labs(title = paste(\"Calendar Heatmap for fish in Oceanus\"),\n         x = \"Month of the Year\",\n         y = \"Fish Type\",\n         fill = \"Total Quantity (tons)\") +\n    theme_minimal() +\n  geom_vline(xintercept = \"May\",color = 'red', linetype = 'dashed') +\n  annotate(\"text\", x = \"May\" , y = \"Offidiaa\", label = \"SouthSeafood caught\", angle = 90, vjust = -0.5, hjust = 0.5, color = \"red\")\n\n\n# Order them based on 3 Preserves and 3 Fishing Ground\ndesired_order &lt;- c(\"Ghoti Preserve\", \"Nemo Reef\", \"Don Limpet Preserve\",\"Cod Table\", \"Wrasse Beds\",\"Tuna Shelf\")  \n\nregion_fish_species_long$Name &lt;- factor(region_fish_species_long$Name, levels = desired_order)\n\nspecies_plot &lt;-ggplot(region_fish_species_long, aes(x = Name, \n                                     y = Presence,\n                                     colour = Presence)) +\n  geom_point() +\n  labs(title = \"Species Presence by Name\",\n       x = \"Name\",\n       y = \"Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")\n\n\noceanus_heatmap / species_plot\n\n\n\n\n\n\n\n\nFor recapitulation, we know that Sockfish, Offidiaa, and Helenaa are fish species that are unique to the three Preserves. From the two plots above, we can derive initial conclusion that there is an usual increase in Sockfish catch after SouthSeafood was caught in mid-May. We also see a minor increase in Helenaa between Jun to Aug, and later in Oct to Nov. The spike in Offidiaa catch begins in Sep and grows gradually to Nov. \nCombining the information above, we can make the following two hypothesis about the changes in fishing activities in Oceanus after SouthSeafood was caught:\n\nThe fishing vessels switched to Don Limpet Preserve for IUU fishing. Tell tale sign is the increase in Sockfish catch, which is species unique to Don Limpet Preserve. This also explains the slight increase in Helena catch from Jun. \nThe fishing vessels moved into Ghoti Preserves from Sep onwards for IUU fishing. Tell tale sign is the increase in Offidia catch from Sep, which is species unique to Ghoti Preserve.\n\nFor confirmation, we take a look at the changes to OVLS Transponder Ping, comparing the total pings to various Fishing Grounds and Preserves month by month.\n\ntransponder_ping_edge_long &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(source, target, month) %&gt;% \n  group_by(source, month) %&gt;% \n  summarize(n = n()) \n\n\ntransponder_ping_edge_long %&gt;% \n  mutate(month = as.factor(month)) %&gt;% \n  newggslopegraph(month,n, source,\n                Title = \"Changes in Visit Frequency\",\n                SubTitle = \"across Feb to Nov 2035\",\n                Caption = \"Prepared by: Liang Xiuhao\")\n\n\n\n\n\n\n\n\nIn the line graph below, we observe that the overall fishing vessels activities in the fishing ground and preserves dropped.\n\naverage &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;%\n  mutate(month = month(time)) %&gt;% \n  summarise(average = (n()/10))\n\ntransponder_ping_edge %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;%\n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  group_by(month) %&gt;% \n  summarise(n = as.numeric(n())) %&gt;%\n  ggplot(aes(x = month, y = n)) + \n  geom_line(color = \"blue\") +  \n  geom_point(size = 4, color = \"blue\") +\n  geom_text(aes(label = n), \n            vjust = -1,\n            size = 3) +\n  labs(title = \"Visit Frequency to All Fishing Grounds and Preserves by Month\",\n       x = \"Month\",\n       y = \"Frequency\") +\n  geom_hline(average, \n             yintercept = as.numeric(average), \n             color=\"black\",\n             linetype = 6) +\n  geom_point(x = 5, y = 13366,\n             size = 4, color = \"red\") +\n  geom_text(aes(x = 5, y = 13366, label = \"SouthSeafood caught\"),\n            color = \"red\",\n            hjust = -0.2,\n            size = 3) +\n  geom_text(aes(x = 4.5, y = 12000, label = \"Monthly Average = 11854\"),\n            color = \"black\",\n            size = 3) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nDerive monthly transponder ping:\n\nmonthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  filter(source %in% c(\"Ghoti Preserve\", \n                       \"Nemo Reef\", \n                       \"Don Limpet Preserve\",\n                       \"Cod Table\", \n                       \"Wrasse Beds\",\n                       \"Tuna Shelf\")) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  select(source, target, month) %&gt;% \n  group_by(source, month) %&gt;% \n  summarize(n = n()) \n\n\nmonthly_transponder_ping$month &lt;- factor(monthly_transponder_ping$month)\nmonthly_transponder_ping$source &lt;- factor(monthly_transponder_ping$source,\n                                             levels = c(\"Ghoti Preserve\", \n                                                        \"Nemo Reef\",\n                                                        \"Don Limpet Preserve\",\n                                                        \"Cod Table\",\n                                                        \"Wrasse Beds\",\n                                                        \"Tuna Shelf\"))\n\nhline.data &lt;- monthly_transponder_ping %&gt;% \n  group_by(source) %&gt;%\n  summarise(avgvalue = mean(n))\n\nggplot(monthly_transponder_ping , aes(x = month, \n                                      y = n, \n                                      group = source, \n                                      color = source)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  facet_wrap(~ source, scales = \"free_y\") +  # Facet by 'source'\n  theme_minimal() +\n  labs(title = \"Changes in Visit Frequency by Month by Fishing Vessels\",\n       x = \"Month\",\n       y = \"No. of Visits\",\n       color = \"Source\") +\n  geom_hline(data = hline.data,\n             aes(yintercept = avgvalue),\n             linetype = 6,\n             color = \"black\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"Average\"), \n            hjust = 1, vjust = 1, \n            color = \"black\",\n            size = 3) +\n  geom_vline(aes(xintercept = 4),\n             linetype = 6,\n             color = \"red\",\n             size = 0.5) +\n  geom_text(data = hline.data, \n            aes(x = \"4\", y = avgvalue, label = \"SouthSeafood caught\"), \n            hjust = 1.5, vjust = 1.5,\n            angle = 90,\n            color = \"red\",\n            size = 2)\n\n\n\n\n\n\n\n\nFrom the plot above, we can see that after SouthSeafood was caught in mid-May, there is a drop in activities for all the fishing grounds and preserves immediately after mid-May, except for the increase in Don Limpet Preserve, from 1 in Mar and Jun to 2 observations in Aug. \nLet’s observe for month to month if the dwell time increase for Don Limpet Preserve.\n\ndon_monthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, dwell, time) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  filter(source == \"Don Limpet Preserve\") %&gt;%\n  group_by(month) %&gt;% \n  summarise(dwell_total = sum(dwell)) %&gt;%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Don Limpet by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 6, y = 7500, \n            angle = 15,\n            hjust = -0.3, vjust = -1.5, \n            color = \"black\", size = 4)\n\n\nnemo_monthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, dwell, time) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  filter(source == \"Nemo Reef\") %&gt;%\n  group_by(month) %&gt;% \n  summarise(dwell_total = sum(dwell)) %&gt;%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Nemo Reef by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 5, y = 12500000, \n            angle = -15,\n            hjust = 0.3, \n            color = \"black\", size = 4)\n\n\nghoti_monthly_transponder_ping &lt;- transponder_ping_edge %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(source, dwell, time) %&gt;% \n  mutate(month = month(time)) %&gt;% \n  filter(source == \"Ghoti Preserve\") %&gt;%\n  group_by(month) %&gt;% \n  summarise(dwell_total = sum(dwell)) %&gt;%\n  ggplot(aes(x = month, y = dwell_total)) + \n  geom_line(color = \"blue\") +\n  labs(title = \"Dwell Time in Ghoti by Month\",\n       x = \"Month\",\n       y = \"Total Count\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE,\n              linetype = 6,\n              color = \"black\") +\n  geom_text(data = NULL, aes(label = \"Trend Line\"), \n            x = 8, y = 5000000, \n            angle = -5, \n            color = \"black\", size = 4)\n\n\nnemo_monthly_transponder_ping/ghoti_monthly_transponder_ping\n\n\n\n\n\n\n\n\nFrom the above plots, we observe that for Nemo Reef and Ghoti Preserve, the trend is downards for the amount of time spent by the fishing vessels.\n\nfishing_vessels_in_don &lt;- transponder_ping_edge %&gt;% \n  filter(source == \"Don Limpet Preserve\") %&gt;% \n  filter(target %in% unlist(fishing_vessel_list)) %&gt;% \n  select(target, dwell, date_added, time) %&gt;% \n  mutate(end_time = dwell + time) %&gt;% \n  arrange(time)\nfishing_vessels_in_don\n\n                   target    dwell          date_added                time\n1    yellowperchpiratec59 7413.772 2035-03-04 16:50:54 2035-03-03 16:50:54\n2 arcticgraylingangler094 5037.287 2035-06-20 06:00:00 2035-06-18 06:00:00\n3    whitefishwrangler7df 6149.014 2035-06-20 06:00:00 2035-08-18 06:00:00\n4       bluegillbandita5f 4571.235 2035-08-29 06:00:00 2035-08-27 06:00:00\n             end_time\n1 2035-03-03 18:54:28\n2 2035-06-18 07:23:57\n3 2035-08-18 07:42:29\n4 2035-08-27 07:16:11\n\n\nThere are only 4 records of visits through the OVLS to Don Limpet, once in Mar and Jun, for about 1.5 to 2hrs each, and another 2 in Aug, for about 1.25 to 1.75 hrs each. These record is high inconguent to the growing number of Sockfish that are found in the delivery report from May onwards."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them.\n\n\n\n\n\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually.\n\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\ISSS608\\Hands-on Exercise\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly first 10 records are shown\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html#overview",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html#getting-started",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html#importing-data-into-r",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08.html#importing-data-into-r",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Two data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\ISSS608\\Hands-on Exercise\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly first 10 records are shown\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them.\n\n\n\n\n\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually.\n\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\ISSS608\\Hands-on Exercise\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly first 10 records are shown\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons()\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe sd style is highly affected by outlier(s). the kmeans seems to be a bit more distributed into 6 different clusters.\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from different number of class\n\n\n\n\nAlthough it is good to have resolutions to your choropleth, choose the right number of class will aid in the story telling.\nIn the example above, I use quantile to avoid the problem of outliers.\nThe conclusion is that have too little, like 2 class, barely tells us anything.\nHaving too many, like 20 class, it also dilutes the storytelling as we could not identify any significant clusters/pattern from the map.\n\n\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.5240  0.5691  0.6495  0.6451 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in blue.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#overview",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#getting-started",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#importing-data-into-r",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#importing-data-into-r",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Two data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\ISSS608\\Hands-on Exercise\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly first 10 records are shown\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "Two approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons()\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe sd style is highly affected by outlier(s). the kmeans seems to be a bit more distributed into 6 different clusters.\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from different number of class\n\n\n\n\nAlthough it is good to have resolutions to your choropleth, choose the right number of class will aid in the story telling.\nIn the example above, I use quantile to avoid the problem of outliers.\nThe conclusion is that have too little, like 2 class, barely tells us anything.\nHaving too many, like 20 class, it also dilutes the storytelling as we could not identify any significant clusters/pattern from the map.\n\n\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.5240  0.5691  0.6495  0.6451 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in blue.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#reference",
    "href": "Hands-on Exercise/Hands-on_Ex08/Hands-on_Ex08a.html#reference",
    "title": "Hands On Exercise 8",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html",
    "href": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html",
    "title": "Hands On Exercise 8a",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them.\n\n\n\n\n\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually.\n\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\ISSS608\\Hands-on Exercise\\Hands-on_Ex08a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly first 10 records are shown\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons()\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe sd style is highly affected by outlier(s). the kmeans seems to be a bit more distributed into 6 different clusters.\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from different number of class\n\n\n\n\nAlthough it is good to have resolutions to your choropleth, choose the right number of class will aid in the story telling.\nIn the example above, I use quantile to avoid the problem of outliers.\nThe conclusion is that have too little, like 2 class, barely tells us anything.\nHaving too many, like 20 class, it also dilutes the storytelling as we could not identify any significant clusters/pattern from the map.\n\n\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.5240  0.5691  0.6495  0.6451 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in blue.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#overview",
    "title": "Hands On Exercise 8a",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#getting-started",
    "title": "Hands On Exercise 8a",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#importing-data-into-r",
    "href": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#importing-data-into-r",
    "title": "Hands On Exercise 8a",
    "section": "",
    "text": "Two data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\ISSS608\\Hands-on Exercise\\Hands-on_Ex08a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly first 10 records are shown\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands On Exercise 8a",
    "section": "",
    "text": "Two approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons()\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe sd style is highly affected by outlier(s). the kmeans seems to be a bit more distributed into 6 different clusters.\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from different number of class\n\n\n\n\nAlthough it is good to have resolutions to your choropleth, choose the right number of class will aid in the story telling.\nIn the example above, I use quantile to avoid the problem of outliers.\nThe conclusion is that have too little, like 2 class, barely tells us anything.\nHaving too many, like 20 class, it also dilutes the storytelling as we could not identify any significant clusters/pattern from the map.\n\n\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.5240  0.5691  0.6495  0.6451 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in blue.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#reference",
    "href": "Hands-on Exercise/Hands-on_Ex08a/Hands-on_Ex08a.html#reference",
    "title": "Hands On Exercise 8a",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n\n\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps.\n\n\n\n\nBefore we get started, we need to ensure that tmap package of R and other related R packages have been installed and loaded into R.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\n\n\n\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame.\n\n\n\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn from the argument above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bounding box provides information of the extend of the geospatial data.\n\n\n\n\nTo create an interactive proportional symbol map in R, the view mode of tmap will be used.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\n\n\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\n\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\n\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n\n\n\n\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#overview",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#learning-outcome",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#learning-outcome",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "By the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#getting-started",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "Before we get started, we need to ensure that tmap package of R and other related R packages have been installed and loaded into R.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#geospatial-data-wrangling",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#geospatial-data-wrangling",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "The data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\n\n\n\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame.\n\n\n\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn from the argument above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bounding box provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#drawing-proportional-symbol-map",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#drawing-proportional-symbol-map",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "To create an interactive proportional symbol map in R, the view mode of tmap will be used.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\n\n\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\n\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\n\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n\n\n\n\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#reference",
    "href": "Hands-on Exercise/Hands-on_Ex8b/Hands-on_Ex08b.html#reference",
    "title": "Hands On Exercise 8b",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  }
]