---
title: "Self Practice 3: R for Data Science"
author: "Rydia"
date: "May 13, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 5 Data tidying

## 5.1 Getting started

```{r}
library(tidyverse)
```

## 5.3 Lengthening data

The principles of tidy data might seem so obvious that you wonder if you’ll ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data is untidy. There are two main reasons:

1.  Data is often organized to facilitate some goal other than analysis. For example, it’s common for data to be structured to make data entry, not analysis, easy.

2.  Most people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.

This means that most real analyses will require at least a little tidying. You’ll begin by figuring out what the underlying variables and observations are. Sometimes this is easy; other times you’ll need to consult with the people who originally generated the data. Next, you’ll **pivot** your data into a tidy form, with variables in the columns and observations in the rows.

tidyr provides two functions for pivoting data: [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html). We’ll first start with [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) because it’s the most common case. Let’s dive into some examples.

### **5.3.1 Data in column names**

The `billboard` dataset records the billboard rank of songs in the year 2000:

```{r}
billboard
```

In this dataset, each observation is a song. The first three columns (`artist`, `track` and `date.entered`) are variables that describe the song. Then we have 76 columns (`wk1`-`wk76`) that describe the rank of the song in each week^[1](https://r4ds.hadley.nz/data-tidy#fn1)^. Here, the column names are one variable (the `week`) and the cell values are another (the `rank`).

To tidy this data, we’ll use [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html):

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )
```

After the data, there are three key arguments:

-   `cols` specifies which columns need to be pivoted, i.e. which columns aren’t variables. This argument uses the same syntax as [`select()`](https://dplyr.tidyverse.org/reference/select.html) so here we could use `!c(artist, track, date.entered)` or `starts_with("wk")`.

-   `names_to` names the variable stored in the column names, we named that variable `week`.

-   `values_to` names the variable stored in the cell values, we named that variable `rank`.

Note that in the code `"week"` and `"rank"` are quoted because those are new variables we’re creating, they don’t yet exist in the data when we run the [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) call.

Now let’s turn our attention to the resulting, longer data frame. What happens if a song is in the top 100 for less than 76 weeks? Take 2 Pac’s “Baby Don’t Cry”, for example. The above output suggests that it was only in the top 100 for 7 weeks, and all the remaining weeks are filled in with missing values. These `NA`s don’t really represent unknown observations; they were forced to exist by the structure of the dataset^[2](https://r4ds.hadley.nz/data-tidy#fn2)^, so we can ask [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to get rid of them by setting `values_drop_na = TRUE`:

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )
```

The number of rows is now much lower, indicating that many rows with `NA`s were dropped.

You might also wonder what happens if a song is in the top 100 for more than 76 weeks? We can’t tell from this data, but you might guess that additional columns `wk77`, `wk78`, … would be added to the dataset.

This data is now tidy, but we could make future computation a bit easier by converting values of `week` from character strings to numbers using [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) and [`readr::parse_number()`](https://readr.tidyverse.org/reference/parse_number.html). [`parse_number()`](https://readr.tidyverse.org/reference/parse_number.html) is a handy function that will extract the first number from a string, ignoring all other text.

```{r}
billboard_longer <- billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  ) |> 
  mutate(
    week = parse_number(week)
  )
```
