{
  "hash": "80651f2edc6ca017ae6deffe27bfcd05",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Self Practice 3: R for Data Science\"\nauthor: \"Rydia\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 5 Data tidying\n\n## 5.1 Getting started\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## 5.3 Lengthening data\n\nThe principles of tidy data might seem so obvious that you wonder if you’ll ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data is untidy. There are two main reasons:\n\n1.  Data is often organized to facilitate some goal other than analysis. For example, it’s common for data to be structured to make data entry, not analysis, easy.\n\n2.  Most people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.\n\nThis means that most real analyses will require at least a little tidying. You’ll begin by figuring out what the underlying variables and observations are. Sometimes this is easy; other times you’ll need to consult with the people who originally generated the data. Next, you’ll **pivot** your data into a tidy form, with variables in the columns and observations in the rows.\n\ntidyr provides two functions for pivoting data: [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html). We’ll first start with [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) because it’s the most common case. Let’s dive into some examples.\n\n### **5.3.1 Data in column names**\n\nThe `billboard` dataset records the billboard rank of songs in the year 2000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   <chr>      <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>, …\n```\n\n\n:::\n:::\n\n\nIn this dataset, each observation is a song. The first three columns (`artist`, `track` and `date.entered`) are variables that describe the song. Then we have 76 columns (`wk1`-`wk76`) that describe the rank of the song in each week^[1](https://r4ds.hadley.nz/data-tidy#fn1)^. Here, the column names are one variable (the `week`) and the cell values are another (the `rank`).\n\nTo tidy this data, we’ll use [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   <chr>  <chr>                   <date>       <chr> <dbl>\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows\n```\n\n\n:::\n:::\n\n\nAfter the data, there are three key arguments:\n\n-   `cols` specifies which columns need to be pivoted, i.e. which columns aren’t variables. This argument uses the same syntax as [`select()`](https://dplyr.tidyverse.org/reference/select.html) so here we could use `!c(artist, track, date.entered)` or `starts_with(\"wk\")`.\n\n-   `names_to` names the variable stored in the column names, we named that variable `week`.\n\n-   `values_to` names the variable stored in the cell values, we named that variable `rank`.\n\nNote that in the code `\"week\"` and `\"rank\"` are quoted because those are new variables we’re creating, they don’t yet exist in the data when we run the [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) call.\n\nNow let’s turn our attention to the resulting, longer data frame. What happens if a song is in the top 100 for less than 76 weeks? Take 2 Pac’s “Baby Don’t Cry”, for example. The above output suggests that it was only in the top 100 for 7 weeks, and all the remaining weeks are filled in with missing values. These `NA`s don’t really represent unknown observations; they were forced to exist by the structure of the dataset^[2](https://r4ds.hadley.nz/data-tidy#fn2)^, so we can ask [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to get rid of them by setting `values_drop_na = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   <chr>   <chr>                   <date>       <chr> <dbl>\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n```\n\n\n:::\n:::\n\n\nThe number of rows is now much lower, indicating that many rows with `NA`s were dropped.\n\nYou might also wonder what happens if a song is in the top 100 for more than 76 weeks? We can’t tell from this data, but you might guess that additional columns `wk77`, `wk78`, … would be added to the dataset.\n\nThis data is now tidy, but we could make future computation a bit easier by converting values of `week` from character strings to numbers using [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) and [`readr::parse_number()`](https://readr.tidyverse.org/reference/parse_number.html). [`parse_number()`](https://readr.tidyverse.org/reference/parse_number.html) is a handy function that will extract the first number from a string, ignoring all other text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_longer <- billboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) |> \n  mutate(\n    week = parse_number(week)\n  )\n```\n:::\n\n\nNow that we have all the week numbers in one variable and all the rank values in another, we’re in a good position to visualize how song ranks vary over time. The code is shown below and the result is in [Figure 5.2](https://r4ds.hadley.nz/data-tidy#fig-billboard-ranks). We can see that very few songs stay in the top 100 for more than 20 weeks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_longer |> \n  ggplot(aes(x = week, y = rank, group = track)) + \n  geom_line(alpha = 0.25) + \n  scale_y_reverse()\n```\n\n::: {.cell-output-display}\n![](Self-Practice_03_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### **5.3.2 How does pivoting work?**\n\nNow that you’ve seen how we can use pivoting to reshape our data, let’s take a little time to gain some intuition about what pivoting does to the data. Let’s start with a very simple dataset to make it easier to see what’s happening. Suppose we have three patients with `id`s A, B, and C, and we take two blood pressure measurements on each patient. We’ll create the data with [`tribble()`](https://tibble.tidyverse.org/reference/tribble.html), a handy function for constructing small tibbles by hand:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\n```\n:::\n\n\nWe want our new dataset to have three variables: `id` (already exists), `measurement` (the column names), and `value` (the cell values). To achieve this, we need to pivot `df` longer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_longer <- df |> \n  pivot_longer(\n    cols = starts_with(\"bp\"),\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n```\n:::\n\n\nHow does the reshaping work? It’s easier to see if we think about it column by column. As shown in [Figure 5.3](https://r4ds.hadley.nz/data-tidy#fig-pivot-variables), the values in a column that was already a variable in the original dataset (`id`) need to be repeated, once for each column that is pivoted.\n\n![](images/clipboard-640948894.png)\n\nThe column names become values in a new variable, whose name is defined by `names_to`, as shown in [Figure 5.4](https://r4ds.hadley.nz/data-tidy#fig-pivot-names). They need to be repeated once for each row in the original dataset.\n\n![](images/clipboard-2661205991.png)\n\nThe cell values also become values in a new variable, with a name defined by `values_to`. They are unwound row by row. [Figure 5.5](https://r4ds.hadley.nz/data-tidy#fig-pivot-values) illustrates the process.\n\n![](images/clipboard-3054019362.png)\n\n### **5.3.3 Many variables in column names**\n\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables. For example, take the `who2` dataset, the source of `table1` and friends that you saw above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwho2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,240 × 58\n   country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554 sp_m_5564\n   <chr>       <dbl>    <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n 1 Afghanistan  1980       NA        NA        NA        NA        NA        NA\n 2 Afghanistan  1981       NA        NA        NA        NA        NA        NA\n 3 Afghanistan  1982       NA        NA        NA        NA        NA        NA\n 4 Afghanistan  1983       NA        NA        NA        NA        NA        NA\n 5 Afghanistan  1984       NA        NA        NA        NA        NA        NA\n 6 Afghanistan  1985       NA        NA        NA        NA        NA        NA\n 7 Afghanistan  1986       NA        NA        NA        NA        NA        NA\n 8 Afghanistan  1987       NA        NA        NA        NA        NA        NA\n 9 Afghanistan  1988       NA        NA        NA        NA        NA        NA\n10 Afghanistan  1989       NA        NA        NA        NA        NA        NA\n# ℹ 7,230 more rows\n# ℹ 50 more variables: sp_m_65 <dbl>, sp_f_014 <dbl>, sp_f_1524 <dbl>,\n#   sp_f_2534 <dbl>, sp_f_3544 <dbl>, sp_f_4554 <dbl>, sp_f_5564 <dbl>,\n#   sp_f_65 <dbl>, sn_m_014 <dbl>, sn_m_1524 <dbl>, sn_m_2534 <dbl>,\n#   sn_m_3544 <dbl>, sn_m_4554 <dbl>, sn_m_5564 <dbl>, sn_m_65 <dbl>,\n#   sn_f_014 <dbl>, sn_f_1524 <dbl>, sn_f_2534 <dbl>, sn_f_3544 <dbl>,\n#   sn_f_4554 <dbl>, sn_f_5564 <dbl>, sn_f_65 <dbl>, ep_m_014 <dbl>, …\n```\n\n\n:::\n:::\n\n\nThis dataset, collected by the World Health Organisation, records information about tuberculosis diagnoses. There are two columns that are already variables and are easy to interpret: `country` and `year`. They are followed by 56 columns like `sp_m_014`, `ep_m_4554`, and `rel_m_3544`. If you stare at these columns for long enough, you’ll notice there’s a pattern. Each column name is made up of three pieces separated by `_`. The first piece, `sp`/`rel`/`ep`, describes the method used for the diagnosis, the second piece, `m`/`f` is the `gender` (coded as a binary variable in this dataset), and the third piece, `014`/`1524`/`2534`/`3544`/`4554`/`5564`/`65` is the `age` range (`014` represents 0-14, for example).\n\nSo in this case we have six pieces of information recorded in `who2`: the country and the year (already columns); the method of diagnosis, the gender category, and the age range category (contained in the other column names); and the count of patients in that category (cell values). To organize these six pieces of information in six separate columns, we use [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) with a vector of column names for `names_to` and instructors for splitting the original variable names into pieces for `names_sep` as well as a column name for `values_to`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwho2 |> \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\",\n    values_drop_na = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 76,046 × 6\n   country      year diagnosis gender age   count\n   <chr>       <dbl> <chr>     <chr>  <chr> <dbl>\n 1 Afghanistan  1997 sp        m      014       0\n 2 Afghanistan  1997 sp        m      1524     10\n 3 Afghanistan  1997 sp        m      2534      6\n 4 Afghanistan  1997 sp        m      3544      3\n 5 Afghanistan  1997 sp        m      4554      5\n 6 Afghanistan  1997 sp        m      5564      2\n 7 Afghanistan  1997 sp        m      65        0\n 8 Afghanistan  1997 sp        f      014       5\n 9 Afghanistan  1997 sp        f      1524     38\n10 Afghanistan  1997 sp        f      2534     36\n# ℹ 76,036 more rows\n```\n\n\n:::\n:::\n\n\n### **5.3.4 Data and variable names in the column headers**\n\nThe next step up in complexity is when the column names include a mix of variable values and variable names. For example, take the `household` dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhousehold\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  family dob_child1 dob_child2 name_child1 name_child2\n   <int> <date>     <date>     <chr>       <chr>      \n1      1 1998-11-26 2000-01-29 Susan       Jose       \n2      2 1996-06-22 NA         Mark        <NA>       \n3      3 2002-07-11 2004-04-05 Sam         Seth       \n4      4 2004-10-10 2009-08-27 Craig       Khai       \n5      5 2000-12-05 2005-02-28 Parker      Gracie     \n```\n\n\n:::\n:::\n\n\nThis dataset contains data about five families, with the names and dates of birth of up to two children. The new challenge in this dataset is that the column names contain the names of two variables (`dob`, `name)` and the values of another (`child,` with values 1 or 2). To solve this problem we again need to supply a vector to `names_to` but this time we use the special `\".value\"` sentinel; this isn’t the name of a variable but a unique value that tells [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to do something different. This overrides the usual `values_to` argument to use the first component of the pivoted column name as a variable name in the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhousehold |> \n  pivot_longer(\n    cols = !family, \n    names_to = c(\".value\", \"child\"), \n    names_sep = \"_\", \n    values_drop_na = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  family child  dob        name  \n   <int> <chr>  <date>     <chr> \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n```\n\n\n:::\n:::\n\n\nWe again use `values_drop_na = TRUE`, since the shape of the input forces the creation of explicit missing variables (e.g., for families with only one child).\n\n[Figure 5.7](https://r4ds.hadley.nz/data-tidy#fig-pivot-names-and-values) illustrates the basic idea with a simpler example. When you use `\".value\"` in `names_to`, the column names in the input contribute to both values and variable names in the output.\n\n![](images/clipboard-447651684.png)\n\n## **5.4 Widening data**\n\nSo far we’ve used [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to solve the common class of problems where values have ended up in column names. Next we’ll pivot (HA HA) to [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html), which makes datasets **wider** by increasing columns and reducing rows and helps when one observation is spread across multiple rows. This seems to arise less commonly in the wild, but it does seem to crop up a lot when dealing with governmental data.\n\nWe’ll start by looking at `cms_patient_experience`, a dataset from the Centers of Medicare and Medicaid services that collects data about patient experiences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncms_patient_experience\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 5\n   org_pac_id org_nm                           measure_cd measure_title prf_rate\n   <chr>      <chr>                            <chr>      <chr>            <dbl>\n 1 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       63\n 2 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       87\n 3 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       86\n 4 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       57\n 5 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       85\n 6 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       24\n 7 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       59\n 8 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       85\n 9 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       83\n10 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       63\n# ℹ 490 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncms_patient_experience |> \n  distinct(measure_cd, measure_title)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  measure_cd   measure_title                                                    \n  <chr>        <chr>                                                            \n1 CAHPS_GRP_1  CAHPS for MIPS SSM: Getting Timely Care, Appointments, and Infor…\n2 CAHPS_GRP_2  CAHPS for MIPS SSM: How Well Providers Communicate               \n3 CAHPS_GRP_3  CAHPS for MIPS SSM: Patient's Rating of Provider                 \n4 CAHPS_GRP_5  CAHPS for MIPS SSM: Health Promotion and Education               \n5 CAHPS_GRP_8  CAHPS for MIPS SSM: Courteous and Helpful Office Staff           \n6 CAHPS_GRP_12 CAHPS for MIPS SSM: Stewardship of Patient Resources             \n```\n\n\n:::\n:::\n\n\nNeither of these columns will make particularly great variable names: `measure_cd` doesn’t hint at the meaning of the variable and `measure_title` is a long sentence containing spaces. We’ll use `measure_cd` as the source for our new column names for now, but in a real analysis you might want to create your own variable names that are both short and meaningful.\n\n[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) has the opposite interface to [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html): instead of choosing new column names, we need to provide the existing columns that define the values (`values_from`) and the column name (`names_from)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncms_patient_experience |> \n  pivot_wider(\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 9\n   org_pac_id org_nm           measure_title CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3\n   <chr>      <chr>            <chr>               <dbl>       <dbl>       <dbl>\n 1 0446157747 USC CARE MEDICA… CAHPS for MI…          63          NA          NA\n 2 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          87          NA\n 3 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          86\n 4 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 5 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 6 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 7 0446162697 ASSOCIATION OF … CAHPS for MI…          59          NA          NA\n 8 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          85          NA\n 9 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          83\n10 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          NA\n# ℹ 490 more rows\n# ℹ 3 more variables: CAHPS_GRP_5 <dbl>, CAHPS_GRP_8 <dbl>, CAHPS_GRP_12 <dbl>\n```\n\n\n:::\n:::\n\n\nThe output doesn’t look quite right; we still seem to have multiple rows for each organization. That’s because, we also need to tell [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) which column or columns have values that uniquely identify each row; in this case those are the variables starting with `\"org\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncms_patient_experience |> \n  pivot_wider(\n    id_cols = starts_with(\"org\"),\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   <chr>      <chr>        <dbl>       <dbl>       <dbl>       <dbl>       <dbl>\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 <dbl>\n```\n\n\n:::\n:::\n\n\n### **5.4.1 How does `pivot_wider()` work?**\n\nTo understand how [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) works, let’s again start with a very simple dataset. This time we have two patients with `id`s A and B, we have three blood pressure measurements on patient A and two on patient B:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"B\",        \"bp1\",    140,\n  \"B\",        \"bp2\",    115, \n  \"A\",        \"bp2\",    120,\n  \"A\",        \"bp3\",    105\n)\n```\n:::\n\n\nWe’ll take the values from the `value` column and the names from the `measurement` column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  id      bp1   bp2   bp3\n  <chr> <dbl> <dbl> <dbl>\n1 A       100   120   105\n2 B       140   115    NA\n```\n\n\n:::\n:::\n\n\nTo begin the process [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) needs to first figure out what will go in the rows and columns. The new column names will be the unique values of `measurement`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  distinct(measurement) |> \n  pull()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"bp1\" \"bp2\" \"bp3\"\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Self-Practice_03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}