---
title: "Take Home Exercise 3"
author: "Rydia"
date: "May 13, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# VAST 2024 Mini Challenge 2

## Mini-Challenge 2: Creating Signatures for Geo-Temporal Patterns

Mini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.

The details of the mini challenge can be found [here](https://vast-challenge.github.io/2024/MC2.html).

## Tasks and Questions

FishEye analysts need your help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. Your task is to develop new visual analytics tools and workflows that can be used to discover and understand signatures of different types of behavior. Can you use your tool to visualize a signature of SouthSeafood Express Corp’s illegal behavior? FishEye needs your help to develop a workflow to find other instances of illegal behavior.

1.  FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?

2.  Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.

3.  To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.

4.  How did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?

## 1.0 Data Preparation

## 1.1 Loading R Packages

```{r}
pacman::p_load(tidyverse, jsonlite, DT, lubridate,
               igraph, tidygraph, ggraph, 
               visNetwork, sf)
```

## 1.2 Loading the Data

Loading the .json data using `jsonlite` package.

```{r}
mc2 <- fromJSON("data/MC2/mc2.json")
```
mc2 is a directed multigraph, consists of nodes dataframe and links dataframe.

```{r}
oceanus_map <- read_sf("data/MC2/Oceanus Information/Oceanus Geography.geojson")
```

```{r}
ggplot(oceanus_map) +
  geom_sf(color = "black",
          ) +
  theme_void() +
  geom_sf_text(aes(label = Name), size = 2,
               vjust = 1.5)
```





```{r}
#| eval: FALSE
mc2
```

## 1.3 Extracting the nodes and links dataframes

## 1.3 Extracting the tibbles for nodes and links

```{r}
mc2_nodes_raw <- as_tibble(mc2$nodes)
```

```{r}
mc2_links_raw <- as_tibble(mc2$links)
```

## 1.4 Checking for missing values in data

```{r}
colSums(is.na(mc2_nodes_raw))
```

```{r}
colSums(is.na(mc2_links_raw))
```

## 1.5 Parsing the time with lubridate

As the `_date_added` and `_last_edited_date` contains a mixture of format, we first extract the date in "yyyy-mm-dd" format using `substr`.

```{r}
mc2_nodes_raw <- mc2_nodes_raw |> 
  mutate(`_date_added` = substr(`_date_added`,1,10)) |> 
  mutate(`_date_added` = ymd(`_date_added`)) |> 
  mutate(`_last_edited_date` = substr(`_last_edited_date`,1,10)) |> 
  mutate(`_last_edited_date` = ymd(`_last_edited_date`)) |> 
  mutate(date = ymd(date))
mc2_nodes_raw
```

```{r}

mc2_links_raw <- mc2_links_raw |>
  mutate(`_date_added` = substr(`_date_added`,1,10)) |> 
  mutate(`_date_added` = ymd(`_date_added`)) |> 
  mutate(`_last_edited_date`= substr(`_last_edited_date`,1,10)) |> 
  mutate(`_last_edited_date` = ymd(`_last_edited_date`)) 

mc2_links_raw <- mc2_links_raw |> 
    mutate(time = ymd_hms(time))
mc2_links_raw
```




```{r}
unique_nodes_type <- mc2_nodes_raw |>  distinct(type)
unique_nodes_type
```

```{r}

unique_links_type <- mc2_links_raw |>  distinct(type)
unique_links_type
```

## 1.5 Extracting the required columns for each graph

In this section, we will extract the required column for the following graphs:

1.  Vessel Movements

2.  Harbor Reports

3.  Harbor Import Records

### 1.5.1 Vessel Movements

For vessel movements, we require the node/links types as such:

-   Entity.Vessel:
    -   Entity.Vessel.FishingVessel,
    -   Entity.Vessel.Other ,
    -   Entity.Vessel.Ferry.Passenger,
    -   Entity.Vessel.CargoVessel,
    -   Entity.Vessel.Ferry.Cargo,
    -   Entity.Vessel.Research,
    -   Entity.Vessel.Tour
-   Entity.Location:
    -   Entity.Location.Region,
    -   Entity.Location.City,
    -   Entity.Location.Point
-   Event.TransponderPing:
    -   Event.TransportEvent.TransponderPing

For the Node Type, we will preserve the following fields:

-   Entity.Vessel: Description of the vessel

    -   Name

    -   company: Company that owns the vessel

    -   flag_country: Country the vessel is licensed in

    -   length_overall: meters length of the vessel

    -   tonnage: Gross tonnage of the vessel


-   Entity.Location: Description of a geographic location

    -   Name

    -   Activities: List of common activities in the region

    -   Description: Textual description

    -   fish_species_present: List of fish common found in that area

    -   kind: High-level grouping (city/preserve/etc.)


For the Edge Types, we will preserve the following fields:

-   Event.TransponderPing: Links a vessel to a location via OVLS

    -   time: Start time of the visit

    -   dwell: How long was the vessel in this location



```{r}
vessel_mvmt_vessel_nodes <- mc2_nodes_raw |> 
  filter(str_detect(type,c("Vessel"))) 
```

```{r}
vessel_mvmt_vessel_nodes
```
```{r}
vessel_mvmt_location_nodes <- mc2_nodes_raw |> 
  filter(str_detect(type,c("Location"))) 
vessel_mvmt_location_nodes 
```


```{r}
vessel_mvmt_links <- mc2_links_raw |> 
  filter(type == "Event.TransportEvent.TransponderPing") 
```

```{r}
vessel_mvmt_links
```

### 1.5.2 Harbor Report

```{r}
harbor_report_nodes <- mc2_nodes_raw |> 
  filter(str_detect(type,c("Vessel|Location")))
harbor_report_nodes
```

```{r}
harbor_report_links <- mc2_links_raw |> 
  filter(type == "Event.HarborReport")
harbor_report_links
```
### 1.5.3 Harbor Import Records

```{r}
import_location_nodes <- mc2_nodes_raw |> 
  filter(str_detect(type,c("Location")))
import_location_nodes 
```
```{r}
import_commodity_nodes <- mc2_nodes_raw |> 
  filter(str_detect(type,c("Commodity")))
import_commodity_nodes 
```
```{r}
import_delivery_nodes <- mc2_nodes_raw |> 
  filter(str_detect(type,c("Document")))
import_delivery_nodes 
```

```{r}
import_links <- mc2_links_raw |> 
  filter(type == "Event.Transaction")
import_links
```

## 2.0 Task 1

## 2.1 Flow of fishing vessels

FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports.

```{r}
unique_nodes_type <- vessel_mvmt_vessel_nodes |>  distinct(type)
unique_nodes_type
```
```{r}
fishing_vessels <- vessel_mvmt_vessel_nodes |> 
  filter(type == "Entity.Vessel.FishingVessel") |> 
  distinct(id)
fishing_vessels
```
There is a total of 178 Fishing vessels in Oceanus. 

## 2.2 Fishing ground locations

```{r}
fishing_ground <- import_location_nodes |> 
  filter(kind == "Fishing Ground") 
```

```{r}
non_fishing_ground <- import_location_nodes |> 
  filter(kind == "Ecological Preserve") 
```

There are three fishing grounds:
1.  Cod Table
2.  Wrasse Beds
3.  Tuna Shelf

Fishing outside these fishing grounds are considered illegal fishing. 

```{r}
cargo_vessels <- vessel_mvmt_vessel_nodes |> 
  filter(type == "Entity.Vessel.CargoVessel") |> 
  arrange(desc(tonnage))
cargo_vessels
```
There are 100 cargo vessels, with tonnage ranging from 2,100 to 76,300.

## 2.3 Which fishing vessels frequent the fishing sites

```{r}
vessel_mvmt_links |> 
  filter(source %in% c("Cod Table","Wrasse Beds","Tuna Shelf")) |> 
  group_by(target, source) |> 
  summarise(n = n()) |> 
  arrange(desc(n))
```

## 2.4 Which fishing vessels frequent the non-fishing sites
```{r}
vessel_mvmt_links |> 
  filter(source %in% c("Ghoti Preserve","Nemo Reef", "Don Limpet Preserve")) |> 
  group_by(target, source) |> 
  summarise(n = n()) |> 
  arrange(desc(n))
```


