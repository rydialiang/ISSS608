{
  "hash": "2b638fc423209e19c5583f02a790906a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Rydia\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# VAST 2024 Mini Challenge 2\n\n## Mini-Challenge 2: Creating Signatures for Geo-Temporal Patterns\n\nMini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.\n\nThe details of the mini challenge can be found [here](https://vast-challenge.github.io/2024/MC2.html).\n\n## Tasks and Questions\n\nFishEye analysts need your help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. Your task is to develop new visual analytics tools and workflows that can be used to discover and understand signatures of different types of behavior. Can you use your tool to visualize a signature of SouthSeafood Express Corp’s illegal behavior? FishEye needs your help to develop a workflow to find other instances of illegal behavior.\n\n1.  FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\n\n2.  Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n3.  To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n4.  How did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n## 1.0 Data Preparation\n\n## 1.1 Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, DT, lubridate,\n               igraph, tidygraph, ggraph, \n               visNetwork, sf)\n```\n:::\n\n\n## 1.2 Loading the Data\n\nLoading the .json data using `jsonlite` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2/mc2.json\")\n```\n:::\n\n\nmc2 is a directed multigraph, consists of nodes dataframe and links dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noceanus_map <- read_sf(\"data/MC2/Oceanus Information/Oceanus Geography.geojson\")\n```\n:::\n\n\nLoading the oceanus map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(oceanus_map) +\n  geom_sf(color = \"black\",\n          ) +\n  theme_void() +\n  geom_sf_text(aes(label = Name), size = 2,\n               vjust = 1.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## 1.3 **Wrangling and tidying edges**\n\n### 1.3.1 Extracting edges\n\nFirst, we extract only distinct edges from the tibble *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_data$links %>% \n  distinct()\n```\n:::\n\n\nNext, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <chr> \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nFrom the table above, we can identify some issues with the data:\n\n1.  The columns with date data type are all in character format.\n\n2.  Some columns have names that starts with \"\\_\". These need to be rename to avoid coding issues.\n\n### 1.3.2 Correcting the date data type with `lubridate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$`_last_edited_date` <- as_datetime(mc2_edges$`_last_edited_date`)\nmc2_edges$`_date_added` <- as_datetime(mc2_edges$`_date_added`)\nmc2_edges$date <- as_datetime(mc2_edges$date)\n```\n:::\n\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### 1.3.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.3.4 Splitting words in `type` column\n\nThe code chunk below combined the following steps:\n\n1.  Splitting the words by \".\" - after observing that the format for type is as such: \"Event.TransportEvent.TransponderPing\"\n\n2.  The `max(lengths(word_list))` will be used to find the maximum number of elements in any split.\n\n3.  Apply function(x) to pad shorter splits with NA values to make them all the same length.\n\n4.  Create word_df and changing column names to event1 etc.\n\n5.  Convert word_df from matrix into tibble data.frame, and checks its class.\n\n6.  Append word_df to mc2_edges tibble data.frame.\n\n7.  Saving mc2_edges into R **rds** format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\n## 1.4 **Wrangling and tidying nodes**\n\n### 1.4.1 Extracting nodes\n\nThe code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n```\n:::\n\n\nNext, take a `glimpse()` to understand the data structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <chr> \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  <chr> \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\nFrom the table above, beside the date data type, inappropriate field name, and treatment for `type` column issues we discussed earlier, two additional data issues can be observed. They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n\n-   Some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nWe will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field. \n\n### 1.4.2 Correcting the date data type with `lubridate()`\n\nCorrect the date data type and take a `glimpse()` to confirm changes.\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes$`_last_edited_date` <- as_datetime(mc2_nodes$`_last_edited_date`)\nmc2_nodes$`_date_added` <- as_datetime(mc2_nodes$`_date_added`)\nmc2_nodes$date <- as_datetime(mc2_nodes$date)\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <dttm> 2033-09-04, 2034-01-21, 2033-06-22, 2033-11-24, …\n$ `_last_edited_date`  <dttm> 2035-01-25, 2035-01-04, 2035-01-14, 2035-01-14, …\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\n### 1.4.3 Changing field name\n\nIn the code chunk below, rename() of dplyr package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### 1.4.4 Splitting words in `type` column\n\nDetails on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R **rds** format yet, as there are more works to be done to clean up the dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_nodes$type, \"\\\\.\")\n\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"entity\", 1:max_elements)\n\nword_df <- as_tibble(word_df) %>%\n  select(entity2, entity3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  cbind(word_df)\n```\n:::\n\n\n### 1.4.5 Tidying text field\n\nUsing `mutate()` of dplyr and `gsub()` of Base R to tidy up the values in the cell. Essentially, the unwanted characters like `c`, `(`, `)`, and `\\` are removed by substituting with empty value `\"\"` for both Activities and fish_species_present columns. What is left in the columns will be characters separated by `,`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n:::\n\n\nLastly, we will save the tidied mc2_nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\n```\n:::\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}