---
title: "Take Home Exercise 3"
author: "Rydia"
date: "May 13, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

# VAST 2024 Mini Challenge 2

## Mini-Challenge 2: Creating Signatures for Geo-Temporal Patterns

Mini-challenge 2 focuses on analyzing ship movements and shipping records to understand illegal fishing practices. FishEye analysts need help creating visualizations to show patterns of ship movements and identify suspicious behaviors. They also want to understand how the commercial fishing community changed after a company was caught fishing illegally.

The details of the mini challenge can be found [here](https://vast-challenge.github.io/2024/MC2.html).

# 1.0 Data Preparation

Reference for Data Preparations:

1.  [Kickstarter 2](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2) by Prof T.S. Kam 

2.  [Kickstarter 3](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter3) by Prof T.S. Kam

## 1.1 Loading R Packages

```{r}
pacman::p_load(tidyverse, jsonlite, DT, lubridate,
               igraph, tidygraph, ggraph, 
               visNetwork, sf,
               patchwork, CGPfunctions,
               ggHoriPlot, plotly,ggridges,
               ggdist)
```

## 1.2 Loading the Data

Loading the .json data using `jsonlite` package.

```{r}
mc2_data <- fromJSON("data/MC2/mc2.json")
```

mc2 is a directed multigraph, consists of nodes dataframe and links dataframe.

### 1.2.1 Loading the Geographical Data

```{r}
oceanus_geography = st_read("data/MC2/Oceanus Information/Oceanus Geography.geojson") %>%
  st_transform(crs = 4326)
```

```{r}
glimpse(oceanus_geography)
```

```{r}
write_rds(oceanus_geography, 
  "data/rds/oceanus_geography.rds")
```

**Importing Geographical Data in ESRI shapefile format**

```{r}
oceanus_locations <- st_read(dsn = "data/MC2/shp",
  layer = "Oceanus Geography")
```

```{r}
glimpse(oceanus_locations)
```

```{r}
ggplot(data = oceanus_locations) +
  geom_sf()
```

```{r}
write_rds(oceanus_locations, 
  "data/rds/oceanus_locations.rds")
```

### 1.2.2 Wrangling of Geographical Data

In the code chunk below, st_coordinate() of sf package is used to extract coordinates from oceanus_locations sf data.frame.

```{r}
coords <- st_coordinates(oceanus_locations)
```

Next, code chunk below is used to drop the geometry column of oceanus_locations of sf data.frame by using st_drop_geometry() of sf package and save the output into a new data.frame called oceanus_locations_df.

```{r}
oceanus_locations_df <- oceanus_locations %>%
  st_drop_geometry()
```

Then, the code chunk below is to append the x- and y-coodinate values from coords list into the XCOORD and YCOORD columns of oceanus_locations_df respectively.

```{r}
oceanus_locations_df$XCOORD <- coords[, "X"]
oceanus_locations_df$YCOORD <- coords[, "Y"]
```

Lastly, the code chunk below is used to tidy OceanusLocations_df by selecting the necessary columns only and at the same time, rename X.Kind to Loc_Type.

```{r}
oceanus_locations_df <- oceanus_locations_df %>%
  select(Name, X.Kind, XCOORD, YCOORD) %>%
  rename(loc_type = X.Kind, loc_short = Name)
```

## 1.3 **Wrangling and tidying edges**

### 1.3.1 Extracting edges

First, we extract only distinct edges from the tibble *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.

```{r}
mc2_edges <- mc2_data$links %>% 
  distinct()
```

Next, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table.

```{r}
glimpse(mc2_edges)
```

From the table above, we can identify some issues with the data:

1.  The columns with date data type are all in character format.

2.  Some columns have names that starts with "\_". These need to be rename to avoid coding issues.

### 1.3.2 Correcting the date data type with `lubridate()`

```{r}
mc2_edges$time <- as_datetime(mc2_edges$time)
mc2_edges$`_last_edited_date` <- as_datetime(mc2_edges$`_last_edited_date`)
mc2_edges$`_date_added` <- as_datetime(mc2_edges$`_date_added`)
mc2_edges$date <- as_datetime(mc2_edges$date)
```

Next, glimpse() will be used to confirm if the process have been performed correctly.

```{r}
glimpse(mc2_edges)
```

### 1.3.3 Changing field name

In the code chunk below, rename() of dplyr package is used to change the following fields.

```{r}
mc2_edges <- mc2_edges %>%
  rename("last_edited_by" = "_last_edited_by",
         "date_added" = "_date_added",
         "last_edited_date" = "_last_edited_date",
         "raw_source" = "_raw_source",
         "algorithm" = "_algorithm") 
```

### 1.3.4 Splitting words in `type` column

The code chunk below combined the following steps:

1.  Splitting the words by "." - after observing that the format for type is as such: "Event.TransportEvent.TransponderPing"

2.  The `max(lengths(word_list))` will be used to find the maximum number of elements in any split.

3.  Apply function(x) to pad shorter splits with NA values to make them all the same length.

4.  Create word_df and changing column names to event1 etc.

5.  Convert word_df from matrix into tibble data.frame, and checks its class.

6.  Append word_df to mc2_edges tibble data.frame.

7.  Saving mc2_edges into R **rds** format as a physical file, so that there is no need to repeat the following code chunk to access a tidy mc2_edges tibble data frame.

```{r}
word_list <- strsplit(mc2_edges$type, "\\.")

max_elements <- max(lengths(word_list))

word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x))))

word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("event", 1:max_elements)

word_df <- as_tibble(word_df) %>%
  select(event2, event3)
class(word_df)

mc2_edges <- mc2_edges %>%
  cbind(word_df)

# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory
write_rds(mc2_edges, "data/rds/mc2_edges.rds")

```

## 1.4 **Wrangling and tidying nodes**

### 1.4.1 Extracting nodes

The code chunk below will be used to extract the nodes data.frame of mc2_data and parses it as a tibble data.frame called mc2_nodes.

```{r}
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  distinct()
```

Next, take a `glimpse()` to understand the data structure.

```{r}
glimpse(mc2_nodes)
```

From the table above, beside the date data type, inappropriate field name, and treatment for `type` column issues we discussed earlier, two additional data issues can be observed. They are:

-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.

-   Some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).

We will first repeat the steps similar steps to wrangling the mc2_edges, before proceeding to tackle the issues for Activities and fish_species_present field.

### 1.4.2 Correcting the date data type with `lubridate()`

Correct the date data type and take a `glimpse()` to confirm changes.

```{r}
mc2_nodes$`_last_edited_date` <- as_datetime(mc2_nodes$`_last_edited_date`)
mc2_nodes$`_date_added` <- as_datetime(mc2_nodes$`_date_added`)
mc2_nodes$date <- as_datetime(mc2_nodes$date)
glimpse(mc2_nodes)
```

### 1.4.3 Changing field name

In the code chunk below, rename() of dplyr package is used to change the following fields.

```{r}
mc2_nodes <- mc2_nodes %>%
  rename("last_edited_by" = "_last_edited_by",
         "date_added" = "_date_added",
         "last_edited_date" = "_last_edited_date",
         "raw_source" = "_raw_source",
         "algorithm" = "_algorithm") 
```

### 1.4.4 Splitting words in `type` column

Details on the code chunk can be found in section 1.3.4. At this point, we will not be saving the mc2_nodes as R **rds** format yet, as there are more works to be done to clean up the dataframe.

```{r}
word_list <- strsplit(mc2_nodes$type, "\\.")

max_elements <- max(lengths(word_list))

word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x))))

word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("entity", 1:max_elements)

word_df <- as_tibble(word_df) %>%
  select(entity2, entity3,entity4)
class(word_df)

mc2_nodes <- mc2_nodes %>%
  cbind(word_df)
```

### 1.4.5 Tidying text field

Using `mutate()` of dplyr and `gsub()` of Base R to tidy up the values in the cell. Essentially, the unwanted characters like `c`, `(`, `)`, and `\` are removed by substituting with empty value `""` for both Activities and fish_species_present columns. What is left in the columns will be characters separated by `,`.

```{r}
mc2_nodes <- mc2_nodes %>%
  mutate(Activities = gsub("c[(]", "", Activities)) %>% 
  mutate(Activities = gsub("\"", "", Activities)) %>%
  mutate(Activities = gsub("[)]", "", Activities))

```

```{r}
mc2_nodes <- mc2_nodes %>%
  mutate(fish_species_present = gsub("c[(]", "", fish_species_present)) %>% 
  mutate(fish_species_present = gsub("\"", "", fish_species_present)) %>%
  mutate(fish_species_present = gsub("[)]", "", fish_species_present)) 

mc2_nodes$entity3[5342] = "Ferry_Cargo"
mc2_nodes$entity3[5461] = "Ferry_Cargo"
mc2_nodes$entity3[5332] = "Ferry_Passenger"
mc2_nodes$entity3[5452] = "Ferry_Passenger"
mc2_nodes$entity3[5484] = "Ferry_Passenger"
```

Lastly, we will save the tidied mc2_nodes

```{r}
# prior to running this code, create an rds folder in data folder to ensure files are saved in the correct directory
write_rds(mc2_nodes, "data/rds/mc2_nodes.rds")
```

## 1.5 Processing nodes and edges data

### 1.5.1 Understanding the nodes and edges data

In this section, we will gain more insights from the existing data. The table below summarises the type of data we can glean from the nodes and edges:

+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+
| mc2_nodes Type | Entity              | Details                                         | Relevant Fields                                    |
+================+=====================+=================================================+====================================================+
| Commodity      | Fish                | **10 x Fish Species**                           | 1.  name (fish species common name/scientific name |
|                |                     |                                                 | 2.  id (species)                                   |
|                |                     | ![](images/clipboard-629994936.png)             |                                                    |
+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+
| Location       | 1.  City            | **24 x Locations:**                             | 1.  id ( City Name)                                |
|                | 2.  Point           |                                                 | 2.  Name (City short name)                         |
|                | 3.  Region          | **6 x City**                                    | 3.  description                                    |
|                |                     |                                                 | 4.  activities                                     |
|                |                     | ![](images/clipboard-3282014997.png)            | 5.  kind                                           |
|                |                     |                                                 | 6.  entity3 (type of location)                     |
|                |                     | **12 x Point**                                  |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | ![](images/clipboard-802842425.png){width="94"} |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | **6 x Region**                                  |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | -   3 x Ecological Preserves                    |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | -   3 x Fishing Ground                          |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | ![](images/clipboard-3654858944.png)            |                                                    |
+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+
| Document       | Delivery Report     | **5,307 x Cargoes**                             | 1.  id                                             |
|                |                     |                                                 | 2.  qty_tons                                       |
|                |                     |                                                 | 3.  date                                           |
+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+
| Vessels        | 1.  Fishing Vessels | **296 x Vessels**                               | 1.  id                                             |
|                | 2.  Cargo Vessels   |                                                 | 2.  Name                                           |
|                | 3.  Ferry Cargo     | -   178 x Fishing Vessels                       | 3.  flag_country                                   |
|                | 4.  Ferry Passenger |                                                 | 4.  company                                        |
|                | 5.  Research        | -   100 x Cargo Vessels                         | 5.  tonnage                                        |
|                | 6.  Tour            |                                                 | 6.  length_overall                                 |
|                | 7.  Others          | -   2 x Cargo Ferry                             | 7.  entity3 (type of vessels)                      |
|                |                     |                                                 |                                                    |
|                |                     | -   3 x Passenger Ferry                         |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | -   2 x Research Vessels                        |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | -   6 x Tour Vessels                            |                                                    |
|                |                     |                                                 |                                                    |
|                |                     | -   5 x Other Vessels                           |                                                    |
+----------------+---------------------+-------------------------------------------------+----------------------------------------------------+

+------------------+---------------------------------------------------------------------------+----------------------------------+
| mc2_edges type   | Count (n)                                                                 | Relevant Fields                  |
+==================+===========================================================================+==================================+
| Transponder Ping | 258,542 x Pings                                                           | 1.  time                         |
|                  |                                                                           | 2.  dwell                        |
|                  |                                                                           | 3.  source (locations)           |
|                  |                                                                           | 4.  target (vessels)             |
+------------------+---------------------------------------------------------------------------+----------------------------------+
| Harbor Report    |  2,487 x Sightings                                                        | 1.  source (vessels)             |
|                  |                                                                           | 2.  target (city)                |
|                  |                                                                           | 3.  date                         |
+------------------+---------------------------------------------------------------------------+----------------------------------+
| Import Record    | 10,614 x Records (matching 5,307 unique cargoes to fish species and city) | 1.  source (cargo)               |
|                  |                                                                           | 2.  target (fish species & city) |
|                  |                                                                           | 3.  date                         |
+------------------+---------------------------------------------------------------------------+----------------------------------+

### 1.5.2 Extracting Relevant Information for each nodes data

In this section, we will extract the relevant columns with intuitive names. From the analysis above, we will have 4 nodes data and 3 edges data as below:

::: callout-note
### Nodes and Edges Data

**Nodes:**

1.  fish_nodes: all types of fish species in the data set
2.  location_nodes: all locations in the data set
3.  cargo_nodes: all cargoes in the data set
4.  vessel_nodes: all vessels in the data set

**Edges:**

1.  vessel_movement: vessel movement, location, time and dwell
2.  harbor_report: date and vessel that dock in the harbor (city)
3.  import_record: date and location of transaction of cargoes
:::

**fish_nodes**

```{r}
fish_nodes <- mc2_nodes %>% 
  filter(entity2 == "Commodity") %>% 
  select(name, id) %>% 
  mutate(name = str_replace(name, "/.*", "")) %>% 
  rename(fish = name, species = id)
```

**location_nodes**

```{r}
location_nodes <- mc2_nodes %>% 
  filter(entity2 == "Location" ) %>% 
  select(id, Name, Description, Activities, kind, entity3) %>% 
  rename(loc = id, loc_short = Name, type = entity3)
```

**cargo_nodes**

```{r}
cargo_nodes <- mc2_nodes %>% 
  filter(entity3 == "DeliveryReport") %>% 
  select(id,qty_tons,date) %>% 
  rename(cargo = id, cargo_delivery_date = date)
  
```

**vessel_nodes**

```{r}
vessel_nodes <- mc2_nodes %>% 
  filter(entity2 == "Vessel") %>% 
  select(id, Name, flag_country, 
         company, tonnage, 
         length_overall, entity3) %>% 
  rename(vessel = id, vessel_name = Name, type = entity3)
```

### 1.5.3 Consolidating relevant information in the edges data

**vessel_movement**

We will add in oceanus_location and vessel_nodes data together with the Transponder Ping data, by using left_join .

```{r}
vessel_movement <- mc2_edges %>% 
  filter(event3 == "TransponderPing") %>% 
  select(time, dwell, source, target) %>% 
  rename(loc= source, vessel = target )

vessel_movement$loc_short <- vessel_movement$loc

vessel_movement <- vessel_movement %>%   
  mutate(loc_short = gsub("^City of", "",loc_short)) %>%
  mutate(loc_short = gsub("^\\s+", "",loc_short)) %>% 
  left_join(oceanus_locations_df) %>% 
  left_join(vessel_nodes)

```

**harbor_report**

Similarly, we will add in vessel_nodes data into the harbor_report using left_join.

```{r}
harbor_report <- mc2_edges %>% 
  filter(event2 =="HarborReport") %>% 
  select(source, target, date) %>% 
  rename(vessel = source, city = target)

harbor_report <- harbor_report %>% 
  left_join(vessel_nodes, by = "vessel")
```

**import_record**

Combining fish_nodes and cargo_nodes data into import_record using left_join.

```{r}
import_record <- mc2_edges %>% 
  filter(event2 == "Transaction") %>% 
  select(source, target, date)


import_city <- import_record %>% 
  select(source,target) %>% 
  filter(target %in% c("City of Haacklee",
                       "City of Lomark",
                       "City of Himark",
                       "City of Paackland",
                       "City of South Paackland",
                       "City of Port Grove")) %>% 
  rename(city = target)

import_cargo <- import_record %>% 
  select(source,target) %>% 
  filter(!target %in% c("City of Haacklee",
                       "City of Lomark",
                       "City of Himark",
                       "City of Paackland",
                       "City of South Paackland",
                       "City of Port Grove")) %>% 
  rename(species = target)

import_record <- import_city %>% 
  left_join(import_cargo) %>% 
  rename(cargo = source) %>% 
  left_join(fish_nodes) %>% 
  left_join(cargo_nodes) %>% 
  select(fish, species, city, cargo, qty_tons, cargo_delivery_date)
```

Before we move on to exploring the data, we will save the 4 nodes and 3 edges as R **rds** format in the data/rds folder:

```{r}
write_rds(fish_nodes, "data/rds/fish_nodes.rds")
write_rds(location_nodes, "data/rds/location_nodes.rds")
write_rds(cargo_nodes, "data/rds/cargo_nodes.rds")
write_rds(vessel_nodes, "data/rds/vessel_nodes.rds")
write_rds(vessel_movement, "data/rds/vessel_movement.rds")
write_rds(harbor_report, "data/rds/harbor_report.rds")
write_rds(import_record, "data/rds/import_record.rds")
```

## 1.6 Exploratory Data Analysis

### 1.6.1 Understanding the Fish Species in each Region

Before we can detect anomalies in the for fishing activities, we first need to understand where are the fish species found in each Region.

```{r}
region_fish_species <- mc2_nodes %>% 
  filter(entity3 == "Region") %>% 
  select(Name, fish_species_present, Activities, kind) 
```

```{r}
word_list <- strsplit(region_fish_species$fish_species_present, "\\,")

max_elements <- max(lengths(word_list))

word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x))))

word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("species", 1:max_elements) 

word_df <- as_tibble(word_df) %>% 
  mutate(species1 = str_replace(species1, "/.*", "")) %>% 
  mutate(species2 = str_replace(species2, "/.*", "")) %>% 
  mutate(species3 = str_replace(species3, "/.*", "")) %>% 
  mutate(species4 = str_replace(species4, "/.*", "")) %>% 
  mutate(species5 = str_replace(species5 , "/.*", "")) %>%
  mutate_at(vars(species1:species5), trimws)

region_fish_species <- region_fish_species %>%
  cbind(word_df)

# Convert data to long format
region_fish_species_long <- pivot_longer(region_fish_species, cols = starts_with("species"), names_to = "Species", values_to = "Presence")

# Filter out empty values and trim away leading and trailing whitespace
region_fish_species_long <- region_fish_species_long[region_fish_species_long$Presence != "", ] %>% 
  na.omit() %>%
  mutate_at(vars(Presence), trimws)
```

```{r fig.width = 10, fig.height= 5}
# Order them based on 3 Preserves and 3 Fishing Ground
desired_order <- c("Ghoti Preserve", "Nemo Reef", "Don Limpet Preserve","Cod Table", "Wrasse Beds","Tuna Shelf")  

region_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)

ggplot(region_fish_species_long, aes(x = Name, 
                                     y = Presence,
                                     colour = Presence)) +
  geom_point() +
  labs(title = "Species Presence in each Region",
       x = "Region",
       y = "Species") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

::: callout-note
### Insights from this visualisation

[**Ecological Preserves**]{.underline}

We can derive that Sockfish, Offidiaa, and Helenaa species can only be found in the preserves but not in the fishing grounds. Therefore, any cargoes that contains these fish species (Sockfish, Offidiaa, and Helenaa) would have fished illegally. Below shows the visualisation of the species and qty_ton that flows through each city by months.

-   Sockfish: Only found in Don Limpet Preserve

-   Offidiaa: Only found in Ghoti Preserve

-   Helenaa: Only found in Ecological Preserves (all three)

[**Fishing Grounds**]{.underline}

-   Cod: Only found in Cod Table

-   Harland: Only found in Tuna Shelf

**Other notable point**

-   Salmon: Not found in any of the 6 locations mentioned above. This might be imports from other countries or from international shipping.
:::

### 1.6.2 Understanding the qty_tons of each Fish Species by City

After identifying the three fish species (Sockfish, Offidiaa, and Helenaa) that are only found in the Ecological Preserves, we will have an overview of how each of the fish species are spread across the city.

```{r}
# Aggregate the qty_tons by fish and city
qty_tons_agg <- import_record %>%
  group_by(fish, city) %>%
  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %>%
  ungroup()

# Add distinct colors to flag out Sockfish, Offidiaa, and Helenaa
color <- c("Wrasse" = "#000099",
           "Tuna" = "#0000CC",
           "Harland" = "#0000FF",
           "Cod" = "#3333FF",
           "Birdseye" = "#6666FF",
           "Beauvoir" = "#9999FF",
           "Salmon" = "#CCCCFF",
           "Helenaa" = "#FF99FF",
           "Offidiaa" = "#FF00FF",
           "Sockfish" = "#990099")

# Reorder to match the above 
qty_tons_agg$fish <- factor(qty_tons_agg$fish,
                            levels = c("Wrasse","Tuna",
                                       "Harland","Cod",
                                       "Birdseye", "Beauvoir",
                                       "Salmon","Helenaa",
                                       "Offidiaa","Sockfish"))

# Reorder city in descending order based on total_qty_tons
qty_tons_agg$city <- factor(qty_tons_agg$city,
                            levels = c("City of Paackland",
                                       "City of Himark",
                                       "City of Lomark",
                                       "City of South Paackland",
                                       "City of Haacklee"))

# Bar plot
ggplot(qty_tons_agg, aes(x = city, 
                         y = total_qty_tons, 
                         fill = fish)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = color) +
  labs(title = "Quantity Tons of Fish by City and Fish Species",
       x = "City",
       y = "Total Quantity (tons)",
       fill = "Fish Species") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### 1.6.3 Understanding the number of cargoes of each Fish Species by City

```{r}
# Aggregate the qty_tons by fish and city
cargo_n_agg <- import_record %>%
  group_by(fish, city) %>%
  summarize(total_cargo = n()) %>%
  ungroup()

# Add distinct colors to flag out Sockfish, Offidiaa, and Helenaa
color <- c("Wrasse" = "#000099",
           "Tuna" = "#0000CC",
           "Harland" = "#0000FF",
           "Cod" = "#3333FF",
           "Birdseye" = "#6666FF",
           "Beauvoir" = "#9999FF",
           "Salmon" = "#CCCCFF",
           "Helenaa" = "#FF99FF",
           "Offidiaa" = "#FF00FF",
           "Sockfish" = "#990099")

# Reorder to match the above 
cargo_n_agg$fish <- factor(cargo_n_agg$fish,
                            levels = c("Wrasse","Tuna",
                                       "Harland","Cod",
                                       "Birdseye", "Beauvoir",
                                       "Salmon","Helenaa",
                                       "Offidiaa","Sockfish"))

# Reorder city in descending order based on total_qty_tons
cargo_n_agg$city <- factor(cargo_n_agg$city,
                            levels = c("City of Paackland",
                                       "City of Himark",
                                       "City of Lomark",
                                       "City of South Paackland",
                                       "City of Haacklee"))

# Bar plot
ggplot(cargo_n_agg, aes(x = city, 
                         y = total_cargo, 
                         fill = fish)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = color) +
  labs(title = "Number of Cargoes by City and Fish Species",
       x = "City",
       y = "No. of Cargoes",
       fill = "Fish Species") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: callout-note
### Insights from this visualisation

-   Both qty_tons and number of cargoes bar plots shows similar distribution of fish species within each city.

-   The City of Paackland processed the highest qty_tons and number of cargoes, follow by City of Himark, City of Lomark, City of South Paackalnd, and City of Hacklee.
:::

### 1.6.4 Understanding the Activities by Locations

Understanding the activities in each of the locations.

```{r}
word_list <- strsplit(location_nodes$Activities, "\\,")

max_elements <- max(lengths(word_list))

word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x))))

word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("activity", 1:max_elements) 

word_df <- as_tibble(word_df) 

location_nodes1 <- location_nodes %>%
  cbind(word_df)

# Convert data to long format
location_nodes_long <- pivot_longer(location_nodes1, cols = starts_with("activity"), names_to = "activity", values_to = "Presence")

# Filter out empty values and trim away leading and trailing whitespace
location_nodes_long <- location_nodes_long[location_nodes_long$Presence != "", ] %>% 
  mutate_at(vars(Presence), trimws) %>% 
  filter(if_all(c(loc), ~ !is.na(.)))

location_nodes_long$Presence[8] = "Tourism"


```

```{r fig.width = 10, fig.height= 5}
# Order the locations
desired_order <- c("City of Himark",
                   "City of Lomark",
                   "City of Haacklee",
                   "City of Paackland",
                   "City of South Paackland",
                   "City of Port Grove",
                   "Ghoti Preserve", 
                   "Nemo Reef", 
                   "Don Limpet Preserve",
                   "Cod Table", 
                   "Wrasse Beds",
                   "Tuna Shelf",
                   "Exit North",
                   "Exit South",
                   "Exit East",
                   "Exit West",
                   "Nav 1","Nav 2", "Nav 3", 
                   "Nav A", "Nav B", "Nav C", "Nav D", "Nav E")  

location_nodes_long$loc <- factor(location_nodes_long$loc, levels = desired_order)

ggplot(location_nodes_long, aes(x = loc, 
                                y = Presence,
                                colour = Presence)) +
  geom_point() +
  labs(title = "Activities in each Location",
       x = "Location",
       y = "Activity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

```{r}
# Aggregate the transponder ping by location
location_ping_agg <- vessel_movement %>%
  group_by(loc, type) %>%
  summarize(total_ping = n()) %>%
  ungroup()


# Reorder to match the above 
location_ping_agg$loc <- factor(location_ping_agg$loc,
                           levels = c("City of Himark",
                                      "City of Lomark",
                                      "City of Haacklee",
                                      "City of Paackland",
                                      "City of South Paackland",
                                      "City of Port Grove",
                                      "Ghoti Preserve", 
                                      "Nemo Reef", 
                                      "Don Limpet Preserve",
                                      "Cod Table", 
                                      "Wrasse Beds",
                                      "Tuna Shelf",
                                      "Exit North",
                                      "Exit South",
                                      "Exit East",
                                      "Exit West",
                                      "Nav 1","Nav 2", "Nav 3", 
                                      "Nav A", "Nav B", "Nav C", "Nav D", "Nav E"))  

# Bar plot
ggplot(location_ping_agg, aes(x = loc, 
                              y = total_ping, 
                              fill = type)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of Transponder Ping by Locations",
       x = "Locations",
       y = "No. of Transponder Ping",
       fill = "Locations") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: callout-note
### Insights from this visualisation

-   There is abnormally high number of pings for fishing vessels at Nemo Reef. Since Nemo Reef is a Ecological Preserve, the correct safe navigation around it is through Nav D.

-   Given that the fish species (Wrasse, Tuna, Birdseye, Beauvoir) in Nemo Reef, can also be found in other fishing grounds, there is likelihood of IUU here. The presence of Helenaa is the only tell-tale sign if a fishing vessel indeed fish in Nemo Reef.

-   There is abornormally high number of pings for fishing vessels at Exit East. Since the activities in Exit E are international shipping and Deep Sea Fishing, it is not a designated Fishing Ground within Oceanus. Thus, we should be only expecting cargo vessels through Exit E, as observed in other exits. 
:::

### 1.6.5 Understanding the Harbor Report by Locations

```{r}
# Aggregate the harbor report by location
harbor_report_agg <- harbor_report %>%
  group_by(city, type) %>%
  summarize(total_report = n()) %>%
  ungroup()


# Reorder to match the above 
harbor_report_agg$city<- factor(harbor_report_agg$city,
                           levels = c("City of Himark",
                                      "City of Lomark",
                                      "City of Haacklee",
                                      "City of Paackland",
                                      "City of South Paackland",
                                      "City of Port Grove"))
                                        

# Bar plot
ggplot(harbor_report_agg, aes(x = city, 
                              y = total_report, 
                              fill = type)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of Report by City",
       x = "City",
       y = "No. of Reports",
       fill = "City") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: callout-note
### Insights from this visualisation

-   There is only Research and Tour vessels visiting City of Port Grove.

-   The other five cities have mostly fishing or cargo vessels visits.
:::

### 1.6.6 Understanding the Cargoes

**Cargoes by Quantity in Ton**

```{r}
# Calculate Vlines
mean_qty_tons <- mean(cargo_nodes$qty_tons, na.rm = TRUE)
median_qty_tons <- median(cargo_nodes$qty_tons, na.rm = TRUE)

# Create a new column to indicate if the value is negative
cargo_nodes <- cargo_nodes %>%
  mutate(is_negative = ifelse(qty_tons > 0, "Positive", "Negative"))

# Plot Histogram
p1 <- ggplot(cargo_nodes, aes(x = qty_tons, fill = is_negative)) +
  geom_histogram(binwidth = 5, color = "black", alpha = 0.7) +
  geom_vline(aes(xintercept = mean_qty_tons), 
             color = "darkgreen", 
             linetype = "dashed", 
             size = 1) +
  geom_vline(aes(xintercept = median_qty_tons), 
             color = "blue", 
             linetype = "dashed", size = 1) +
  scale_fill_manual(values = c("Negative" = "red", 
                               "Positive" = "skyblue"), 
                    name = "Value Type") +
  labs(title = "Cargo Quantity in Tons with Mean and Median",
       x = "Quantity of Tons",
       y = "Frequency") +
  theme_minimal() +
  annotate("text", 
           x = mean_qty_tons, 
           y = Inf, 
           label = paste("Mean =", round(mean_qty_tons, 2)), 
           vjust = 1, hjust = -0.2, 
           color = "darkgreen") +
  annotate("text", 
           x = median_qty_tons, 
           y = Inf, 
           label = paste("Median =", round(median_qty_tons, 2)), 
           vjust = 1, hjust = 1.3, color = "blue")

p2 <- boxplot <- ggplot(cargo_nodes, aes(y = qty_tons)) +
  geom_boxplot(fill = "skyblue", color = "black", alpha = 0.7) +
  coord_flip() +  # Flip coordinates to make it horizontal
  labs(title = "Boxplot of Quantity of Tons",
       x = "",
       y = "Quantity of Tons") +
  theme_minimal()

p1/p2
```
::: callout-note
### Insights from this visualisation

-   There are cargoes which has negative values. This is abnormal as all cargoes qty_tons values should be at least zero .

-   There are a number of outliers cargoes with qty_tons above ~70 tons. 
:::

**Cargoes Quantity Ton by Date and City**
```{r}
# Aggregate import record data
import_record_agg <- import_record %>%
  mutate(year = year(cargo_delivery_date),
         month = factor(month(cargo_delivery_date, label = TRUE), levels = month.abb), # Ensure month is a factor
         day = day(cargo_delivery_date),
         week = week(cargo_delivery_date),
         weekday = wday(cargo_delivery_date, label = TRUE, week_start = 1)) %>% 
  group_by(city, year, month) %>%  # Group by city, year, and month
  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %>% 
  arrange(city, year, month)

# Create heatmap
ggplot(import_record_agg, 
       aes(x = month, 
           y = city, 
           fill = total_qty_tons)) + 
  geom_tile(color = "white", 
            size = 0.1) +  
  coord_equal() +
  scale_fill_gradient(name = "Cargo Quantity Ton by Month",
                      low = "sky blue", 
                      high = "dark blue") +
  labs(x = NULL, 
       y = NULL, 
       title = "Cargo Quantity Ton by Month") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

::: callout-note
### Insights from this visualisation

-   Higher qty_tons of cargoes enters the various cities from Aug to Nov period.

-   Qty_tons peak in Oct and Nov period, expecially for City of Paackland.
:::

### 1.6.7 Understanding the Vessels

**Types of vessels**

```{r}
# Vessel count and reorder bar plot
vessel_count <- vessel_nodes %>%
  group_by(type) %>%
  summarize(n = n()) %>% 
  mutate(type = reorder(type, -n))

# Bar plot
ggplot(vessel_count,
       aes(x = type,
           y = n)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = n), vjust = -0.5, size = 3)
```

**Length by Tonnage**

```{r fig.width= 15, fig.height = 5}
DT::datatable(vessel_nodes, class= "compact")

d <- highlight_key(vessel_nodes)

# Scatter plot
p <- ggplot(d) +
  geom_point(aes(x = length_overall,
                 y = tonnage,
                 color = type))

gg <- highlight(ggplotly(p),
                "plotly_selected")

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5) 
```

::: callout-note
### Insights from this visualisation

-   Cargo vessels have wide range of length and tonnage. Only a few data points ( \<20), falls within similar range of the fishing vessels.

-   The fishing vessels tonnage mostly are \<12,000 ton and length_overall of \<150m. Only three fishing vessels are above these range.
:::

**Tonnage Distribution**
```{r fig.width = 10}
# Raincloud Plot for Tonnage Distribution of Fishing and Cargo Vessels
p1 <- vessel_nodes %>% 
  filter(type %in% c("FishingVessel")) %>%
  ggplot(aes(x = tonnage, 
             y = type)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = 100,
            dotsize = 1) +
  ggtitle("Tonnage Distribution by of Fishing Vessels") +
  theme(plot.title = element_text(size=12)) +
  theme_minimal()

p2 <- vessel_nodes %>% 
  filter(type %in% c("CargoVessel")) %>%
  ggplot(aes(x = tonnage, 
             y = type)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = 500,
            dotsize = 0.1) +
  ggtitle("Tonnage Distribution by of Cargo Vessels") +
  theme(plot.title = element_text(size=12)) +
  theme_minimal()

p1/p2
```
::: callout-note
### Insights from this visualisation

-   Fishing vessels tonnage distribution is right skewed. There is high concentration of fishing vessels of < 1,000 ton.

-   Cargo vessels tonnage falls largely into two distinct groups: (1) ~2000 ton, and (2) ~75,000 ton. 
:::

**Vessel Type and Flag Country**

```{r fig.width = 15, fig.height= 5}
# Bar plot
ggplot(vessel_nodes) +
  geom_bar(aes(x = flag_country,
               fill = type)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

**Vessels from Oceanus** We now take a more detailed look at Oceanus vessel.

```{r}
# Oceanus vessel count and reorder bar plot
vessel_count <- vessel_nodes %>%
  filter(flag_country == "Oceanus") %>% 
  group_by(type) %>%
  summarize(n = n()) %>% 
  mutate(type = reorder(type, -n))

# Bar plot
ggplot(vessel_count,
       aes(x = type,
           y = n,
           fill = type)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = n), vjust = -0.5, size = 3)
```

**Vessels from other flag_country**

```{r fig.width = 15, fig.height= 5}
# Bar plot for flag countries other than Oceanus
vessel_nodes %>% 
  filter(flag_country != "Oceanus") %>% 
  ggplot() +
  geom_bar(aes(x = flag_country,
               fill = type)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

```{r fig.width = 15, fig.height= 5}
# Bar plot for flag countries other than Oceanus
vessel_nodes %>% 
  filter(flag_country != "Oceanus") %>% 
  ggplot() +
  geom_bar(aes(x = flag_country,
               fill = type)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(~type)
```

::: callout-note
### Insights from these vessels visualisation

-   Most fishing vessels (158 of 178) are registered under flag country of Oceanus.

-   Other countries vessels are only cargo vessels (99) and fishing vessels (20).

-   Other countries own between 0 to 5 cargo vessels and 0 to 2 fishing vessels.
:::

**Vessels by Company**

Upon inspecting the vessel_nodes data, we observe that non-Oceanus fishing vessels has registered company information, while non-Oceanus cargo vessels do not have registered company information. To confirm this is true, we remove those company that are "NA" in the bar plot. 

![](images/clipboard-651628543.png)

```{r}
# Checking the hypothesis that non-Oceanus cargo vessels are not registered as company in the data
vessel_nodes %>% 
  na.omit(company) %>% 
  filter(flag_country != "Oceanus") %>% 
  ggplot(aes(x = company, fill = type)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(~type)
  
```
::: callout-note
### Insights from this visualisation

-   Only one cargo vessel is registered with company. This belongs to the "Saltwater Sisters Company Marine". Using the data table created above, we found out that this cargo vessel is registered under the flag_country of Oceantterra. This company also owns a fishing vessel (bassbaiterb9f) with flag_country as Oceanus.

-   All 20 non-Oceanus fishing vessels are all registered with company in the data.

:::

### 1.6.8 Understanding the vessel movements

**Understand Average Dwell by Location**
```{r}

```






## 2.0 Task 1: Flow of Commercially Caught Fish

In this section, we focus on a few key areas to understand how the commercially caught fish flows from the vessels through the various ports:

1.  Associating the vessels with their probable cargoes
2.  Which vessels deliver which products and when?
3.  Examine the seasonal trends and anomalies in the port exit records

## 2.1 Associating the vessels with their probable cargoes

**Matching the vessel with the import_record**

We will use the vessel_nodes that contains information on the movement of fishing vessels and cargoes, and define the vessels location, start time and end time of the vessels in the particular location using transponder ping.

```{r}
fishing_and_cargo_vessel_list <- vessel_nodes %>% 
  filter(type %in% c("FishingVessel", "CargoVessel")) %>% 
  select(vessel)

fishing_and_cargo_vessel_list <- as.list(fishing_and_cargo_vessel_list)

vessel_location <- vessel_movement %>% 
  filter(vessel %in% unlist(fishing_and_cargo_vessel_list)) %>% 
  arrange(vessel,time) %>% 
  mutate(next_time = ifelse(lead(vessel) == vessel, lead(time), NA)) %>% 
  mutate(next_time = as_datetime(next_time))   %>% 
  mutate(end_time = time + dwell)

vessel_location_city <- vessel_location %>% 
  filter(loc_short %in% c("Haacklee",
                       "Lomark",
                       "Himark",
                       "Paackland",
                       "South Paackland",
                       "Port Grove"))
```

**Vessel Location based on harbor report**

The next step we do is to extract the date, location and vessel from the harbor report. Since this is describe as canonical, it should be considered for matching first before using the vessel location data from transponder ping. Columns are renamed to match the information in the cargo_list.

```{r}
vessel_mvmt_hr <- harbor_report %>% 
  select(vessel, city, date) %>% 
  rename(vessel_delivery_date = date)
```

**Merging import_record and vessel_mvmt_hr**

Adding one column on vessel delivery date, which is 1 day before the date stated in the harbor import record.

```{r}
cargo_list <- import_record %>% 
  mutate(vessel_delivery_date = cargo_delivery_date + days(-1))
```

Saving cargo_list:

```{r}
write_rds(cargo_list, "data/rds/cargo_list.rds")
```

```{r}
vessel_location_match_hr <- cargo_list %>% 
  left_join(vessel_mvmt_hr ) %>%
  filter(if_all(c(qty_tons,vessel), ~ !is.na(.))) %>% 
  distinct()
```

```{r}
write_rds(vessel_location_match_hr, "data/rds/vessel_location_match_hr.rds")
```

```{r}
hr_match <- mc2_nodes %>% 
  select(id,Name,flag_country, company, tonnage,entity3) %>% 
  rename(vessel = id) %>% 
  left_join(vessel_location_match_hr) %>%   
  filter(if_all(c(qty_tons, tonnage), ~ !is.na(.))) %>% 
  distinct() %>% 
  filter()
```

**Merging cargo_list and vessel_location_city**

```{r}
vessel_location_city <- vessel_location_city %>% 
  mutate(date = substr(`time`,1,10)) %>% 
  mutate(vessel_delivery_date = ymd(date))  %>% 
  filter(dwell > 0)
```

```{r}
vessel_location_match <- vessel_location_city %>% 
  left_join(cargo_list, 
            unmatched = "drop") %>%
  filter(if_all(c(qty_tons), ~ !is.na(.))) %>% 
  distinct()
```

**Vessel Match Graph**

```{r}
id1 <- vessel_location_match_hr  %>% 
  select(vessel) %>% 
  rename(id = vessel) 

id2 <- vessel_location_match_hr  %>% 
  select(cargo) %>% 
  rename(id = cargo)

cargo_vessel_nodes <- rbind(id1,id2) %>% 
  distinct() 

cargo_vessel_edges <- vessel_location_match_hr %>% 
  select(vessel,cargo, fish, city) %>% 
  distinct() %>%
  group_by(vessel, cargo) %>%
  rename(source = vessel, target = cargo)%>%
  filter(source!=target) %>% 
  ungroup()

cargo_vessel_graph <- tbl_graph(nodes = cargo_vessel_nodes,
                       edges = cargo_vessel_edges,
                       directed = FALSE)
```

```{r}
cargo_vessel_graph %>%
  ggraph(layout = 'fr') +
  geom_edge_link() +
  geom_node_point() + 
  theme_graph()
```

Finding anomalies in vessel movement by comparing end time (calculated by dwell) with next time (the next time the vessel is detected at the next location).

```{r}
ab_vessel_mvmt <- vessel_location %>%
  mutate(time = ymd_hms(time)) %>% 
  mutate(next_time = ymd_hms(next_time)) %>% 
  mutate(end_time = ymd_hms(end_time)) %>% 
  filter(end_time != next_time) 

ab_vessel_mvmt_agg <- ab_vessel_mvmt %>% 
  distinct() %>% 
  group_by(vessel) %>% 
  summarise(weights = n()) %>%
  arrange(desc(weights))
ab_vessel_mvmt_agg
```



## 2.3 Examine the seasonal trends and anomalies in the port exit records

### 2.3.1 Seasonal trends in port exit records
```{r}
import_record1 <- import_record %>% 
  mutate(year = year(cargo_delivery_date),
         month = month(cargo_delivery_date, label = TRUE),
         day = day(cargo_delivery_date),
         week = week(cargo_delivery_date),
         weekday = wday(cargo_delivery_date, label = TRUE, week_start = 1))

# Create an overall Oceanus heat map for all types of fish
fish_agg <- import_record1  %>%
  distinct() %>%
  group_by(fish,month) %>%
  summarise(total_qty_tons = sum(qty_tons)) %>% 
  ungroup()

ggplot(fish_agg, aes(x = month, y = fish, fill = total_qty_tons)) +
    geom_tile(color = "white") +
    scale_fill_gradient(low = "white", high = "blue") +
    labs(title = paste("Calendar Heatmap for fish in Oceanus"),
         x = "Month of the Year",
         y = "Fish Type",
         fill = "Total Quantity (tons)") +
    theme_minimal()
```

```{r}
# Function to create a calendar heat map
create_heatmap <- function(data, city) {
  ggplot(data, aes(x = month, 
                   y = fish, 
                   fill = total_qty_tons)) +
    geom_tile(color = "white") +
    scale_fill_gradient(low = "white", high = "blue") +
    labs(title = paste("Calendar Heatmap for fish in", city),
         x = "Month of the Year",
         y = "Fish Type",
         fill = "Total Quantity (tons)") +
    theme_minimal()
}
```

```{r}
fish_by_port_agg <- import_record1 %>% 
  group_by(city,fish,month) %>% 
  summarise(total_qty_tons = sum(qty_tons))
```

```{r}
# Create an empty list to store heatmaps
heatmaps <- list()

# Iterate over each city
cities <- unique(cargo_list$city)
for (c in cities) {
  # Filter the data for the current city
  heatmap_data <- fish_by_port_agg %>% 
    filter(city == c)
  
  # Create the heatmap for the current city
  heatmap <- create_heatmap(heatmap_data, c)
  
  # Store the heatmap in the list
  heatmaps[[c]] <- heatmap
}

# Print or visualize the heatmaps
for (c in cities) {
  print(heatmaps[[c]])
}
```

## 2.3.1 **Understanding the types of fish that should not be in the market**


```{r}
# Create an empty list to store heatmaps
heatmaps <- list()

# Iterate over each city
cities <- unique(cargo_list$city)
for (c in cities) {
  # Filter the data for the current city
  heatmap_data <- fish_by_port_agg %>% 
    filter(city == c) %>% 
    filter(fish %in% c("Sockfish", "Offidiaa", "Helenaa"))
  
  # Create the heatmap for the current city
  heatmap <- create_heatmap(heatmap_data, c)
  
  # Store the heatmap in the list
  heatmaps[[c]] <- heatmap
}

# Print or visualize the heatmaps
for (c in cities) {
  print(heatmaps[[c]])
}
```


::: callout-note
### Insights from this visualisation

-   From this heatmap above, we understand that there is an abnormal increase in Sockfish catch from May onwards, and abnormal increase in Offidiaa catch from September onwards , which are species unique to the Don Limpet Preserve and Ghoti Preserve respectively.

-   Probable reason for this is that since SouthSeafood Express Corp was caught in mid-May for illegal fishing in Ghoti Preserve, other illegal fishing vessels made a switch to Don Limpet Reserves to fish.
:::

## 3.0 Task 2

Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.

## 3.1 Illegal fishing by SouthSeafood Express Corp

SouthSeafood Express Corp operates two fishing vessels by the id of "snappersnatcher7be" and "roachrobberdb6".

```{r}
vessel_movement_agg <-
  vessel_movement %>%
  distinct() %>%
  group_by(loc, vessel, type) %>%
  summarise(weights = n()) %>%
  ungroup()
```

```{r}


vessel_movement_agg %>% 
  filter(vessel %in% c("snappersnatcher7be","roachrobberdb6")) %>%
  group_by(vessel) %>% 
  ggplot(aes(x=vessel, y=loc,
             size = weights)) +
  geom_point()

```

### 3.1.1 When and where did SouthSeafood Express Corp vessels perform their illegal fishing?

Since only Snapper Snatcher appears to be operating in Ghoti Preserve, we will examine this fishing vessel more closely.

```{r}
snapper_activities <- vessel_movement %>% 
  filter(vessel %in% c("snappersnatcher7be")) %>% 
  filter(loc == "Ghoti Preserve") %>% 
  arrange(vessel,time) %>% 
  mutate(end_time = time + dwell) %>% 
  select(time, dwell, end_time)
snapper_activities
```

There three instances (2,9 and 16 Feb) where Snapper Snatcher stayed at the Ghoti Preserve for over 3 days. These are the instances where SouthSeafood Express Corp's Snapper Snatcher conducted IUU Fishing in Ghoti Preserve.

### 3.1.2 Visualising Vessel Trajectory

In the code chunk below, st_as_sf() of sf package is used to convert vessel_movement_data data.frame into sf point data.frame by using values in XCOORD and YCOORD columns. The output is an sf data.frame called vessel_movement_sf.

```{r}
vessel_movement_sf <- vessel_movement %>%
  st_as_sf(coords = c("XCOORD", "YCOORD"), 
           crs = 4326)
```

Next arrange() is used to sort the records according to the vessels’ name (i.e. target) and navigation time (i.e. time)

```{r}
vessel_movement_sf <- vessel_movement_sf %>%
  arrange(vessel, time)
```

Lastly, st_cast() of sf package is used to convert vessel_movement_sf from point features into linestring features called vessel_trajectory.

```{r}
vessel_trajectory <- vessel_movement_sf %>%
  group_by(vessel) %>%
  summarize(do_union = FALSE) %>%
  st_cast("LINESTRING")
```

**Selecting SouthSeafood Express vessels**

```{r}
vessel_trajectory_selected <- vessel_trajectory %>%
  filter(vessel %in% c("snappersnatcher7be", "roachrobberdb6"))
```

Next, appropriate functions of ggplot2 is used to plot the selected vessel trajectories by using the code chunk below.

```{r}
ggplot() +
  geom_sf(data = oceanus_geography) +
  geom_sf(data = vessel_trajectory_selected, 
          aes(color = factor(vessel)), 
          size = 1) +
  theme_minimal() +
  labs(title = "Trajectories of SouthSeafood Express Vessels", 
  x = "Longitude", y = "Latitude", color = "ID")
```

## 4.0 Task 4

**The Questions**:

1.  How did fishing activity change after SouthSeafood Express Corp was caught?

2.  What new behaviors in the Oceanus commercial fishing community are most suspicious and why?

In order to understand the change in fishing activities, we first have to determine the date where SouthSeafood Express Corp was caught. We will use this timeline as the

The final activities of SouthSeafood's vessels are on 2035-05-16 (snappersnatcher7be) and 2035-05-16 (roachrobberdb6) according to the transponder pings. Hence, we can conclude that the SouthSeafood is caught for illegal fishing, and had ceased operating its fishing vessels since 2035-05-16.

## 4.1 Changes in Commercial Fishing

Firstly, we take a look at the species caught across the months (Feb to Nov 2035).

```{r}
# Create an overall Oceanus heat map for all types of fish
fish_agg <- fish_by_port_agg  %>%
  distinct() %>%
  group_by(fish,month) %>%
  summarise(total_qty_tons = sum(total_qty_tons)) 

oceanus_heatmap <- ggplot(fish_agg, aes(x = month, y = fish, fill = total_qty_tons)) +
    geom_tile(color = "white") +
    scale_fill_gradient(low = "white", high = "blue") +
    labs(title = paste("Calendar Heatmap for fish in Oceanus"),
         x = "Month of the Year",
         y = "Fish Type",
         fill = "Total Quantity (tons)") +
    theme_minimal() +
  geom_vline(xintercept = "May",color = 'red', linetype = 'dashed') +
  annotate("text", x = "May" , y = "Offidiaa", label = "SouthSeafood caught", angle = 90, vjust = -0.5, hjust = 0.5, color = "red")
```

```{r}
# Order them based on 3 Preserves and 3 Fishing Ground
desired_order <- c("Ghoti Preserve", "Nemo Reef", "Don Limpet Preserve","Cod Table", "Wrasse Beds","Tuna Shelf")  

region_fish_species_long$Name <- factor(region_fish_species_long$Name, levels = desired_order)

species_plot <-ggplot(region_fish_species_long, aes(x = Name, 
                                     y = Presence,
                                     colour = Presence)) +
  geom_point() +
  labs(title = "Species Presence by Name",
       x = "Name",
       y = "Species") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

```{r, fig.width=6, fig.height=6}
oceanus_heatmap / species_plot
```

For recapitulation, we know that Sockfish, Offidiaa, and Helenaa are fish species that are unique to the three Preserves. From the two plots above, we can derive initial conclusion that there is an usual increase in Sockfish catch after SouthSeafood was caught in mid-May. We also see a minor increase in Helenaa between Jun to Aug, and later in Oct to Nov. The spike in Offidiaa catch begins in Sep and grows gradually to Nov.

Combining the information above, we can make the following two hypothesis about the changes in fishing activities in Oceanus after SouthSeafood was caught:

1.  The fishing vessels switched to Don Limpet Preserve for IUU fishing. Tell tale sign is the increase in Sockfish catch, which is species unique to Don Limpet Preserve. This also explains the slight increase in Helena catch from Jun.

2.  The fishing vessels moved into Ghoti Preserves from Sep onwards for IUU fishing. Tell tale sign is the increase in Offidia catch from Sep, which is species unique to Ghoti Preserve.

For confirmation, we take a look at the changes to OVLS Transponder Ping, comparing the total pings to various Fishing Grounds and Preserves month by month.

```{r}
vessel_movement_long <- vessel_movement %>% 
  filter(type == "FishingVessel") %>%
  filter(loc %in% c("Ghoti Preserve", 
                       "Nemo Reef", 
                       "Don Limpet Preserve",
                       "Cod Table", 
                       "Wrasse Beds",
                       "Tuna Shelf")) %>% 
  mutate(month = month(time)) %>% 
  select(loc, vessel, month) %>% 
  group_by(loc, month) %>% 
  summarize(n = n()) 
```

```{r}
vessel_movement_long %>% 
  mutate(month = as.factor(month)) %>% 
  newggslopegraph(month,n, loc,
                Title = "Changes in Visit Frequency",
                SubTitle = "across Feb to Nov 2035",
                Caption = "Prepared by: Liang Xiuhao")
```

In the line graph below, we observe that the overall fishing vessels activities in the fishing ground and preserves dropped.

```{r}
average <- vessel_movement %>% 
  filter(type == "FishingVessel") %>%
  filter(loc %in% c("Ghoti Preserve", 
                       "Nemo Reef", 
                       "Don Limpet Preserve",
                       "Cod Table", 
                       "Wrasse Beds",
                       "Tuna Shelf")) %>%
  mutate(month = month(time)) %>% 
  summarise(average = (n()/10))

vessel_movement %>% 
  filter(loc %in% c("Ghoti Preserve", 
                       "Nemo Reef", 
                       "Don Limpet Preserve",
                       "Cod Table", 
                       "Wrasse Beds",
                       "Tuna Shelf")) %>%
  filter(type == "FishingVessel") %>% 
  mutate(month = month(time)) %>% 
  group_by(month) %>% 
  summarise(n = as.numeric(n())) %>%
  ggplot(aes(x = month, y = n)) + 
  geom_line(color = "blue") +  
  geom_point(size = 4, color = "blue") +
  geom_text(aes(label = n), 
            vjust = -1,
            size = 3) +
  labs(title = "Visit Frequency to All Fishing Grounds and Preserves by Month",
       x = "Month",
       y = "Frequency") +
  geom_hline(average, 
             yintercept = as.numeric(average), 
             color="black",
             linetype = 6) +
  geom_point(x = 5, y = 13366,
             size = 4, color = "red") +
  geom_text(aes(x = 5, y = 13366, label = "SouthSeafood caught"),
            color = "red",
            hjust = -0.2,
            size = 3) +
  geom_text(aes(x = 4.5, y = 12000, label = "Monthly Average = 11854"),
            color = "black",
            size = 3) +
  theme_minimal()
  
```

Derive monthly transponder ping:

```{r}
monthly_vessel_movement <- vessel_movement %>% 
  filter(type == "FishingVessel") %>%
  mutate(month = month(time)) %>% 
  select(loc, vessel, month) %>% 
  group_by(loc, month) %>% 
  summarize(n = n()) 
```

```{r, fig.width= 10}
monthly_vessel_movement$month <- factor(monthly_vessel_movement$month)
monthly_vessel_movement$loc <- factor(monthly_vessel_movement$loc,
                                             levels = c("City of Himark",
                                      "City of Lomark",
                                      "City of Haacklee",
                                      "City of Paackland",
                                      "City of South Paackland",
                                      "City of Port Grove",
                                      "Ghoti Preserve", 
                                      "Nemo Reef", 
                                      "Don Limpet Preserve",
                                      "Cod Table", 
                                      "Wrasse Beds",
                                      "Tuna Shelf",
                                      "Exit North",
                                      "Exit South",
                                      "Exit East",
                                      "Exit West",
                                      "Nav 1","Nav 2", "Nav 3", 
                                      "Nav A", "Nav B", "Nav C", "Nav D", "Nav E"))

hline.data <- monthly_vessel_movement %>% 
  group_by(loc) %>%
  summarise(avgvalue = mean(n))

ggplot(monthly_vessel_movement, 
       aes(x = month, 
           y = n, 
           group = loc, 
           color = loc)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  facet_wrap(~ loc, scales = "free_y") +  
  theme_minimal() +
  labs(title = "Changes in Visit Frequency by Month by Fishing Vessels",
       x = "Month",
       y = "No. of Visits",
       color = "Source") +
  geom_hline(data = hline.data,
             aes(yintercept = avgvalue),
             linetype = 6,
             color = "black",
             size = 0.5) +
  geom_text(data = hline.data, 
            aes(x = "4", y = avgvalue, label = "Average"), 
            hjust = 1, vjust = 1, 
            color = "black",
            size = 3) +
  geom_vline(aes(xintercept = 4),
             linetype = 6,
             color = "red",
             size = 0.5) +
  geom_text(data = hline.data, 
            aes(x = "4", y = avgvalue, label = "SouthSeafood caught"), 
            hjust = 1.5, vjust = 1.5,
            angle = 90,
            color = "red",
            size = 2)

```

From the plot above, we can see that after SouthSeafood was caught in mid-May, there is a drop in activities for all the fishing grounds and preserves immediately after mid-May, except for the increase in Don Limpet Preserve, from 1 in Mar and Jun to 2 observations in Aug.


### 4.2 What new behaviors in the Oceanus commercial fishing community are most suspicious and why?



```{r, fig.width= 10}
monthly_vessel_movement$month <- factor(monthly_vessel_movement$month)
monthly_vessel_movement$loc <- factor(monthly_vessel_movement$loc,
                                             levels = c("City of Himark",
                                      "City of Lomark",
                                      "City of Haacklee",
                                      "City of Paackland",
                                      "City of South Paackland",
                                      "City of Port Grove",
                                      "Ghoti Preserve", 
                                      "Nemo Reef", 
                                      "Don Limpet Preserve",
                                      "Cod Table", 
                                      "Wrasse Beds",
                                      "Tuna Shelf",
                                      "Exit North",
                                      "Exit South",
                                      "Exit East",
                                      "Exit West",
                                      "Nav 1","Nav 2", "Nav 3", 
                                      "Nav A", "Nav B", "Nav C", "Nav D", "Nav E"))

hline.data <- monthly_vessel_movement %>% 
  group_by(loc) %>%
  summarise(avgvalue = mean(n))

ggplot(monthly_vessel_movement, 
       aes(x = month, 
           y = n, 
           group = loc, 
           color = loc)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  facet_wrap(~ loc, scales = "free_y") +  
  theme_minimal() +
  labs(title = "Changes in Visit Frequency by Month by Fishing Vessels",
       x = "Month",
       y = "No. of Visits",
       color = "Source") +
  geom_hline(data = hline.data,
             aes(yintercept = avgvalue),
             linetype = 6,
             color = "black",
             size = 0.5) +
  geom_text(data = hline.data, 
            aes(x = "4", y = avgvalue, label = "Average"), 
            hjust = 1, vjust = 1, 
            color = "black",
            size = 3) +
  geom_vline(aes(xintercept = 4),
             linetype = 6,
             color = "red",
             size = 0.5) +
  geom_text(data = hline.data, 
            aes(x = "4", 
                y = avgvalue, 
                label = "SouthSeafood caught"), 
            vjust = 1.5,
            angle = 90,
            color = "red",
            size = 2) +
  theme(legend.position = "none")

```


